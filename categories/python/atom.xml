<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 1+1=2]]></title>
  <link href="http://blog.debao.me/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.debao.me/"/>
  <updated>2013-06-20T11:30:09+08:00</updated>
  <id>http://blog.debao.me/</id>
  <author>
    <name><![CDATA[Debao Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My first C Extension To Numpy]]></title>
    <link href="http://blog.debao.me/2013/04/my-first-c-extension-to-numpy/"/>
    <updated>2013-04-25T09:24:00+08:00</updated>
    <id>http://blog.debao.me/2013/04/my-first-c-extension-to-numpy</id>
    <content type="html"><![CDATA[<h2>A Simple Example</h2>

<p>Let's create an extension module called <code>opee</code> and let's say we want to create a Python interface to one C function <code>example</code>. This function takes a numpy array as argument and return an integer. We want this function to be callable from Python as follows:</p>

<pre><code>&gt;&gt;&gt; import opee
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.zeros( (2,3,4) )
&gt;&gt;&gt; opee.example()
</code></pre>

<p>To do this we need two files. The first is the C file which contains the actual code, and the second is the setup.py file used to create the module.</p>

<h3>Souce Code</h3>

<p>Begin by creating a file <code>opeemodule.c</code>.</p>

<p>```c opeemodule.c</p>

<h1>include "Python.h"</h1>

<h1>include "numpy/arrayobject.h"</h1>

<p>static PyObject<em>
example (PyObject </em>dummy, PyObject *args)
{</p>

<pre><code>PyObject *arg1=NULL;
PyObject *arr1=NULL;
int nd;

if (!PyArg_ParseTuple(args, "O", &amp;arg1))
    return NULL;

arr1 = PyArray_FROM_OTF(arg1, NPY_DOUBLE, NPY_IN_ARRAY);
if (arr1 == NULL)
    return NULL;

nd = PyArray_NDIM(arr1);   //number of dimensions

Py_DECREF(arr1);

return PyInt_FromLong(nd);
</code></pre>

<p>}</p>

<p>static struct PyMethodDef methods[] = {</p>

<pre><code>{"example", example, METH_VARARGS, "descript of example"},
{NULL, NULL, 0, NULL}
</code></pre>

<p>};</p>

<p>PyMODINIT_FUNC
initopee (void)
{</p>

<pre><code>(void)Py_InitModule("opee", methods);
import_array();
</code></pre>

<p>}
```</p>

<h3>Building</h3>

<p>First, we create a setup script.</p>

<p>```python setup.py</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding: UTF-8 -</em>-</h1>

<p>from distutils.core import setup, Extension
import numpy as np</p>

<p>ext_modules = [ Extension('opee', sources = ['opeemodule.c']) ]</p>

<p>setup(</p>

<pre><code>    name = 'Opee',
    version = '1.0',
    include_dirs = [np.get_include()], #Add Include path of numpy
    ext_modules = ext_modules
  )
</code></pre>

<p>```</p>

<p>Then run</p>

<pre><code>python setup.py instll
</code></pre>

<h2>Second Example</h2>

<p>```python test.py
import opee
import numpy as np</p>

<p>a = np.zeros((8, 7, 3, 2))
b = np.array([[1.1, 2.2, 3.3], [1.2, 1.3, 1.4]])
c = np.array([[1.1, 2.2, 3.3], [1.2, 1.3, 1.4]])
opee.example(a, b, c)
print c
```</p>

<p>```c opeemodule.cpp</p>

<h1>include <iostream></h1>

<h1>include "Python.h"</h1>

<h1>include "numpy/arrayobject.h"</h1>

<p>static PyObject<em>
example (PyObject </em>dummy, PyObject *args)
{</p>

<pre><code>PyObject *arg1=NULL, *arg2=NULL, *out=NULL;
PyArrayObject *arr1=NULL, *arr2=NULL, *oarr=NULL;

if (!PyArg_ParseTuple(args, "OOO!", &amp;arg1, &amp;arg2,
    &amp;PyArray_Type, &amp;out)) return NULL;

arr1 = (PyArrayObject*)PyArray_FROM_OTF(arg1, NPY_DOUBLE, NPY_IN_ARRAY);
if (arr1 == NULL) return NULL;
arr2 = (PyArrayObject*)PyArray_FROM_OTF(arg2, NPY_DOUBLE, NPY_IN_ARRAY);
if (arr2 == NULL) goto fail;
oarr = (PyArrayObject*)PyArray_FROM_OTF(out, NPY_DOUBLE, NPY_INOUT_ARRAY);
if (oarr == NULL) goto fail;

/*vv* code that makes use of arguments *vv*/

int nd = PyArray_NDIM(arr1);   //number of dimensions
npy_intp *shape = PyArray_DIMS(arr1);  // npy_intp array of length nd showing length in each dim.
for (int i=0; i&lt;nd; ++i)
    std::cout&lt;&lt;" "&lt;&lt;shape[i];
std::cout&lt;&lt;std::endl;

for (int i=0; i&lt;arr2-&gt;nd; ++i)
    std::cout&lt;&lt;" "&lt;&lt;arr2-&gt;dimensions[i];
std::cout&lt;&lt;std::endl;

for (int i=0; i&lt;oarr-&gt;dimensions[0]; ++i) {
    for (int j=0; j&lt;oarr-&gt;dimensions[1]; ++j) {
        double *v = (double*)PyArray_GETPTR2(oarr, i, j);
        *v = *v * 2;
    }
}
/*^^* code that makes use of arguments *^^*/

Py_DECREF(arr1);
Py_DECREF(arr2);
Py_DECREF(oarr);
Py_INCREF(Py_None);
return Py_None;
</code></pre>

<p> fail:</p>

<pre><code>Py_XDECREF(arr1);
Py_XDECREF(arr2);
PyArray_XDECREF_ERR(oarr);
return NULL;
</code></pre>

<p>}</p>

<p>//....
```</p>

<pre><code>python setup.py build_ext --inplace
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://docs.scipy.org/doc/numpy/user/c-info.how-to-extend.html">http://docs.scipy.org/doc/numpy/user/c-info.how-to-extend.html</a></li>
<li><a href="http://docs.python.org/2/extending/extending.html">http://docs.python.org/2/extending/extending.html</a></li>
<li><a href="http://docs.python.org/2/extending/building.html">http://docs.python.org/2/extending/building.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
