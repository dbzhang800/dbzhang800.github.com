<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qt5 | 1+1=2]]></title>
  <link href="http://blog.debao.me/categories/qt5/atom.xml" rel="self"/>
  <link href="http://blog.debao.me/"/>
  <updated>2013-08-01T12:39:54+08:00</updated>
  <id>http://blog.debao.me/</id>
  <author>
    <name><![CDATA[Debao Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redirect current process's stdout to a Widget such as QTextEdit]]></title>
    <link href="http://blog.debao.me/2013/07/redirect-current-processs-stdout-to-a-widget-such-as-qtextedit/"/>
    <updated>2013-07-05T17:26:00+08:00</updated>
    <id>http://blog.debao.me/2013/07/redirect-current-processs-stdout-to-a-widget-such-as-qtextedit</id>
    <content type="html"><![CDATA[<p>Note:</p>

<ul>
<li>Source code can be got from https://github.com/dbzhang800/StdoutRedirector</li>
<li>This class can only be used in Qt5, as QWindowsPipeReader which is introduced in Qt5.0 is used.</li>
</ul>


<h2>Implementation</h2>

<h3>Windows</h3>

<ul>
<li>Normally, we need to create pipe with CreatePipe(), then attach stdout to it's write end with SetStdHandle(), then read from pipe's read end with ReadFile().</li>
</ul>


<p>```cpp</p>

<pre><code>createWinPipe(hRead, hWrite);
if (m_channels &amp; StandardOutput)
    ::SetStdHandle(STD_OUTPUT_HANDLE, hWrite);
if (m_channels &amp; StandardError)
    ::SetStdHandle(STD_ERROR_HANDLE, hWrite);
</code></pre>

<p>```</p>

<ul>
<li>But the CRT has already completed initialization before the application gets a chance to call SetStdHandle(); the three low I/O handles 0, 1, and 2 have already been set up to use the original OS handles. So we must deal with this layer using posix api _dup2() too.</li>
</ul>


<p>```cpp</p>

<pre><code>int fd = _open_osfhandle((intptr_t)hWrite, _O_WRONLY|_O_TEXT);
if (m_channels &amp; StandardOutput)
    _dup2(fd, 1);
if (m_channels &amp; StandardError)
    _dup2(fd, 2);
_close(fd);
</code></pre>

<p>```</p>

<ul>
<li>Anonymous pipes created with CreatePipe() do not support asynchronous I/O, so named pipe is used.</li>
</ul>


<p>```cpp
static void createWinPipe(HANDLE &amp;hRead, HANDLE &amp;hWrite)
{</p>

<pre><code>QString pipeName = QString::fromLatin1("\\\\.\\pipe\\stdoutredirector-%1").arg(QUuid::createUuid().toString());
SECURITY_ATTRIBUTES attributes = {sizeof(SECURITY_ATTRIBUTES), 0, false};
hRead = ::CreateNamedPipe((wchar_t*)pipeName.utf16(), PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED,
                              PIPE_TYPE_BYTE | PIPE_WAIT, 1, 0, 1024 * 1024, 0, &amp;attributes);

SECURITY_ATTRIBUTES attributes2 = {sizeof(SECURITY_ATTRIBUTES), 0, true};
hWrite = ::CreateFile((wchar_t*)pipeName.utf16(), GENERIC_WRITE,
                    0, &amp;attributes2, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);

::ConnectNamedPipe(hRead, NULL);
</code></pre>

<p>}
```</p>

<ul>
<li>QWindowsPipeReader is used to watch the pipe read end.</li>
</ul>


<p>```cpp</p>

<pre><code>pipeReader = new QWindowsPipeReader(this);
pipeReader-&gt;setHandle(hRead);
pipeReader-&gt;startAsyncRead();
connect(pipeReader, SIGNAL(readyRead()), this, SIGNAL(readyRead()));
</code></pre>

<p>```</p>

<h3>Posix</h3>

<ul>
<li>First, we create a pipe, then make the writable end of the pipe the new stdout, and finally, read from the readable part of the pipe.</li>
</ul>


<p>```cpp</p>

<pre><code>::pipe(pipeEnds);
if (m_channels &amp; StandardOutput)
    ::dup2(pipeEnds[1], 1);
if (m_channels &amp; StandardError)
    ::dup2(pipeEnds[1], 2);
::close(pipeEnds[1]);
</code></pre>

<p>```</p>

<ul>
<li>QSocketNotifier is used in order to monitor the activity  of the pipe-read-end.</li>
</ul>


<p>```cpp</p>

<pre><code>socketNotifier = new QSocketNotifier(pipeEnds[0], QSocketNotifier::Read, this);
connect(socketNotifier, SIGNAL(activated(int)), this, SLOT(onSocketActivated()));
</code></pre>

<p>```</p>

<ul>
<li>Note that QSocketNotifier will keep emitting signal if data exists in the pipe, while our readyRead() only emit when new data arrival, so QRingBuffer is used as a buffer.</li>
</ul>


<h2>Issues</h2>

<ul>
<li>[Windows]Can't capture the stdout output generated by another dlls.</li>
</ul>


<p>If the dll compiled with a c/c++ run-time which is different from the run-time used by current application, or the run-time staticly linked to the dll or application, we will encounter this problem.</p>

<p>The reason is that, the DLL grabs the stdout handles when it is loaded, which  took place before we changed the stdout handles. Dynamically load the DLL after changing the stdout handles will be helpful in this case.</p>

<ul>
<li>[Windows]Can't capture the output of qDebug()</li>
</ul>


<p>When the application build as a GUI application(without CONFIG += console in the .pro file), the debug messages will be send to the Debuger using the system api OutputDebugString().</p>

<p><code>
OutputDebugString(reinterpret_cast&lt;const wchar_t *&gt;(logMessage.utf16()));
</code></p>

<p>If <code>CONFIG+=console</code> is added to the .pro file, the debug message will be sent to the stderr.</p>

<p><code>
fprintf(stderr, "%s", logMessage.toLocal8Bit().constData());
</code></p>

<h2>Reference</h2>

<ul>
<li><a href="http://support.microsoft.com/kb/q105305">INFO: Calling CRT Output Routines from a GUI Application </a></li>
<li><a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/redirecting-standard-io.html">Redirecting standard I/O from within a program</a></li>
<li><a href="http://www.halcyon.com/~ast/dload/guicon.htm">Adding Console I/O to a Win32 GUI App</a></li>
<li><a href="http://stackoverflow.com/questions/3202654/will-loading-a-dll-dynamically-reconcile-its-stderr-to-a-main-application-if-so">Will loading a DLL dynamically reconcile its stderr to a main application? If so, then howâ€¦?</a></li>
<li><a href="http://stackoverflow.com/questions/5911147/how-to-redirect-printf-output-back-into-code">How to redirect printf output back into code?</a></li>
<li><a href="http://social.msdn.microsoft.com/Forums/vstudio/en-US/a111b4c6-c491-4586-8fcb-2ad67bfbbae8/is-setstdhandlestdoutputhandle-broken-under-windows-7-">Is SetStdHandle(STD_OUTPUT_HANDLE, ..) broken under windows 7 ?? </a></li>
<li><a href="http://www.adras.com/Redirect-stderr-stdout-to-a-file-using-SetStdHandle.t8132-144.html">Redirect stderr/stdout to a file using SetStdHandle</a></li>
<li><a href="http://fixunix.com/programmer/95541-converting-file*-handle.html">Converting a FILE* to a HANDLE ?</a></li>
<li><a href="http://lists.qt.nokia.com/public/qt-interest/2011-January/030998.html">How to capture stdout and redirect it to the gui?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt Macro: Q_DECLARE_INTERFACE]]></title>
    <link href="http://blog.debao.me/2013/06/qt-macro-q-declare-interface/"/>
    <updated>2013-06-25T12:34:00+08:00</updated>
    <id>http://blog.debao.me/2013/06/qt-macro-q-declare-interface</id>
    <content type="html"><![CDATA[<h2>Q_DECLARE_INTERFACE(InterfaceClassName, InterfaceId)</h2>

<p>This macro associate the given InterfaceId to the interface class called InterfaceClassName.The macro is normally used right after the interface definition:</p>

<p><code>cpp
class MyInterface {};
Q_DECLARE_INTERFACE(MyInterface, "me.debao.qt.myinterface")
</code></p>

<p>Q_DECLARE_INTERFACE is a macro that defines helper function that make qobject_cast&lt;IFace<em>>(QObject </em>object) return a IFace pointer.
```cpp</p>

<h1>define Q_DECLARE_INTERFACE(IFace, IId) \</h1>

<pre><code>template &lt;&gt; inline const char *qobject_interface_iid&lt;IFace *&gt;() \
{ return IId; } \
template &lt;&gt; inline IFace *qobject_cast&lt;IFace *&gt;(QObject *object) \
{ return reinterpret_cast&lt;IFace *&gt;((object ? object-&gt;qt_metacast(IId) : 0)); } \
template &lt;&gt; inline IFace *qobject_cast&lt;IFace *&gt;(const QObject *object) \
{ return reinterpret_cast&lt;IFace *&gt;((object ? const_cast&lt;QObject *&gt;(object)-&gt;qt_metacast(IId) : 0)); }
</code></pre>

<p>```</p>

<p>InterfaceId is used in the function <code>QObject::qt_metacast(InterfaceId)</code>. But, how does this function work?</p>

<h2>Q_INTERFACES(...)</h2>

<p>This macro tells Qt which interfaces the class implements.</p>

<p>```cpp
class PluginObject : public QObject, public MyInterface
{</p>

<pre><code>Q_OBJECT
Q_INTERFACES(MyInterface)
</code></pre>

<p>public:</p>

<pre><code>...
</code></pre>

<p>};</p>

<p>```</p>

<p>When moc find Q_INTERFACES, it will generate a function called qt_metacast()</p>

<p>```cpp
void <em>PluginObject::qt_metacast(const char </em>iname)
{</p>

<pre><code>if (strcmp(iname, "PluginObject")==0) return this;
if (strcmp(iname, "MyInterface")==0) return static_cast&lt;MyInterface *&gt;(this);
if (strcmp(iname, "me.debao.qt.myinterface")==0) return static_cast&lt;MyInterface *&gt;(this);
//...
</code></pre>

<p>}
```</p>

<h2>Q_PLUGIN_METADATA ()</h2>

<p>This macro is being used to declare meta data which will be part of plugin. Then these data can be obtained without load the plugin.</p>

<p><strong>NOTE: The plugin IID has nothing todo with the INTERFACES IID.</strong></p>

<p>```cpp
class PluginObject : public QObject, public MyInterface
{</p>

<pre><code>Q_OBJECT
Q_PLUGIN_METADATA(IID "me.dabao.qt.myplugin" FILE "abc.json")
Q_INTERFACES(MyInterface)
</code></pre>

<p>public:</p>

<pre><code>...
</code></pre>

<p>};
```</p>

<p>When moc encounter the macro, it will generate char array to store the meta data(IID string, FILE contents and other infomation such as QTVERSION) and a macro to export the plugin.</p>

<p>```cpp
static const unsigned char qt_pluginMetaData[] = {</p>

<pre><code>'Q', 'T', 'M', 'E', 'T', 'A', 'D', 'A', 'T', 'A', ' ', ' ',
0x71, 0x62, 0x6a, 0x73, 0x01, 0x00, 0x00, 0x00,
0xe0, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
0xcc, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00,
</code></pre>

<p>//...
};
QT_MOC_EXPORT_PLUGIN(EchoPlugin, EchoPlugin)
<code>
In macro QT_MOC_EXPORT_PLUGIN, two C functions get exported.
</code>cpp</p>

<h1>define Q_PLUGIN_INSTANCE(IMPLEMENTATION) \</h1>

<pre><code>    { \
        static QT_PREPEND_NAMESPACE(QPointer)&lt;QT_PREPEND_NAMESPACE(QObject)&gt; _instance; \
        if (!_instance)      \
            _instance = new IMPLEMENTATION; \
        return _instance; \
    }
</code></pre>

<h1>define QT_MOC_EXPORT_PLUGIN(PLUGINCLASS, PLUGINCLASSNAME)      \</h1>

<pre><code>        Q_EXTERN_C Q_DECL_EXPORT \
        const char *qt_plugin_query_metadata() \
        { return (const char *)qt_pluginMetaData; } \
        Q_EXTERN_C Q_DECL_EXPORT QT_PREPEND_NAMESPACE(QObject) *qt_plugin_instance() \
        Q_PLUGIN_INSTANCE(PLUGINCLASS)
</code></pre>

<p>```</p>

<h3>Magic in moc</h3>

<p>All the magic of this macro can be found in the source code of moc:</p>

<p>```cpp
void Generator::generatePluginMetaData()
{</p>

<pre><code>if (cdef-&gt;pluginData.iid.isEmpty())
    return;

// Write plugin meta data #ifdefed QT_NO_DEBUG with debug=false,
// true, respectively.

QJsonObject data;
const QString debugKey = QStringLiteral("debug");
data.insert(QStringLiteral("IID"), QLatin1String(cdef-&gt;pluginData.iid.constData()));
data.insert(QStringLiteral("className"), QLatin1String(cdef-&gt;classname.constData()));
data.insert(QStringLiteral("version"), (int)QT_VERSION);
data.insert(debugKey, QJsonValue(false));
data.insert(QStringLiteral("MetaData"), cdef-&gt;pluginData.metaData.object());

fputs("\nQT_PLUGIN_METADATA_SECTION const uint qt_section_alignment_dummy = 42;\n\n"
      "#ifdef QT_NO_DEBUG\n", out);
writePluginMetaData(out, data);

fputs("\n#else // QT_NO_DEBUG\n", out);

data.remove(debugKey);
data.insert(debugKey, QJsonValue(true));
writePluginMetaData(out, data);

fputs("#endif // QT_NO_DEBUG\n\n", out);

// 'Use' all namespaces.
int pos = cdef-&gt;qualified.indexOf("::");
for ( ; pos != -1 ; pos = cdef-&gt;qualified.indexOf("::", pos + 2) )
    fprintf(out, "using namespace %s;\n", cdef-&gt;qualified.left(pos).constData());
fprintf(out, "QT_MOC_EXPORT_PLUGIN(%s, %s)\n\n",
        cdef-&gt;qualified.constData(), cdef-&gt;classname.constData());
</code></pre>

<p>}
```</p>

<p>All the data can be retrieved through QPluginLoader before we really load the library.</p>

<p><code>cpp
QJsonObject QPluginLoader::metaData() const
</code></p>

<p>For example:</p>

<p>```cpp</p>

<pre><code>    QPluginLoader pluginLoader(fileName);
    QString iid = pluginLoader.metaData().value("IID").toString();
    if (iid == "my_plugin_iid") {
        pluginLoader.load();
        //...
    }
</code></pre>

<p>```</p>

<h2>Reference</h2>

<ul>
<li>http://qt-project.org/wiki/QtPlugins</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt Macro: Q_DECLARE_METATYPE]]></title>
    <link href="http://blog.debao.me/2013/06/qt-macro-q-declare-metatype/"/>
    <updated>2013-06-21T11:29:00+08:00</updated>
    <id>http://blog.debao.me/2013/06/qt-macro-q-declare-metatype</id>
    <content type="html"><![CDATA[<h2>QMetaType</h2>

<ul>
<li>It associates a type name to a type ID, enabling construction and destruction to occur dynamically at runtime.</li>
<li>QMetaType is used as a helper in QVariant and queued signals and slots connections.</li>
</ul>


<p>```cpp  example1</p>

<h1>include <QtCore></h1>

<p>class MyClass
{
public:</p>

<pre><code>MyClass() {qDebug("Created");}
~MyClass() {qDebug("Destroyed");}
</code></pre>

<p>};</p>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>int id = qRegisterMetaType&lt;MyClass&gt;("MyClass");

void *myClassPtr = QMetaType::create(id);
QMetaType::destroy(id, myClassPtr);
myClassPtr = 0;
</code></pre>

<p>}</p>

<p>```
and</p>

<p>```cpp example2</p>

<h1>include <QtCore></h1>

<p>class MyClass
{
public:</p>

<pre><code>MyClass() {qDebug("Created");}
MyClass(const MyClass&amp; ){qDebug("Copy");}
~MyClass() {qDebug("Destroyed");}
</code></pre>

<p>};
Q_DECLARE_METATYPE(MyClass)</p>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>MyClass cls;
QVariant var1 = QVariant::fromValue(cls);
MyClass cls1 = var1.value&lt;MyClass&gt;();
</code></pre>

<p>}
```</p>

<p>The Q_DECLARE_METATYPE() makes the type known to all template based functions, including QVariant. But if we want to use the type in queued signal and slot connections or in QObject's property system, you have to call qRegisterMetaType() since the names are resolved at runtime.</p>

<h2>Q_DECLARE_METATYPE</h2>

<p>This macro is used to specialise the template class QMetaTypeId with typename TYPE, in which, a static member function qt_metatype_id() is defined.</p>

<p>qRegisterMetaType() is called to register the TYPE and generate a TYPE ID. Then the TYPE ID is saved in local static vairable metatype_id.</p>

<p>```cpp</p>

<h1>define Q_DECLARE_METATYPE(TYPE)                                        \</h1>

<pre><code>QT_BEGIN_NAMESPACE                                                  \
template &lt;&gt;                                                         \
struct QMetaTypeId&lt; TYPE &gt;                                          \
{                                                                   \
    enum { Defined = 1 };                                           \
    static int qt_metatype_id()                                     \
        {                                                           \
            static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \
            if (const int id = metatype_id.loadAcquire())           \
                return id;                                          \
            const int newId = qRegisterMetaType&lt; TYPE &gt;(#TYPE,      \
                          reinterpret_cast&lt; TYPE *&gt;(quintptr(-1))); \
            metatype_id.storeRelease(newId);                        \
            return newId;                                           \
        }                                                           \
};                                                                  \
QT_END_NAMESPACE
</code></pre>

<p>```</p>

<p>Note that, for Qt's builtin types, <code>Q_DECLARE_BUILTIN_METATYPE</code> instead of <code>Q_DECLARE_METATYPE</code> is used. The ids of these types are constant.
```</p>

<h1>define Q_DECLARE_BUILTIN_METATYPE(TYPE, METATYPEID, NAME) \</h1>

<pre><code>QT_BEGIN_NAMESPACE \
template&lt;&gt; struct QMetaTypeId2&lt;NAME&gt; \
{ \
    enum { Defined = 1, IsBuiltIn = true, MetaType = METATYPEID };   \
    static inline Q_DECL_CONSTEXPR int qt_metatype_id() { return METATYPEID; } \
}; \
QT_END_NAMESPACE
</code></pre>

<p>```
Olivier Goffart said that,
<blockquote><p>I beleive it has been added so adding builting type do not conflicts with<br/>Q_DECLARE_METATYPE of the same type.</p></blockquote></p>

<h2>qRegisterMetaType</h2>

<p>Information of Qt's builtin types is saved in a static global const struct array <code>types[]</code>.</p>

<p>```
static const struct { const char * typeName; int typeNameLength; int type; } types[] = {</p>

<pre><code>//  ...
{0, 0, QMetaType::UnknownType}
</code></pre>

<p>};</p>

<p>```</p>

<p>While the information of the types register through qRegisterMetaType is stored in static QVector with type QCustomTypeInfo
<code>
Q_GLOBAL_STATIC(QVector&lt;QCustomTypeInfo&gt;, customTypes)
</code></p>

<p>The definition of QCustomTypeInfo:</p>

<p>```cpp
class QMetaTypeInterface
{
public:</p>

<pre><code>QMetaType::Creator creator;
QMetaType::Deleter deleter;
QMetaType::SaveOperator saveOp;
QMetaType::LoadOperator loadOp;
QMetaType::Constructor constructor;
QMetaType::Destructor destructor;
int size;
quint32 flags; // same as QMetaType::TypeFlags
const QMetaObject *metaObject;
</code></pre>

<p>};</p>

<p>public:
class QCustomTypeInfo : public QMetaTypeInterface
{
public:</p>

<pre><code>QCustomTypeInfo()
    : alias(-1)
{
    QMetaTypeInterface empty = QT_METATYPE_INTERFACE_INIT(void);
    *static_cast&lt;QMetaTypeInterface*&gt;(this) = empty;
}
QByteArray typeName;
int alias;
</code></pre>

<p>};</p>

<p>```</p>

<h3>qRegisterMetaType() vs qRegisterMetaType(const char *)</h3>

<p>When Call qRegisterMetaType() to register the type T. T must be declared with Q_DECLARE_METATYPE()
As the member function qt_metatype_id() which is expaned from Q_DECLARE_METATYPE will be called in qMetaTypeId<T>().
```
template <typename T>
inline Q_DECL_CONSTEXPR int qRegisterMetaType()
{</p>

<pre><code>return qMetaTypeId&lt;T&gt;();
</code></pre>

<p>}
```
And we can see that, qRegisterMetaType(const char *) is called in qt_metatype_id() too.</p>

<p>```
template <typename T>
int qRegisterMetaType(const char *typeName</p>

<h1>ifndef Q_QDOC</h1>

<pre><code>, T * dummy = 0
, typename QtPrivate::MetaTypeDefinedHelper&lt;T, QMetaTypeId2&lt;T&gt;::Defined &amp;&amp; !QMetaTypeId2&lt;T&gt;::IsBuiltIn&gt;::DefinedType defined = QtPrivate::MetaTypeDefinedHelper&lt;T, QMetaTypeId2&lt;T&gt;::Defined &amp;&amp; !QMetaTypeId2&lt;T&gt;::IsBuiltIn&gt;::Defined
</code></pre>

<h1>endif</h1>

<p>)
{</p>

<pre><code>QT_PREPEND_NAMESPACE(QByteArray) normalizedTypeName = QMetaObject::normalizedType(typeName);
return qRegisterNormalizedMetaType&lt;T&gt;(normalizedTypeName, dummy, defined);
</code></pre>

<p>}
```</p>

<p>Finally, QCustomTypeInfo will be constructed and added to the static QVector.</p>

<p>```</p>

<pre><code>QVector&lt;QCustomTypeInfo&gt; *ct = customTypes();
</code></pre>

<p>//...</p>

<pre><code>        QCustomTypeInfo inf;
        inf.typeName = normalizedTypeName;
        inf.creator = creator;
        inf.deleter = deleter;
        //...
        inf.metaObject = metaObject;
        idx = ct-&gt;size() + User;
        ct-&gt;append(inf);
        return idx;
</code></pre>

<p>```</p>

<h2>pointerToTypeDerivedFromQObject ?</h2>

<p>Q_DECLARE_METATYPE for QObjectDerived class can be omitted. For example,</p>

<p>```</p>

<h1>include <QtCore></h1>

<p>class QObjectDerived : public QObject
{
  Q_OBJECT
};
//Q_DECLARE_METATYPE(QObjectDerived*)</p>

<p>class MyClass
{</p>

<p>};
Q_DECLARE_METATYPE(MyClass*)</p>

<h1>include "main.moc"</h1>

<p>int main()
{</p>

<pre><code>qDebug() &lt;&lt; qMetaTypeId&lt;MyClass*&gt;();
qDebug() &lt;&lt; qMetaTypeId&lt;QObjectDerived*&gt;();

return 0;
</code></pre>

<p>}
```</p>

<p>Here, another internal QMetaTypeId<em> is introduced.
```
template <typename T>
struct QMetaTypeIdQObject&lt;T</em>, /<em> isPointerToTypeDerivedFromQObject </em>/ true>
{</p>

<pre><code>enum {
    Defined = 1
};

static int qt_metatype_id()
{
    static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0);
    if (const int id = metatype_id.loadAcquire())
        return id;
    const char * const cName = T::staticMetaObject.className();
    QByteArray typeName;
    typeName.reserve(int(strlen(cName)) + 1);
    typeName.append(cName).append('*');
    const int newId = qRegisterNormalizedMetaType&lt;T*&gt;(
                    typeName,
                    reinterpret_cast&lt;T**&gt;(quintptr(-1)));
    metatype_id.storeRelease(newId);
    return newId;
}
</code></pre>

<p>};</p>

<p>```</p>

<h2>Reference</h2>

<ul>
<li><a href="http://lists.qt-project.org/pipermail/development/2012-February/001880.html">[Development] QMetaTypeId and QMetaTypeId2</a></li>
<li><a href="http://steveire.wordpress.com/2011/03/16/implementing-qvariantqmetatype-features-with-template-tricks/">http://steveire.wordpress.com/2011/03/16/implementing-qvariantqmetatype-features-with-template-tricks/</a></li>
<li><a href="http://qt-project.org/wiki/QVariant">http://qt-project.org/wiki/QVariant</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
