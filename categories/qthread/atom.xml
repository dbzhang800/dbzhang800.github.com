<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: QThread | 1+1=2]]></title>
  <link href="http://blog.debao.me/categories/qthread/atom.xml" rel="self"/>
  <link href="http://blog.debao.me/"/>
  <updated>2013-08-07T12:25:12+08:00</updated>
  <id>http://blog.debao.me/</id>
  <author>
    <name><![CDATA[Debao Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use QThread in the right way (Part 2)]]></title>
    <link href="http://blog.debao.me/2013/08/how-to-use-qthread-in-the-right-way-part-2/"/>
    <updated>2013-08-06T18:29:00+08:00</updated>
    <id>http://blog.debao.me/2013/08/how-to-use-qthread-in-the-right-way-part-2</id>
    <content type="html"><![CDATA[<p>There are two way to use QThread:</p>

<ul>
<li><strong>Subclass QThread and reimplement its run() function</strong></li>
<li><strong>Use worker objects by moving them to the thread</strong></li>
</ul>


<p>As the QThread::run() is the entry point of worker thread, so the former usage is rather easy to understand.</p>

<p>In this article, we will try to figure out in which way the latter usage works.</p>

<h2>Event Loop</h2>

<p>As a event direvn programming framework, Qt make use of event loop widely. For example, following functions are used in nearly every Qt program.</p>

<p><code>
QCoreApplication::exec()
QDialog::exec()
QDrag::exec()
QMenu::exec()
QThread::exec()
...
</code></p>

<p>Each of them will create a QEventLoop object, and run it. Take QCoreApplication as an example,</p>

<p>```cpp
int QCoreApplication::exec()
{
//...</p>

<pre><code>QEventLoop eventLoop;
int returnCode = eventLoop.exec();
</code></pre>

<p>//...</p>

<pre><code>return returnCode;
</code></pre>

<p>}
```</p>

<p>Conceptually, the event loop looks like this:</p>

<p>```cpp
int QEventLoop::exec(ProcessEventsFlags flags)
{
//...</p>

<pre><code>while (!d-&gt;exit) {
    while (!posted_event_queue_is_empty) {
        process_next_posted_event();
    }
}
</code></pre>

<p>//...
}
```</p>

<p>Each thread has its own event queue, note that, <strong>event queue is belong to thread instead of event loop, and it's shared by all the event loops running in this thread</strong>.</p>

<p>When the event loop find that its event queue is not empty, it will process the events one by one. Eventually, the <code>QObject::event()</code> member of the target object get called.</p>

<p>Seems it's really not easy to understand how the event system works without a example. So we create a demo</p>

<h3>Example</h3>

<p>In this example,</p>

<p>First, we</p>

<ul>
<li>Create a custom Event <code>new QEvent(QEvent::User)</code></li>
<li>Post the Event to a queue <code>QCoreApplication::postEvent()</code></li>
</ul>


<p>Then,</p>

<ul>
<li>The Event is discovered by the event loop in the queue <code>QApplication::exec()</code></li>
<li>The <code>Test::event()</code> get called by the event loop.</li>
</ul>


<p>```cpp</p>

<h1>if QT_VERSION>=0x050000</h1>

<h1>include <QtWidgets></h1>

<h1>else</h1>

<h1>include <QtGui></h1>

<h1>endif</h1>

<p>class Test : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>protected:</p>

<pre><code>bool event(QEvent *evt)
{
    if (evt-&gt;type() == QEvent::User) {
        qDebug()&lt;&lt;"Event received in thread"&lt;&lt;QThread::currentThread();
        return true;
    }
    return QObject::event(evt);
}
</code></pre>

<p>};</p>

<p>class Button : public QPushButton
{</p>

<pre><code>Q_OBJECT
Test *m_test;
</code></pre>

<p>public:</p>

<pre><code>Button(Test *test):QPushButton("Send Event"), m_test(test)
{
    connect(this, SIGNAL(clicked()), SLOT(onClicked()));
}
</code></pre>

<p>private slots:</p>

<pre><code>void onClicked()
{
    QCoreApplication::postEvent(m_test, new QEvent(QEvent::User));
}
</code></pre>

<p>};</p>

<h1>include "main.moc"</h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThread();

Test test;
Button btn(&amp;test);
btn.show();

return a.exec();
</code></pre>

<p>}
```</p>

<p>In this example, the <code>Test::event()</code> get called in the main thread. What should we do if want to run it in a work thread??</p>

<h2>Thread Affinity</h2>

<p>As each thread have its own event queue, so there will be more than one event queues exists in one multi-thread program. So which event queue will be used when we post a event?</p>

<p>Let's have a look at the code of postEvent().</p>

<p>```cpp
void QCoreApplication::postEvent(QObject <em>receiver, QEvent </em>event)
{</p>

<pre><code>QThreadData * volatile * pdata = &amp;receiver-&gt;d_func()-&gt;threadData;
QThreadData *data = *pdata;
QMutexLocker locker(&amp;data-&gt;postEventList.mutex);
data-&gt;postEventList.addEvent(QPostEvent(receiver, event));
</code></pre>

<p>}
```</p>

<p>As you can see, the event queue is found through the receiver's thread property. This thread is called the thread affinity - what thread the QObject "lives" in. Normally, it's the thread in which the object was created, but it can be changed using <code>QObject::moveToThread()</code>.</p>

<p>Please note that, <code>QCoreApplication::postEvent()</code> is thread safe, as QMutex has been used here.</p>

<p>Now, it's easy to run the event process it worker thread instead of main thread.</p>

<h3>Example</h3>

<p>Add three lines to the main() function of last example.</p>

<p>```
int main(int argc, char *argv[])
{</p>

<pre><code>QApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThread();

Test test;
QThread thread;               //new line
test.moveToThread(&amp;thread);   //new line
thread.start();               //new line

Button btn(&amp;test);
btn.show();

return a.exec();
</code></pre>

<p>}
```</p>

<p>The output of application will be</p>

<pre><code>From main thread:  QThread(0x9e8100) 
Event received in thread QThread(0x13fed4) 
Event received in thread QThread(0x13fed4)
</code></pre>

<p>while the output of last example was</p>

<pre><code>From main thread:  QThread(0x9e8100) 
Event received in thread QThread(0x9e8100) 
Event received in thread QThread(0x9e8100)
</code></pre>

<h2>Queued Connection</h2>

<p>For queued connection, when the signal is emitted, a event will be post to the event queue.</p>

<p>```cpp</p>

<pre><code>QMetaCallEvent *ev = c-&gt;isSlotObject ?
    new QMetaCallEvent(c-&gt;slotObj, sender, signal, nargs, types, args) :
    new QMetaCallEvent(c-&gt;method_offset, c-&gt;method_relative, c-&gt;callFunction, sender, signal, nargs, types, args);
QCoreApplication::postEvent(c-&gt;receiver, ev);
</code></pre>

<p>```</p>

<p>Then, this event will be found by the event queued, and finally, QObject::event() will be called in the thread.</p>

<p>```cpp
bool QObject::event(QEvent *e)
{</p>

<pre><code>switch (e-&gt;type()) {
case QEvent::MetaCall:
    {
        QMetaCallEvent *mce = static_cast&lt;QMetaCallEvent*&gt;(e);
</code></pre>

<p>```</p>

<p>As <code>QCoreApplication::postEvent()</code> is thread safe, so if you interact with an object only using queued signal/slot connections, then the usual multithreading precautions need not to be taken any more.</p>

<h2>Reference</h2>

<ul>
<li><a href="http://doc.qt.digia.com/qq/qq11-events.html">Another Look at Events</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use QThread in the right way (Part 1)]]></title>
    <link href="http://blog.debao.me/2013/08/how-to-use-qthread-in-the-right-way-part-1/"/>
    <updated>2013-08-05T17:34:00+08:00</updated>
    <id>http://blog.debao.me/2013/08/how-to-use-qthread-in-the-right-way-part-1</id>
    <content type="html"><![CDATA[<h2>A short history</h2>

<p>Long long ago, <strong>subclass QThread and reimplement its run() function</strong> is the only recommended way of using QThread. This is rather intuitive and easy to used. But when SLOTS and Qt event loop are used in the worker thread, some users <a href="http://blog.qt.digia.com/blog/2010/06/17/youre-doing-it-wrong/">do it wrong</a>. So Bradley T. Hughes, one of the Qt core developers, recommend that <strong>use worker objects by moving them to the thread using QObject::moveToThread</strong> . Unfortunately, some users went on a crusade against the former usage. So Olivier Goffart, one of the former Qt core developers, tell the subclass users: <a href="http://woboq.com/blog/qthread-you-were-not-doing-so-wrong.html">You were not doing so wrong</a>. Finally, we can find both usages in the documentation of QThread.</p>

<h2>QThread::run() is the thread entry point</h2>

<p>From the Qt Documentation, we can see that</p>

<blockquote><p>A QThread instance represents a thread and provides the means to start() a thread, which will then execute the reimplementation of QThread::run(). The run() implementation is for a thread what the main() entry point is for the application.</p></blockquote>

<p>As QThread::run() is the thread entry point, it is rather intuitive to use the Usage 1.</p>

<h2>Usage 1-0</h2>

<p>To run some code in a new thread, subclass QThread and reimplement its run() function.</p>

<p>For example</p>

<p>```cpp</p>

<h1>include <QtCore></h1>

<p>class Thread : public QThread
{
private:</p>

<pre><code>void run()
{
    qDebug()&lt;&lt;"From worker thread: "&lt;&lt;currentThreadId();
}
</code></pre>

<p>};</p>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QCoreApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();

Thread t;
QObject::connect(&amp;t, SIGNAL(finished()), &amp;a, SLOT(quit()));

t.start();
return a.exec();
</code></pre>

<p>}
```</p>

<p>The output more or less look like:</p>

<pre><code>From main thread:  0x15a8 
From worker thread:  0x128c 
</code></pre>

<h2>Usage 1-1</h2>

<p>As QThread::run() is the thread entry point, so it easy to undersand that, all the codes that are not get called in the run() function directly won't be executed in the worker thread.</p>

<p>In the following example, the member variable <code>m_stop</code> will be accessed by both stop() and run(). Consider that the former will be executed in main thread while the latter is executed in worker thread, mutex or other facility is needed.</p>

<p>```cpp</p>

<h1>if QT_VERSION>=0x050000</h1>

<h1>include <QtWidgets></h1>

<h1>else</h1>

<h1>include <QtGui></h1>

<h1>endif</h1>

<p>class Thread : public QThread
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>Thread():m_stop(false)
{}
</code></pre>

<p>public slots:</p>

<pre><code>void stop()
{
    qDebug()&lt;&lt;"Thread::stop called from main thread: "&lt;&lt;currentThreadId();
    QMutexLocker locker(&amp;m_mutex);
    m_stop=true;
}
</code></pre>

<p>private:</p>

<pre><code>QMutex m_mutex;
bool m_stop;

void run()
{
    qDebug()&lt;&lt;"From worker thread: "&lt;&lt;currentThreadId();
    while (1) {
        {
        QMutexLocker locker(&amp;m_mutex);
        if (m_stop) break;
        }
        msleep(10);
    }
}
</code></pre>

<p>};</p>

<h1>include "main.moc"</h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();
QPushButton btn("Stop Thread");
Thread t;

QObject::connect(&amp;btn, SIGNAL(clicked()), &amp;t, SLOT(stop()));
QObject::connect(&amp;t, SIGNAL(finished()), &amp;a, SLOT(quit()));

t.start();
btn.show();
return a.exec();
</code></pre>

<p>}
```</p>

<p>The output is more or less like</p>

<pre><code>From main thread:  0x13a8 
From worker thread:  0xab8 
Thread::stop called from main thread:  0x13a8
</code></pre>

<p>You can see that the Thread::stop() is executed in the main thread.</p>

<h2>Usage 1-2 (Wrong Usage)</h2>

<p>Though above examples are easy to understand, but it's not so intuitive when event system(or queued-connection) is introduced in worker thread.</p>

<p>For example, what should we do if we want to do something periodly in the worker thread?</p>

<ul>
<li>Create a QTimer in the Thread::run()</li>
<li>Connect the timeout signal to the slot of Thread</li>
</ul>


<p>```cpp</p>

<h1>include <QtCore></h1>

<p>class Thread : public QThread
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>private slots:</p>

<pre><code>void onTimeout()
{
    qDebug()&lt;&lt;"Thread::onTimeout get called from? : "&lt;&lt;QThread::currentThreadId();
}
</code></pre>

<p>private:</p>

<pre><code>void run()
{
    qDebug()&lt;&lt;"From worker thread: "&lt;&lt;currentThreadId();
    QTimer timer;
    connect(&amp;timer, SIGNAL(timeout()), this, SLOT(onTimeout()));
    timer.start(1000);

    exec();
}
</code></pre>

<p>};</p>

<h1>include "main.moc"</h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QCoreApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();

Thread t;
t.start();

return a.exec();
</code></pre>

<p>}</p>

<p>```</p>

<p>At first glance, the code seems fine. When the thread starts executing, we setup a QTimer thats going to run in the current thread's event queue. We connect the <code>onTimeout()</code>  to the timeout signal. Then we except it works in the worker thread?</p>

<p>But, the result of the example is</p>

<pre><code>From main thread:  0x13a4 
From worker thread:  0x1330 
Thread::onTimeout get called from?:  0x13a4 
Thread::onTimeout get called from?:  0x13a4 
Thread::onTimeout get called from?:  0x13a4 
</code></pre>

<p>Oh, No!!! They get called in the main thread instead of the work thread.</p>

<p>Very interesting, isn't it? (We will discuss what happened behined this in next blog)</p>

<h3>How to solve this problem</h3>

<p>In order to make the this SLOT works in the worker thread, some one pass the <code>Qt::DirectConnection</code> to the connect() function,</p>

<p>```cpp</p>

<pre><code>    connect(&amp;timer, SIGNAL(timeout()), this, SLOT(onTimeout()), Qt::DirectConnection);
</code></pre>

<p>```</p>

<p>and some other add following line to the thread constructor.</p>

<p>```cpp</p>

<pre><code>    moveToThread(this)
</code></pre>

<p>```</p>

<p>Both of them work as expected. But ...</p>

<p><a href="http://blog.qt.digia.com/blog/2010/06/17/youre-doing-it-wrong/">The second usage is wrong</a>,</p>

<blockquote><p>Even though this seems to work, it’s confusing, and not how QThread was designed to be used(all of the functions in QThread were written and intended to be called from the creating thread, not the thread that QThread starts)</p></blockquote>

<p>In fact, according to above statements, the first workaround is wrong too. As onTimeout() which is a member of our Thread object, get called from the creating thread too.</p>

<p>Both of them are bad uasge?! what should we do?</p>

<h2>Usage 1-3</h2>

<p>As none of the member of QThread object are designed to be called from the worker thread. So we must create an independent worker object if we want to use SLOTS.</p>

<p>```cpp</p>

<h1>include <QtCore></h1>

<p>class Worker : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>private slots:</p>

<pre><code>void onTimeout()
{
    qDebug()&lt;&lt;"Worker::onTimeout get called from?: "&lt;&lt;QThread::currentThreadId();
}
</code></pre>

<p>};</p>

<p>class Thread : public QThread
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>private:</p>

<pre><code>void run()
{
    qDebug()&lt;&lt;"From work thread: "&lt;&lt;currentThreadId();
    QTimer timer;
    Worker worker;
    connect(&amp;timer, SIGNAL(timeout()), &amp;worker, SLOT(onTimeout()));
    timer.start(1000);

    exec();
}
</code></pre>

<p>};</p>

<h1>include "main.moc"</h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QCoreApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();

Thread t;
t.start();

return a.exec();
</code></pre>

<p>}
```</p>

<p>The result of the application is</p>

<pre><code>From main thread:  0x810 
From work thread:  0xfac 
Worker::onTimeout get called from?:  0xfac 
Worker::onTimeout get called from?:  0xfac 
Worker::onTimeout get called from?:  0xfac 
</code></pre>

<p>Problem solved now!</p>

<p>Though this works perfect, but you may have notice that, when event loop <code>QThread::exec()</code> is used in the worker thread, the code in the QThread::run() seems has nothing to do with QThread itself.</p>

<p>So can we move the object creation out of the QThread::run(), and at the same time, the slots of they will still be called by the QThread::run()?</p>

<h2>Usage 2-0</h2>

<p>If we only want to make use of QThread::exec(), which has been called by QThread::run() by default, there will be no need to subclass the QThread any more.</p>

<ul>
<li>Create a Worker object</li>
<li>Do signal and slot connections</li>
<li>Move the Worker object to a sub-thread</li>
<li>Start thread</li>
</ul>


<p>```cpp</p>

<h1>include <QtCore></h1>

<p>class Worker : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>private slots:</p>

<pre><code>void onTimeout()
{
    qDebug()&lt;&lt;"Worker::onTimeout get called from?: "&lt;&lt;QThread::currentThreadId();
}
</code></pre>

<p>};</p>

<h1>include "main.moc"</h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QCoreApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();

QThread t;
QTimer timer;
Worker worker;

QObject::connect(&amp;timer, SIGNAL(timeout()), &amp;worker, SLOT(onTimeout()));
timer.start(1000);

timer.moveToThread(&amp;t);
worker.moveToThread(&amp;t);

t.start();

return a.exec();
</code></pre>

<p>}
```</p>

<p>The result is:</p>

<pre><code>From main thread:  0x1310 
Worker::onTimeout get called from?:  0x121c 
Worker::onTimeout get called from?:  0x121c 
Worker::onTimeout get called from?:  0x121c 
</code></pre>

<p>As expected, the slot doesn't run in the main thread.</p>

<p>In this example, both of the QTimer and Worker are moved to the sub-thread. In fact, moving QTimer to sub-thread is not required.</p>

<h1>Usage 2-1</h1>

<p>Simply remove the line <code>timer.moveToThread(&amp;t);</code> from above example will work as expected too.</p>

<p>```cpp
int main(int argc, char *argv[])
{</p>

<pre><code>QCoreApplication a(argc, argv);
qDebug()&lt;&lt;"From main thread: "&lt;&lt;QThread::currentThreadId();

QThread t;
QTimer timer;
Worker worker;

QObject::connect(&amp;timer, SIGNAL(timeout()), &amp;worker, SLOT(onTimeout()));
timer.start(1000);
</code></pre>

<p>//    timer.moveToThread(&amp;t);</p>

<pre><code>worker.moveToThread(&amp;t);

t.start();

return a.exec();
</code></pre>

<p>}
```</p>

<p>The difference is that:</p>

<p>In last example,</p>

<ul>
<li>The signal <code>timeout()</code> is emitted from sub-thread</li>
<li>As timer and worker live in the same thread, their connection type is direct connection.</li>
<li>The slot get called in the same thead in which signal get emitted.</li>
</ul>


<p>While in this example,</p>

<ul>
<li>The signal <code>timeout()</code> emitted from main thread,</li>
<li>As timer and worker live in different threads, their connection type is queued connection.</li>
<li>The slot get called in its living thread, which is the sub-thread.</li>
</ul>


<p>Thanks to a mechanism called queued connections, it is safe to connect signals and slots across different threads. If all the across threads communication are done though queued connections, the usual multithreading precautions such as QMutex will no longer need to be taken.</p>

<h2>In short</h2>

<ul>
<li><strong>Subclass QThread and reimplement its run() function</strong> is intuitive and there are still many perfectly valid reasons to subclass QThread, but when event loop is used in worker thread, it's not easy to do it in the right way.</li>
<li><strong>Use worker objects by moving them to the thread</strong> is easy to use when event loop exists, as it has hidden the details of event loop and queued connection.</li>
</ul>


<h2>Reference</h2>

<ul>
<li>http://blog.qt.digia.com/blog/2010/06/17/youre-doing-it-wrong/</li>
<li>http://woboq.com/blog/qthread-you-were-not-doing-so-wrong.html</li>
<li>http://ilearnstuff.blogspot.com/2012/08/when-qthread-isnt-thread.html</li>
</ul>

]]></content>
  </entry>
  
</feed>
