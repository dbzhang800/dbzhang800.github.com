<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[1+1=2]]></title>
  <link href="http://blog.debao.me/atom.xml" rel="self"/>
  <link href="http://blog.debao.me/"/>
  <updated>2013-06-19T09:43:55+08:00</updated>
  <id>http://blog.debao.me/</id>
  <author>
    <name><![CDATA[Debao Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[screen.css used by octopress]]></title>
    <link href="http://blog.debao.me/2013/06/screen-dot-css-used-by-octopress/"/>
    <updated>2013-06-18T15:48:00+08:00</updated>
    <id>http://blog.debao.me/2013/06/screen-dot-css-used-by-octopress</id>
    <content type="html"><![CDATA[<h2>screen.css</h2>

<p>The css file used by octopress blog with the default theme is called <code>screen.css</code>, which locates in source/stylesheets/screen.css.</p>

<h2>screen.scss</h2>

<p>The screen.scss file, which locates in sass/screen.scss, is used to generate the above css file.</p>

<figure class='code'><figcaption><span>screen.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;compass&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@include</span><span class="nd"> global-reset</span><span class="p">;</span>
</span><span class='line'><span class="k">@include</span><span class="nd"> reset-html5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;custom/colors&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;custom/fonts&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;custom/layout&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;base&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;partials&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;custom/styles&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first line, <code>compass</code>, which is an open-source CSS Authoring Framework, is imported.</p>

<h2>Reference</h2>

<ul>
<li><a href="http://octopress.org/docs/theme/template/">http://octopress.org/docs/theme/template/</a></li>
<li><a href="http://octopress.org/docs/theme/styles/">http://octopress.org/docs/theme/styles/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29">http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29</a></li>
<li><a href="http://sass-lang.com/tutorial.html">http://sass-lang.com/tutorial.html</a></li>
<li><a href="http://compass-style.org/reference/compass/reset/utilities/">http://compass-style.org/reference/compass/reset/utilities/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first C Extension To Numpy]]></title>
    <link href="http://blog.debao.me/2013/04/my-first-c-extension-to-numpy/"/>
    <updated>2013-04-25T09:24:00+08:00</updated>
    <id>http://blog.debao.me/2013/04/my-first-c-extension-to-numpy</id>
    <content type="html"><![CDATA[<h2>A Simple Example</h2>

<p>Let&#8217;s create an extension module called <code>opee</code> and let&#8217;s say we want to create a Python interface to one C function <code>example</code>. This function takes a numpy array as argument and return an integer. We want this function to be callable from Python as follows:</p>

<pre><code>&gt;&gt;&gt; import opee
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.zeros( (2,3,4) )
&gt;&gt;&gt; opee.example()
</code></pre>

<p>To do this we need two files. The first is the C file which contains the actual code, and the second is the setup.py file used to create the module.</p>

<h3>Souce Code</h3>

<p>Begin by creating a file <code>opeemodule.c</code>.</p>

<figure class='code'><figcaption><span>opeemodule.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;Python.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;numpy/arrayobject.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span><span class="o">*</span>
</span><span class='line'><span class="nf">example</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">dummy</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">arg1</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">arr1</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">PyArg_ParseTuple</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">arg1</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arr1</span> <span class="o">=</span> <span class="n">PyArray_FROM_OTF</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">NPY_DOUBLE</span><span class="p">,</span> <span class="n">NPY_IN_ARRAY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nd</span> <span class="o">=</span> <span class="n">PyArray_NDIM</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>   <span class="c1">//number of dimensions</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">PyInt_FromLong</span><span class="p">(</span><span class="n">nd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">PyMethodDef</span> <span class="n">methods</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="n">example</span><span class="p">,</span> <span class="n">METH_VARARGS</span><span class="p">,</span> <span class="s">&quot;descript of example&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">PyMODINIT_FUNC</span>
</span><span class='line'><span class="nf">initopee</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">Py_InitModule</span><span class="p">(</span><span class="s">&quot;opee&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="p">);</span>
</span><span class='line'>    <span class="n">import_array</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Building</h3>

<p>First, we create a setup script.</p>

<figure class='code'><figcaption><span>setup.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: UTF-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">Extension</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext_modules</span> <span class="o">=</span> <span class="p">[</span> <span class="n">Extension</span><span class="p">(</span><span class="s">&#39;opee&#39;</span><span class="p">,</span> <span class="n">sources</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;opeemodule.c&#39;</span><span class="p">])</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;Opee&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">include_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">get_include</span><span class="p">()],</span> <span class="c">#Add Include path of numpy</span>
</span><span class='line'>        <span class="n">ext_modules</span> <span class="o">=</span> <span class="n">ext_modules</span>
</span><span class='line'>      <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run</p>

<pre><code>python setup.py instll
</code></pre>

<h2>Second Example</h2>

<figure class='code'><figcaption><span>test.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opee</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">],</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">]])</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">],</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.3</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">]])</span>
</span><span class='line'><span class="n">opee</span><span class="o">.</span><span class="n">example</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>opeemodule.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;Python.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;numpy/arrayobject.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span><span class="o">*</span>
</span><span class='line'><span class="nf">example</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">dummy</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">arg1</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">arg2</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">out</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PyArrayObject</span> <span class="o">*</span><span class="n">arr1</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">arr2</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">oarr</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">PyArg_ParseTuple</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s">&quot;OOO!&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">arg1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">arg2</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">PyArray_Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">out</span><span class="p">))</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arr1</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyArrayObject</span><span class="o">*</span><span class="p">)</span><span class="n">PyArray_FROM_OTF</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">NPY_DOUBLE</span><span class="p">,</span> <span class="n">NPY_IN_ARRAY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">arr2</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyArrayObject</span><span class="o">*</span><span class="p">)</span><span class="n">PyArray_FROM_OTF</span><span class="p">(</span><span class="n">arg2</span><span class="p">,</span> <span class="n">NPY_DOUBLE</span><span class="p">,</span> <span class="n">NPY_IN_ARRAY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oarr</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyArrayObject</span><span class="o">*</span><span class="p">)</span><span class="n">PyArray_FROM_OTF</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">NPY_DOUBLE</span><span class="p">,</span> <span class="n">NPY_INOUT_ARRAY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">oarr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*vv* code that makes use of arguments *vv*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nd</span> <span class="o">=</span> <span class="n">PyArray_NDIM</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>   <span class="c1">//number of dimensions</span>
</span><span class='line'>    <span class="n">npy_intp</span> <span class="o">*</span><span class="n">shape</span> <span class="o">=</span> <span class="n">PyArray_DIMS</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>  <span class="c1">// npy_intp array of length nd showing length in each dim.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nd</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">&lt;&lt;</span><span class="n">shape</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr2</span><span class="o">-&gt;</span><span class="n">nd</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">&lt;&lt;</span><span class="n">arr2</span><span class="o">-&gt;</span><span class="n">dimensions</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">oarr</span><span class="o">-&gt;</span><span class="n">dimensions</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">oarr</span><span class="o">-&gt;</span><span class="n">dimensions</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">double</span> <span class="o">*</span><span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">PyArray_GETPTR2</span><span class="p">(</span><span class="n">oarr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>            <span class="o">*</span><span class="n">v</span> <span class="o">=</span> <span class="o">*</span><span class="n">v</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*^^* code that makes use of arguments *^^*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">arr2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">oarr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">Py_None</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Py_None</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="nl">fail:</span>
</span><span class='line'>    <span class="n">Py_XDECREF</span><span class="p">(</span><span class="n">arr1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_XDECREF</span><span class="p">(</span><span class="n">arr2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PyArray_XDECREF_ERR</span><span class="p">(</span><span class="n">oarr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//....</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>python setup.py build_ext --inplace
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://docs.scipy.org/doc/numpy/user/c-info.how-to-extend.html">http://docs.scipy.org/doc/numpy/user/c-info.how-to-extend.html</a></li>
<li><a href="http://docs.python.org/2/extending/extending.html">http://docs.python.org/2/extending/extending.html</a></li>
<li><a href="http://docs.python.org/2/extending/building.html">http://docs.python.org/2/extending/building.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sandbox: For Octopress Usage and Markdown Syntax Test]]></title>
    <link href="http://blog.debao.me/2012/08/sandbox-for-octopress-usage-and-markdown-syntax-test/"/>
    <updated>2012-08-28T17:32:00+08:00</updated>
    <id>http://blog.debao.me/2012/08/sandbox-for-octopress-usage-and-markdown-syntax-test</id>
    <content type="html"><![CDATA[<h2>Table Test</h2>

<p>Source Code:</p>

<pre><code>Left Aligned Header | Center Header | Right Aligned Header
:-------------------|:-------------:|--------------------:
Cell 0 0            | Cell 0 1      | Cell 0 2
Cell 1 0            | Cell 1 1      | Cell 1 2
… | … | …
Long Long Long Long Line … | Not so long Line … | Short Line
</code></pre>

<p>Preview:</p>

<table>
<thead>
<tr>
<th align="left">Left Aligned Header </th>
<th align="center"> Center Header </th>
<th align="right"> Right Aligned Header</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Cell 0 0            </td>
<td align="center"> Cell 0 1      </td>
<td align="right"> Cell 0 2</td>
</tr>
<tr>
<td align="left">Cell 1 0            </td>
<td align="center"> Cell 1 1      </td>
<td align="right"> Cell 1 2</td>
</tr>
<tr>
<td align="left">… </td>
<td align="center"> … </td>
<td align="right"> …</td>
</tr>
<tr>
<td align="left">Long Long Long Long Line … </td>
<td align="center"> Not so long Line … </td>
<td align="right"> Short Line</td>
</tr>
</tbody>
</table>


<h2>Code Highlight</h2>

<p>Source Code:</p>

<pre><code>```cpp First Code block of C++
#include &lt;iostream&gt;
int main()
{
    std::cout&lt;&lt;"dbzhang800"&lt;&lt;std::endl;
}

```
</code></pre>

<p>Preview:</p>

<figure class='code'><figcaption><span>First Code block of C++</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;dbzhang800&quot;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Source Code:</p>

<pre><code>```python Python Block Test
import sys
if __name__ == '__main__':
    pass
```
</code></pre>

<p>Preview:</p>

<figure class='code'><figcaption><span>Python Block Test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="http://octopress.org/docs">http://octopress.org/docs</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
<li><a href="http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/">http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup and Configure My Octopress Blog]]></title>
    <link href="http://blog.debao.me/2012/08/setup-and-configure-my-octopress-blog/"/>
    <updated>2012-08-27T21:44:00+08:00</updated>
    <id>http://blog.debao.me/2012/08/setup-and-configure-my-octopress-blog</id>
    <content type="html"><![CDATA[<p>I am using Mac OS X 10.8, Ubuntu 12.10 and Windows Vista at present. I want to have a simple blog which can be coutrolled by myself …</p>

<h2>Install Ruby 1.9.3</h2>

<p>Octopress depends on Ruby 1.9.2 or newer.</p>

<h3>Mac X 10.8</h3>

<p>The Ruby provided by mac is 1.8.7, so we need to install the latest one by ourself.</p>

<p>The missing package manager for OS X - <strong>Homebrew</strong>, provides ruby 1.9.3.</p>

<pre><code>$ruby &lt;(curl -fsSk https://raw.github.com/mxcl/homebrew/go)
$brew update
$brew install ruby ruby-build rbenv
</code></pre>

<p>Edit ~/.bash_login and add following line:</p>

<pre><code>export PATH=/usr/local/Cellar/ruby/1.9.3-p194/bin:$PATH
</code></pre>

<h3>Ubuntu 12.10</h3>

<p>Nothing special, apt-get is enough.</p>

<h3>Windows</h3>

<p>Download <a href="http://rubyforge.org/frs/?group_id=167">RubyInstaller</a> and <a href="https://github.com/oneclick/rubyinstaller/downloads/">DevKit</a>, then install them.</p>

<p>&#8220;Start Command Prompt with Ruby&#8221;, and changed to the directory where DevKit extracted, and run:</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
gem install rdiscount --platform=ruby
</code></pre>

<p>Set environment variable</p>

<pre><code>set LANG=zh_CN.UTF-8
set LC_ALL=zh_CN.UTF-8
</code></pre>

<h2>Install octopress</h2>

<p>Download the octopress</p>

<pre><code>$git clone git://github.com/imathis/octopress.git octopress
$cd octopress
</code></pre>

<p>Install some stuff.</p>

<pre><code>$gem install bundler
$bindle install
$rake install
</code></pre>

<h2>Configure octopress</h2>

<ul>
<li>Open <strong>_config.yml</strong>, then edit</li>
</ul>


<p><code>url</code>, <code>title</code>, <code>subtitle</code>, and <code>author</code></p>

<ul>
<li>Open <strong>source/_include/custom/head.html</strong>,</li>
</ul>


<p>then comment</p>

<pre><code>&lt;link href="http://fonts.googleapis.com/..."
&lt;link href="http://fonts.googleapis.com/..."
</code></pre>

<p>As they has been blocked in China, which make the blog take too long time to load.</p>

<h2>Write and View Blog</h2>

<p>To add a new post</p>

<pre><code>$rake new_post["My first blog"]
</code></pre>

<p>Then</p>

<pre><code>$rake generate
$rake preview
</code></pre>

<h2>Deploy</h2>

<p>Create a repository called username.github.com</p>

<p>Run</p>

<pre><code>$rake setup_github_pages
</code></pre>

<p>Produce HTML and Deploy it.</p>

<pre><code>$rake generate
$rake deploy
</code></pre>

<p>Push source to the source branch, or other private place.</p>

<pre><code>git add .
git commit -a -m 'comment'
git push origin source
</code></pre>

<h2>Custom Domain</h2>

<p>I want to use <code>blog.debao.me</code> for my pages. So create a file called <code>CNAME</code> under <code>source</code> directory. Then put the subdomain into the file</p>

<pre><code>blog.debao.me
</code></pre>

<p>Next, I need to setup my DNS. Add a <em>CNAME record</em> pointing to the pages is enough.</p>

<pre><code>blog.debao.me IN CNAME xxxxxx.github.com
</code></pre>

<h3>Redirect?</h3>

<p>At present, I hope that following two domains can be redirected to the pages too.</p>

<pre><code>debao.me
www.debao.me
</code></pre>

<p>This is very easy, isn&#8217;t it?</p>

<p>Though many <em>Sponsoring Registrars</em> such as <code>godaddy</code> have provided such function for us. But it doesn&#8217;t work in China.</p>

<p>So I need to create another site, then let such too domains point to it.</p>

<p>Project pages provided by github can be used in such cases. What we need is a <em>index.html</em> file, such as</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>1+1=2<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;REFRESH&quot;</span> <span class="na">content=</span><span class="s">&quot;0;url=http://blog.debao.me/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  Please visit <span class="nt">&lt;a</span> <span class="na">herf=</span><span class="s">&quot;http://blog.debao.me&quot;</span><span class="nt">&gt;</span>http://blog.debao.me<span class="nt">&lt;/a&gt;</span> ... .
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, create a <em>CNAME</em> file</p>

<pre><code>debao.me
</code></pre>

<p>Push above files to gh-pages branch.</p>

<p>Next, I need to setup my DNS. Add two <em>A records</em> pointing to the pages.</p>

<pre><code>debao.me IN A 204.232.175.78
www.debao.me IN A 204.232.175.78
</code></pre>

<p><strong>Note that</strong>, github will automaticly generate redirect from www.xxxx.me to xxxx.me for us.</p>

<h2>Remove blog from url path</h2>

<p>The urls of my blog look like this</p>

<pre><code>http://blog.debao.me/blog/...
</code></pre>

<p>which seems not good. So I want to move evertything to the root directory.</p>

<p>First, <code>_config.yml</code> file:</p>

<pre><code>permalink:/:year/:month/:title/
category_dir: categories
pagination_dir:
</code></pre>

<p>Second, <code>source/_include/custon/navigation.html</code></p>

<pre><code>&lt;li&gt;&lt;a href="http://blog.debao.me/archives""&gt; Archives&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p>And <code>source/index.html</code></p>

<pre><code>&lt;a href="http://blog.debao.me/archives"&gt; Blog Archives&lt;/a&gt;
</code></pre>

<p>Finally, Move <code>archives</code> from directory <code>source/blog</code> to <code>source</code>.</p>

<h2>Reference</h2>

<ul>
<li><a href="http://octopress.org/docs">http://octopress.org/docs</a></li>
<li><a href="http://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac/">http://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac/</a></li>
<li><a href="http://shanewfx.github.com/blog/2012/02/16/bulid-blog-by-octopress/">http://shanewfx.github.com/blog/2012/02/16/bulid-blog-by-octopress/</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
