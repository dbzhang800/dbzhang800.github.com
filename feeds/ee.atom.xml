<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>1+1=10 - EE</title><link href="https://blog.debao.me/" rel="alternate"></link><link href="https://blog.debao.me/feeds/ee.atom.xml" rel="self"></link><id>https://blog.debao.me/</id><updated>2024-06-02T20:00:00+08:00</updated><subtitle>记记笔记，放松一下...</subtitle><entry><title>STM32系统外设小记</title><link href="https://blog.debao.me/2024/06/notes-on-stm32-system-peripherals/" rel="alternate"></link><published>2024-06-02T20:00:00+08:00</published><updated>2024-06-02T20:00:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-06-02:/2024/06/notes-on-stm32-system-peripherals/</id><summary type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/"&gt;Keil MDK 社区版小记&lt;/a&gt;与&lt;a href="https://blog.debao.me/2024/05/notes-on-stm32cubemx/"&gt;STM32CubeMX小记&lt;/a&gt;，已经可以实现，让 CubeMX 生成的代码，同时兼容Keil MDK和CubeIDE两套环境：一套代码，两个IDE可以自由切换，两个人可以用不同的IDE协同工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只是 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/"&gt;Keil MDK 社区版小记&lt;/a&gt;与&lt;a href="https://blog.debao.me/2024/05/notes-on-stm32cubemx/"&gt;STM32CubeMX小记&lt;/a&gt;，已经可以实现，让 CubeMX 生成的代码，同时兼容Keil MDK和CubeIDE两套环境：一套代码，两个IDE可以自由切换，两个人可以用不同的IDE协同工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只是想不通，国内各种资料为什么执着于Keil MDK这个开发环境（其社区版又不能商用）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在可以回到起点，了解一下STM32的系统外设了...&lt;/p&gt;
&lt;h2 id="_1"&gt;系统外设？&lt;/h2&gt;
&lt;p&gt;ST的 &lt;a href="https://wiki.st.com/stm32mcu/wiki/Category:Getting_started_with_STM32_system_peripherals"&gt;wiki&lt;/a&gt; 中列的4类14种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统外设（System Peripherals）：GPIO，EXTI，PWR，LPBAM，DMA&lt;/li&gt;
&lt;li&gt;基本通讯外设（Basic communication peripherals）：UART，SPI，I2C，I3C&lt;/li&gt;
&lt;li&gt;定时外设（Timing peripherals）：RTC，WDG，HRTIM&lt;/li&gt;
&lt;li&gt;模拟外设（Analog peripherals）：DAC，ADC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列个表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;主要特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GPIO&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;General-Purpose Input/Output&lt;/td&gt;
&lt;td&gt;通用输入/输出端口，用于控制和读取外部设备的状态&lt;/td&gt;
&lt;td&gt;可配置为输入、输出、复用功能；支持上拉、下拉电阻&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;EXTI&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;External Interrupt/Event Controller&lt;/td&gt;
&lt;td&gt;外部中断/事件控制器，用于处理外部信号触发的中断&lt;/td&gt;
&lt;td&gt;支持多种触发模式（上升沿、下降沿、双边沿）；灵活的中断优先级配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PWR&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Power Control&lt;/td&gt;
&lt;td&gt;电源管理模块，用于控制微控制器的电源状态和低功耗模式&lt;/td&gt;
&lt;td&gt;支持不同的低功耗模式（睡眠、停止、待机）；电压监控和电池管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LPBAM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Low Power Background Autonomous Mode&lt;/td&gt;
&lt;td&gt;低功耗自动模式，用于在低功耗状态下执行后台任务&lt;/td&gt;
&lt;td&gt;允许在低功耗模式下执行特定任务，如数据传输和采集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DMA&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Direct Memory Access&lt;/td&gt;
&lt;td&gt;直接存储器访问，用于在外设和内存之间快速传输数据&lt;/td&gt;
&lt;td&gt;减少CPU负载，提高数据传输效率；支持多通道和多种传输模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;UART&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Universal Asynchronous Receiver/Transmitter&lt;/td&gt;
&lt;td&gt;通用异步收发器，用于串行通信&lt;/td&gt;
&lt;td&gt;支持全双工通信，波特率可编程；具有硬件流控制和多种错误检测机制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SPI&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Serial Peripheral Interface&lt;/td&gt;
&lt;td&gt;串行外设接口，用于高速同步串行通信&lt;/td&gt;
&lt;td&gt;支持主从模式、多从设备；全双工通信，数据传输速率高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;I2C&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Inter-Integrated Circuit&lt;/td&gt;
&lt;td&gt;集成电路间通信，用于短距离通信的多主多从总线&lt;/td&gt;
&lt;td&gt;支持多主多从模式；具有从设备地址识别和7位或10位地址模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;I3C&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Improved Inter-Integrated Circuit&lt;/td&gt;
&lt;td&gt;改进型集成电路间通信，I2C 的升级版&lt;/td&gt;
&lt;td&gt;兼容 I2C；更高的速度和更低的功耗；支持动态地址分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RTC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Real-Time Clock&lt;/td&gt;
&lt;td&gt;实时时钟，用于提供准确的时间和日期信息&lt;/td&gt;
&lt;td&gt;支持闹钟、中断和时间戳功能；内置备份电池，掉电后仍能保持时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;WDG&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Watchdog Timer&lt;/td&gt;
&lt;td&gt;看门狗定时器，用于防止系统失效或卡死&lt;/td&gt;
&lt;td&gt;定时器溢出时触发系统复位；可编程超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HRTIM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;High-Resolution Timer&lt;/td&gt;
&lt;td&gt;高分辨率定时器，用于精确的时间控制和信号生成&lt;/td&gt;
&lt;td&gt;提供高分辨率的PWM输出；支持复杂的时间和事件控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DAC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Digital-to-Analog Converter&lt;/td&gt;
&lt;td&gt;数模转换器，用于将数字信号转换为模拟信号&lt;/td&gt;
&lt;td&gt;支持多通道输出；分辨率和采样率可编程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ADC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Analog-to-Digital Converter&lt;/td&gt;
&lt;td&gt;模数转换器，用于将模拟信号转换为数字信号&lt;/td&gt;
&lt;td&gt;高速采样、分辨率可调；支持多通道输入和多种触发模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;东西太多了，先了解一下其中的 GPIO、UART、SPI&lt;/p&gt;
&lt;h2 id="gpio"&gt;GPIO&lt;/h2&gt;
&lt;p&gt;这个东西...&lt;/p&gt;
&lt;h3 id="gpio_1"&gt;GPIO是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;GPIO（General Purpose Input/Output，通用输入/输出）是微控制器或其他集成电路上的一种通用引脚，用于与外部设备进行数字信号交互。GPIO 引脚没有特定的功能，可以通过软件配置来实现多种用途，因此称为“通用”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先借ST官方&lt;a href="https://wiki.st.com/stm32mpu/wiki/GPIO_internal_peripheral"&gt;GPIO internal peripheral&lt;/a&gt;一张图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stm32-gpio-internal" src="https://blog.debao.me/images/arm/stm32-gpio-internal.png"&gt;&lt;/p&gt;
&lt;p&gt;对于GPIO的几种模式，可以列个表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式名称&lt;/th&gt;
&lt;th&gt;宏定义&lt;/th&gt;
&lt;th&gt;详细描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;输入模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GPIO_Mode_IN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配置引脚为输入模式，用于读取外部信号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;输出模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GPIO_Mode_OUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配置引脚为输出模式，用于驱动外部设备。可以选择推挽输出（Push-pull Output）或开漏输出（Open-drain Output）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;复用功能模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GPIO_Mode_AF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配置引脚为复用功能模式，用于连接内部外设（如 UART、I2C、SPI 等）。具体的复用功能由引脚的 AF（Alternate Function）寄存器配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;模拟模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GPIO_Mode_AN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配置引脚为模拟模式，用于模拟信号处理。常用于 ADC 输入或 DAC 输出。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于输出模式PuPd：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推挽输出（Push-pull Output）：标准的输出模式，能够提供强驱动能力。&lt;/li&gt;
&lt;li&gt;开漏输出（Open-drain Output）：适用于需要外部上拉电阻的应用，如 I2C 总线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hal"&gt;HAL函数&lt;/h3&gt;
&lt;p&gt;HAL库中主要的一些GPIO相关函数（具体可以查看stm32xxxx_hal_gpio.h文件)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化和配置相关&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_TypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIOx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_InitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_GPIO_DeInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_TypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIOx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;状态读写&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_GPIO_ReadPin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_TypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIOx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_GPIO_WritePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_TypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIOx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PinState&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PinState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_TypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GPIOx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;中断配置和处理&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_GPIO_EXTI_IRQHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_GPIO_EXTI_Callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;使用&lt;/h3&gt;
&lt;p&gt;cubemx或cubeide可以直接生成配置代码。剩下的编写读写代码就行了。单独控制一个灯闪烁，很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* Infinite loop */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* USER CODE BEGIN WHILE */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIOA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PIN_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* USER CODE END WHILE */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;引脚可以通过cubemx设置别名（对应C语言的宏），那么：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_GPIO_Port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LED_Pin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;如果不使用toggle，可以直接设置值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_WritePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_GPIO_Port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LED_Pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PIN_RESET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_WritePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_GPIO_Port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LED_Pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PIN_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;使用Delay延迟比较比较傻，正常应该使用定时器中断，比如配置使用CubeMX配置，TIM2定时器。而后在main.c 中定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 定时器中断回调函数&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_TIM_PeriodElapsedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIM_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;htim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htim&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TIM2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 切换 LED 状态&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIOA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PIN_5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;这是一个弱定义函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它能工作，另一方面是因为在stm32xxx_it.c中的中断处理函数调用HAL的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;TIM2_IRQHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HAL_TIM_IRQHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;htim2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="uart"&gt;UART&lt;/h2&gt;
&lt;p&gt;RS232等uart串口概念简单&lt;/p&gt;
&lt;h3 id="hal_1"&gt;HAL函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;初始化与配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_UART_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_DeInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;UART数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_UART_Transmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_Receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;HAL_UART_Transmit_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_Receive_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;HAL_UART_Transmit_DMA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_Receive_DMA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_UART_IRQHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_TxCpltCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_RxCpltCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_3"&gt;使用&lt;/h3&gt;
&lt;p&gt;初始化代码cubemx可以生成。只需关注数据传输，数据传输有三个编程模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮询方式&lt;/li&gt;
&lt;li&gt;中断方式（IT)&lt;/li&gt;
&lt;li&gt;DMA方式（DMA）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先只考虑其中的中断方式。&lt;/p&gt;
&lt;h4 id="_4"&gt;全局变量&lt;/h4&gt;
&lt;p&gt;main函数外，定义全局变量，代表发送和接受缓冲区&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/* USER CODE BEGIN PV */&lt;/span&gt;
&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* USER CODE END PV */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_5"&gt;接收&lt;/h4&gt;
&lt;p&gt;main函数中，在while之外，启动接收&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/* USER CODE BEGIN 2 */&lt;/span&gt;
&lt;span class="n"&gt;HAL_UART_Receive_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;huart1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv_buffef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* USER CODE END 2 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_6"&gt;中断处理&lt;/h4&gt;
&lt;p&gt;main函数外，定义回调函数，内部书写比较自由&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/* USER CODE BEGIN 4 */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_UART_RxCpltCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIOA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_PIN_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;send_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HAL_UART_Transmit_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HAL_UART_Receive_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* USER CODE END 4 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意：这个函数名&lt;strong&gt;一定不能&lt;/strong&gt;拼错了（Cplt是完成Complete的意思），拼错后也不会报错，没有这个函数也不会报错。因为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 STM32 HAL 库中，HAL_UART_RxCpltCallback 是一个弱定义（__weak）的函数。这意味着，如果用户没有显式地定义这个函数，链接器会使用库中提供的默认实现；如果用户定义了这个函数，链接器会使用用户提供的实现而不是默认的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可用的回调，可以通过&lt;code&gt;stm32xxxx_hal_uart.h&lt;/code&gt;文件查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TxHalfCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Tx Half Complete Callback        */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TxCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Tx Complete Callback             */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RxHalfCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Rx Half Complete Callback        */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RxCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Rx Complete Callback             */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ErrorCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Error Callback                   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbortCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Abort Complete Callback          */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbortTransmitCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Abort Transmit Complete Callback */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbortReceiveCpltCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Abort Receive Complete Callback  */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WakeupCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Wakeup Callback                  */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RxEventCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Reception Event Callback     */&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MspInitCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Msp Init callback                */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MspDeInitCallback&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;__UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="cm"&gt;/*!&amp;lt; UART Msp DeInit callback              */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="spi"&gt;SPI&lt;/h2&gt;
&lt;p&gt;SPI（Serial Peripheral Interface，串行外设接口）是一种同步串行通信协议，通常用于微控制器与各种外围设备（如传感器、存储设备、显示屏等）之间的通信。SPI 由 Motorola 公司开发，是一种全双工通信协议，具有高速、简单和灵活的特点。&lt;/p&gt;
&lt;p&gt;四条主要信号线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MISO（Master In Slave Out）：主设备输入、从设备输出。这条线用于从设备向主设备发送数据。&lt;/li&gt;
&lt;li&gt;MOSI（Master Out Slave In）：主设备输出、从设备输入。这条线用于主设备向从设备发送数据。&lt;/li&gt;
&lt;li&gt;SCLK（Serial Clock）：串行时钟信号，由主设备生成，用于同步数据传输。&lt;/li&gt;
&lt;li&gt;SS（Slave Select）或 CS（Chip Select）：从设备选择信号。通常由主设备控制，用于选择哪个从设备进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hal_2"&gt;HAL函数&lt;/h3&gt;
&lt;p&gt;和串口一样，也是支持轮询、中断、DMA三种传输方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化与配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Transmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_TransmitReceive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pTxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Transmit_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Receive_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_TransmitReceive_IT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pTxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Transmit_DMA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_Receive_DMA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HAL_StatusTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_TransmitReceive_DMA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pTxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRxData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;状态监控&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_SPI_StateTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_GetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_SPI_GetError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPI_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hspi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="c"&gt;C语言知识补充&lt;/h2&gt;
&lt;p&gt;之前没关注这个&lt;/p&gt;
&lt;h3 id="_7"&gt;关于弱定义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;弱定义（Weak Symbol）是一种符号（可以是函数或变量）的声明方式，它允许在链接过程中，如果没有强定义（Strong Symbol）与之对应，则使用该弱定义。弱定义通常用于库和框架中，以提供默认实现或默认值，而用户可以通过提供自己的强定义来覆盖这些默认行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不同的编译器通过不同的方式支持弱定义。以下是一些常见编译器的支持方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 和 Clang：使用 &lt;strong&gt;attribute&lt;/strong&gt;((weak))。&lt;/li&gt;
&lt;li&gt;ARM 编译器：使用 __weak。&lt;/li&gt;
&lt;li&gt;MSVC：不直接支持，但可以通过链接器选项 /alternatename 实现类似功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://wiki.st.com/stm32mcu/wiki/Category:Getting_started_with_STM32_system_peripherals&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Weak_symbol"&gt;Weak symbol - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="STM32"></category></entry><entry><title>STM32CubeMX小记</title><link href="https://blog.debao.me/2024/05/notes-on-stm32cubemx/" rel="alternate"></link><published>2024-05-30T21:01:00+08:00</published><updated>2024-05-30T21:01:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-30:/2024/05/notes-on-stm32cubemx/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-arm-development/"&gt;ARM开发环境小记&lt;/a&gt;与&lt;a href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/"&gt;Keil MDK 社区版小记&lt;/a&gt;。不求深入，简单了解一下CubeMX生成的代码的基本结构...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="stm32-cubemx"&gt;STM32 CubeMX 是什么？&lt;/h2&gt;
&lt;p&gt;CubeMX 是 STM32 Cube  家族一员，全家福这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX： 用于生成初始化代 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-arm-development/"&gt;ARM开发环境小记&lt;/a&gt;与&lt;a href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/"&gt;Keil MDK 社区版小记&lt;/a&gt;。不求深入，简单了解一下CubeMX生成的代码的基本结构...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="stm32-cubemx"&gt;STM32 CubeMX 是什么？&lt;/h2&gt;
&lt;p&gt;CubeMX 是 STM32 Cube  家族一员，全家福这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX： 用于生成初始化代码和配置项目，然后在&lt;/li&gt;
&lt;li&gt;STM32CubeIDE： 中编辑、编译和调试这些代码&lt;/li&gt;
&lt;li&gt;STM32CubeProgrammer： 用于将编译好的程序烧写到微控制器上&lt;/li&gt;
&lt;li&gt;STM32CubeMonitor： 可用于进一步的运行时分析和性能调优。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类比Qt的话，CubeMX 相当于qdesigner，CubeIDE相当于Qt Creator。CubeIDE中集成了CubeMX的大部分功能，但是使用其他IDE（比如Keil MDK）时，使用CubeMX生成的代码更容易。&lt;/p&gt;
&lt;p&gt;CubeMX可以为如下工具和IDE生成项目代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EWARM&lt;/li&gt;
&lt;li&gt;MDK-ARM&lt;/li&gt;
&lt;li&gt;STM32CubeIDE&lt;/li&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;li&gt;CMake&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;生成代码结构？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文所用 STM32CubeMX 版本为6.11.1，盲选择MCU型号STM32F051C8Tx。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="mdk-arm"&gt;尝试一（MDK-ARM)&lt;/h3&gt;
&lt;p&gt;生成代码结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶层 .mxproject 和 MyTest.ioc： 都是 CubeMX 的工程文件。需要保留以便于后续使用Cube重新生成或更新代码【.ioc 文件代表“Initialization and Configuration”】。&lt;/li&gt;
&lt;li&gt;MDK-ARM：为Keil MDK生成的项目文件（以便于在Keil下直接打开工程），以及启动文件 &lt;code&gt;startup_stm32f051x8.s&lt;/code&gt;【这个文件被放在这儿，是因为它能只用于Keil MDK，不通用】&lt;/li&gt;
&lt;li&gt;Core：用户需要修改的代码！！（在指定位置修改，以免后续用CubeMX更新时被覆盖）&lt;/li&gt;
&lt;li&gt;Drivers：CMSIS 和 HAL库文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;│  .mxproject
│  MyTest.ioc
│
├─Core
│  ├─Inc
│  │      main.h
│  │      stm32f0xx_hal_conf.h
│  │      stm32f0xx_it.h
│  │
│  └─Src
│          main.c
│          stm32f0xx_hal_msp.c
│          stm32f0xx_it.c
│          system_stm32f0xx.c
│
├─Drivers
│  ├─CMSIS
│  │  │  LICENSE.txt
│  │  │
│  │  ├─Device
│  │  │  └─ST
│  │  │      └─STM32F0xx
│  │  │          │  LICENSE.txt
│  │  │          │
│  │  │          └─Include
│  │  │                 stm32f051x8.h
│  │  │                 stm32f0xx.h
│  │  │                 system_stm32f0xx.h
│  │  └─Include
│  │          cmsis_armcc.h
│  │          cmsis_armclang.h
│  │          ...
│  │
│  └─STM32F0xx_HAL_Driver
│      │  LICENSE.txt
│      │
│      ├─Inc
│      │  │  stm32f0xx_hal.h
│      │  │  stm32f0xx_hal_cortex.h
|      |  |  ...
│      │  │
│      │  └─Legacy
│      │          stm32_hal_legacy.h
│      │
│      └─Src
│              stm32f0xx_hal.c
│              stm32f0xx_hal_cortex.c
|              .....
│
└─MDK-ARM
        MyTest.uvoptx
        MyTest.uvprojx
        startup_stm32f051x8.s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;重点关注下Core下的几个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main.c&lt;/li&gt;
&lt;li&gt;stm32f0xx_hal_msp.c&lt;/li&gt;
&lt;li&gt;stm32f0xx_it.c&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个文件内部都有大量的如下风格的注释段，用于让用户加入自定义的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* USER CODE BEGIN xxxxx */&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* USER CODE END xxxx */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="mainc"&gt;main.c&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;系统初始化：初始化硬件抽象层（HAL）、配置系统时钟。&lt;/li&gt;
&lt;li&gt;外设初始化：初始化各个外设模块，例如 GPIO、USART、I2C 等。&lt;/li&gt;
&lt;li&gt;主循环：包含应用程序的主逻辑，通常是一个无限循环。&lt;/li&gt;
&lt;li&gt;功能实现：执行主要的应用功能，例如数据处理、通信协议等。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;main.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stm32f0xx_hal.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SystemClock_Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;MX_GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;MX_USART2_UART_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;huart2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HAL_Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SystemClock_Config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MX_GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MX_USART2_UART_Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 主应用逻辑&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SystemClock_Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 配置系统时钟&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;MX_GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 初始化 GPIO&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;MX_USART2_UART_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 初始化 UART&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;如果生成代码时，勾选了&lt;code&gt;Generate peripheral initialization as a pair of .c/.h files per peripheral&lt;/code&gt;，各个外设的代码会生成在独立的外设文件中，比如gpio.c，uart.c  等，对应的初始化代码，比如&lt;code&gt;MX_GPIO_Init()&lt;/code&gt;，将不再直接位于main.c中，而是通过include被包含进来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="stm32f0xx_hal_mspc"&gt;stm32f0xx_hal_msp.c&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;msp 表示“Microcontroller Support Package”（微控制器支持包）。这个支持包包含了一些用于初始化和配置硬件外设的底层代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;外设支持包 (MSP) 配置：提供 HAL 库初始化和去初始化过程中的底层硬件配置。&lt;/li&gt;
&lt;li&gt;GPIO 配置：配置用于特定外设功能的 GPIO 引脚。&lt;/li&gt;
&lt;li&gt;中断配置：配置外设中断优先级和中断处理函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stm32f0xx_hal.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_MspInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 初始化全局 MSP&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_UART_MspInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USART2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 配置 USART2 的 MSP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HAL_UART_MspDeInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UART_HandleTypeDef&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;huart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USART2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 去初始化 USART2 的 MSP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="stm32f0xx_itc"&gt;stm32f0xx_it.c&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;it&lt;/code&gt; 表示“Interrupt”（中断）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;中断服务程序 (ISR)：实现各种中断处理函数，例如定时器中断、外部中断、通信中断等。&lt;/li&gt;
&lt;li&gt;系统中断处理：处理系统级中断，如 SysTick 中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;main.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stm32f0xx_it.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;NMI_Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;HardFault_Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SVC_Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;PendSV_Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SysTick_Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;HAL_IncTick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="cubeide"&gt;尝试二（CubeIDE）&lt;/h3&gt;
&lt;p&gt;和上面很像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都有 .mxproject 和 MyText.ioc：作为CubeMX的工程文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Drivers 文件夹和前面完全一样&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;都有对应的工程文件，CubeIDE的工程文件是 .project和 .cproject【这两个文件是Eclipse IDE 及其衍生版本的配置文件】。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;都有启动文件，CubeIDE的启动文件在Core文件夹内【文件内容和keil下的不一样，难怪keil下的放置到 MDK-ARM文件夹下】。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不同之外&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core下多了两个文件&lt;code&gt;syscalls.c&lt;/code&gt;和 &lt;code&gt;sysmem.c&lt;/code&gt;。用于实现依赖于底层硬件的C标准库功能，比如内存分配和输入输出等。另外，Keil 有自己的运行时和系统调用，所以不需要它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多了一个&lt;code&gt;STM32F051C8TX_FLASH.ld&lt;/code&gt;文件。这是一个&lt;strong&gt;链接脚本文件（linker script）&lt;/strong&gt;，用于GNU 工具链，链接脚本文件定义了 MCU 内存布局，并告诉链接器如何将编译生成的代码和数据段放置到目标设备的内存中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于其他都一样，两套IDE并存，感觉上应该没问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;│  .cproject
│  .mxproject
│  .project
│  MyTest.ioc
│  STM32F051C8TX_FLASH.ld
│
├─Core
│  ├─Inc
│  │      main.h
│  │      stm32f0xx_hal_conf.h
│  │      stm32f0xx_it.h
│  │
│  ├─Src
│  │      main.c
│  │      stm32f0xx_hal_msp.c
│  │      stm32f0xx_it.c
│  │      syscalls.c
│  │      sysmem.c
│  │      system_stm32f0xx.c
│  │
│  └─Startup
│          startup_stm32f051c8tx.s
│
└─Drivers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="cmake"&gt;尝试三（CMake)&lt;/h3&gt;
&lt;p&gt;生成适用于&lt;code&gt;arm-none-eabi-gcc&lt;/code&gt;的cmake工程文件。&lt;/p&gt;
&lt;p&gt;所有源码文件都和为CubeIDE生成的一样，局部差异&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动文件&lt;code&gt;startup_stm32f051x8.s&lt;/code&gt;从Core文件夹移到根目录下（内容完全一样）。Why？&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STM32F051C8TX_FLASH.ld&lt;/code&gt;文件，大致一样，但是内容又不完全一样！！（是否通用？）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;│  .mxproject
│  CMakeLists.txt
│  CMakePresets.json
│  MyTest.ioc
│  startup_stm32f051x8.s
│  STM32F051C8Tx_FLASH.ld
│
├─cmake
│  │  gcc-arm-none-eabi.cmake
│  │
│  └─stm32cubemx
│          CMakeLists.txt
│
├─Core
│  ├─Inc
│  │      main.h
│  │      stm32f0xx_hal_conf.h
│  │      stm32f0xx_it.h
│  │
│  └─Src
│          main.c
│          stm32f0xx_hal_msp.c
│          stm32f0xx_it.c
│          syscalls.c
│          sysmem.c
│          system_stm32f0xx.c
│
└─Drivers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_2"&gt;如何生成代码？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;选择MCU&lt;/li&gt;
&lt;li&gt;指定引脚&lt;/li&gt;
&lt;li&gt;配置时钟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;似乎很简单，但是由于不了解硬件，看起来很发懵...&lt;/p&gt;
&lt;h3 id="_3"&gt;指定引脚&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;直接在左侧启用相应的功能，有自动分配的引脚&lt;/li&gt;
&lt;li&gt;在引脚上点击右键，可以选择引脚&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="stm32cubemx-pinout" src="https://blog.debao.me/images/arm/stm32cubemx-pinout.png"&gt;&lt;/p&gt;
&lt;p&gt;图中，系统Core部分配置了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPIO（General-Purpose Input/Output)：通用输入输出端口。STM32 微控制器的每个引脚都可以配置为不同的功能，包括输入、输出、模拟功能或特定外设的功能。&lt;/li&gt;
&lt;li&gt;NVIC（Nested Vectored Interrupt Controller）：管理和处理中断。无论是使用中断方式还是 DMA 方式进行 UART 通信，都需要正确配置 NVIC 以确保中断能够正确触发和处理。&lt;/li&gt;
&lt;li&gt;RCC（Reset and Clock Control）：配置微控制器的时钟系统，包括内部和外部时钟源的选择、时钟分频、总线时钟的配置等。此处启用外部高速时钟HSE（其他 外部低速时钟LSE，内部高速时钟HSI，内部低速时钟LSI）&lt;/li&gt;
&lt;li&gt;SYS（System Configuration）：配置系统级别的设置，包括中断优先级、调试接口、复位源等。图中配置了&lt;code&gt;SYS_SWDIO&lt;/code&gt;和 &lt;code&gt;SYS_SWCLK&lt;/code&gt;引脚，用于调试接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外设部分配置了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPI1&lt;/li&gt;
&lt;li&gt;SPI2&lt;/li&gt;
&lt;li&gt;USART1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;设置时钟&lt;/h3&gt;
&lt;p&gt;出来这个图，完全不知道是什么了...&lt;/p&gt;
&lt;p&gt;&lt;img alt="stm32cubemx-clock" src="https://blog.debao.me/images/arm/stm32cubemx-clock.png"&gt;&lt;/p&gt;
&lt;h4 id="_5"&gt;概念&lt;/h4&gt;
&lt;p&gt;时钟源（Clock Sources)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;High Speed External (HSE) Clock&lt;/strong&gt;：配置外部高速时钟（如晶振或外部时钟源）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High Speed Internal (HSI) Clock&lt;/strong&gt;：配置内部高速时钟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Speed External (LSE) Clock&lt;/strong&gt;：配置外部低速时钟（如 RTC 时钟源）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Speed Internal (LSI) Clock&lt;/strong&gt;：配置内部低速时钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统时钟（System Clock)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SYSCLK&lt;/strong&gt;：系统时钟，是所有时钟的核心，可以由 HSE、HSI 或 PLL 产生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HCLK&lt;/strong&gt;：AHB 总线时钟，用于 CPU、存储器和 DMA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PCLK1&lt;/strong&gt;：APB1 总线时钟，用于低速外设。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PCLK2&lt;/strong&gt;：APB2 总线时钟，用于高速外设。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PLL配置（Phase-Locked Loop Configuration）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PLL Source&lt;/strong&gt;：PLL 的输入时钟源（通常为 HSE 或 HSI）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PLL Multipliers and Dividers&lt;/strong&gt;：配置 PLL 的倍频和分频因子，以生成所需的时钟频率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AHB（Advanced High-performance Bus）：高级高性能总线，链接高带宽和高性能外设，如DMA和存储控制器等。&lt;/li&gt;
&lt;li&gt;APB（Advanced Peripheral Bus）：低带宽的外设。不同的MCU上细分不同，比如F1系列又分APB1和APB2，其中APB1通常比APB2频率低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_6"&gt;配置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;选择时钟源（HSE或HSI）&lt;/li&gt;
&lt;li&gt;配置PLL（如果需要更高的时钟频率，使用PLL，并设置其倍频和分频因子）&lt;/li&gt;
&lt;li&gt;设置总线时钟分频器（AHB、APB1、APB2等）&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="STM32"></category></entry><entry><title>电气与电路图形符号小记</title><link href="https://blog.debao.me/2024/05/notes-on-electronic-symbols/" rel="alternate"></link><published>2024-05-25T23:13:00+08:00</published><updated>2024-05-25T23:13:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-25:/2024/05/notes-on-electronic-symbols/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;各种图形符号并不统一，稍微捋一捋...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="gbt-4728"&gt;GB/T 4728 电气简图用图形符号&lt;/h2&gt;
&lt;p&gt;GB/T 4728 是中国国家标准，涉及电气和电子图形符号。该标 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;各种图形符号并不统一，稍微捋一捋...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="gbt-4728"&gt;GB/T 4728 电气简图用图形符号&lt;/h2&gt;
&lt;p&gt;GB/T 4728 是中国国家标准，涉及电气和电子图形符号。该标准在2018年有一次更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GB/T 4728.1-2018 电气简图用图形符号 第1部分：概述和应用&lt;/li&gt;
&lt;li&gt;GB/T 4728.2-2018 电气简图用图形符号 第2部分：符号要素、限定符号和其他常用符号&lt;/li&gt;
&lt;li&gt;GB/T 4728.3-2018 电气简图用图形符号 第3部分：导体和连接&lt;/li&gt;
&lt;li&gt;GB/T 4728.4-2018 电气简图用图形符号 第4部分：基本无源元件&lt;/li&gt;
&lt;li&gt;GB/T 4728.5-2018 电气简图用图形符号 第5部分：半导体管和电子管&lt;/li&gt;
&lt;li&gt;GB/T 4728.6-2018 电气简图用图形符号 第6部分：模拟和数字集成电路&lt;/li&gt;
&lt;li&gt;GB/T 4728.7-2018 电气简图用图形符号 第7部分：开关、控制和保护装置&lt;/li&gt;
&lt;li&gt;GB/T 4728.8-2018 电气简图用图形符号 第8部分：测量仪器、灯和信号装置&lt;/li&gt;
&lt;li&gt;GB/T 4728.9-2018 电气简图用图形符号 第9部分：电信：开关和外围设备&lt;/li&gt;
&lt;li&gt;GB/T 4728.10-2018 电气简图用图形符号 第10部分：电信：传输&lt;/li&gt;
&lt;li&gt;GB/T 4728.11-2018 电气简图用图形符号 第11部分：建筑和设备安装用图形符号&lt;/li&gt;
&lt;li&gt;GB/T 4728.12-2018 电气简图用图形符号 第12部分：二进制逻辑元件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该标准基本等同于 IEC 60617 标准。在等同采用的基础上，GB/T 4728可能根据中国的具体需求和使用习惯进行了少量的本地化调整。另外不同于IEC 60617是一个在线数据库，GB/T 4728是定期发布的标准版本。&lt;/p&gt;
&lt;h2 id="iec-60617"&gt;IEC 60617&lt;/h2&gt;
&lt;p&gt;IEC 60617是由国际电工委员会（IEC）发布的国际标准，具体名称是“Graphical symbols for diagrams”。该标准提供了广泛的电气和电子图形符号，用于各种工程图纸和设计文件。&lt;/p&gt;
&lt;p&gt;IEC 60617标准是通过一个在线数据库发布的，覆盖了类似的内容，并且不断更新。访问IEC 60617数据库需要订阅，具体内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形符号的基本规则和应用&lt;/li&gt;
&lt;li&gt;各种电气和电子元件的符号&lt;/li&gt;
&lt;li&gt;逻辑符号和数字电路符号&lt;/li&gt;
&lt;li&gt;电信和传输相关的符号&lt;/li&gt;
&lt;li&gt;测量仪器和信号装置的符号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;其他标准&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标准名称&lt;/th&gt;
&lt;th&gt;全名&lt;/th&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IEEE Std 91/91a&lt;/td&gt;
&lt;td&gt;IEEE Standard Graphic Symbols for Logic Functions&lt;/td&gt;
&lt;td&gt;IEEE Std 91: 1984&lt;/td&gt;
&lt;td&gt;提供数字逻辑电路图的图形符号标准，确保符号一致性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IEEE Std 91/91a&lt;/td&gt;
&lt;td&gt;Supplement to IEEE Standard Graphic Symbols for Logic Functions&lt;/td&gt;
&lt;td&gt;IEEE Std 91a: 1991&lt;/td&gt;
&lt;td&gt;91a作为补充标准，扩展和更新了标准91，提供更多逻辑符号表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANSI/IEEE Std 315&lt;/td&gt;
&lt;td&gt;Graphic Symbols for Electrical and Electronics Diagrams&lt;/td&gt;
&lt;td&gt;ANSI Y32.2: 1975&lt;/td&gt;
&lt;td&gt;提供电气和电子图纸中使用的广泛符号，确保设计和交流中的符号统一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANSI/IEEE Std 315&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ANSI/IEEE Std 315: 1975&lt;/td&gt;
&lt;td&gt;适用于电力系统、通信系统和控制系统等各种电气和电子设计领域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JIC&lt;/td&gt;
&lt;td&gt;JIC Electrical Standards for Industrial Machinery&lt;/td&gt;
&lt;td&gt;1950年代（最早发布）？&lt;/td&gt;
&lt;td&gt;专用于工业机械的电气和电子控制系统设计，强调安全性和一致性。广泛应用于北美工业机械制造行业，提供详细的电气控制图标和符号标准&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;IEEE 和 IEC 在 KiCad 分别被称为美国风格和欧洲风格？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All of these symbols follow a particular standard. . Several standards are available, but most notably, engineers worldwide tend to work with the American style ('IEEE') or the European ('IEC') style.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kicad提到同一个原理图中，应该坚持一种风格。它的库中，美国风格的库名字中有us标识。&lt;/p&gt;
&lt;h2 id="eda"&gt;EDA软件支持情况&lt;/h2&gt;
&lt;p&gt;ChatGPT给出如下结果，也不知道对不对...&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EDA软件&lt;/th&gt;
&lt;th&gt;支持的标准&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cadence&lt;/td&gt;
&lt;td&gt;IEEE Std 91/91a, ANSI/IEEE Std 315, IEC 60617&lt;/td&gt;
&lt;td&gt;提供广泛的符号库和设计工具，适用于模拟、数字和混合信号设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mentor Graphics (Siemens EDA)&lt;/td&gt;
&lt;td&gt;IEEE Std 91/91a, ANSI/IEEE Std 315, IEC 60617&lt;/td&gt;
&lt;td&gt;提供强大的设计和验证工具，广泛应用于集成电路和系统设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Altium Designer&lt;/td&gt;
&lt;td&gt;ANSI/IEEE Std 315, IEC 60617&lt;/td&gt;
&lt;td&gt;提供一体化设计环境，适用于PCB设计、原理图设计和FPGA开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proteus&lt;/td&gt;
&lt;td&gt;ANSI/IEEE Std 315, IEC 60617&lt;/td&gt;
&lt;td&gt;集成电路设计和仿真工具，广泛用于教育和专业设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OrCAD&lt;/td&gt;
&lt;td&gt;ANSI/IEEE Std 315, IEC 60617&lt;/td&gt;
&lt;td&gt;专注于PCB设计和电路仿真，提供全面的设计和分析工具&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_2"&gt;如何从符号进行判定？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于电阻：IEEE使用锯齿形，IEC使用矩形表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="resistor_symbols" src="https://blog.debao.me/images/ee/resistor_symbols.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于逻辑门：IEEE符号是D形状，IEC符号是一个长方形。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="logic_gate_symbols" src="https://blog.debao.me/images/ee/logic_gate_symbols.png"&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Electronic_symbol"&gt;Electronic symbol - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.autodesk.com/view/ACAD_E/2025/CHS/?guid=GUID-F7D92230-92D0-49F9-83FB-BA7BF28D80D2"&gt;Autodesk: IEEE符号预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.autodesk.com/view/ACAD_E/2025/CHS/?guid=GUID-8C2A7E02-AC89-4164-8264-0B899573CD88"&gt;Autodesk：IEC符号预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.autodesk.com/view/ACAD_E/2025/CHS/?guid=GUID-91A5BCCD-A4DD-49AB-AE92-53E424D5C30C"&gt;Autodesk：JIC符号预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.autodesk.com/view/ACAD_E/2025/CHS/?guid=GUID-7871E6EF-24D5-467E-9B74-321FEDC9DFDA"&gt;Autodesk：IEC60617符号预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edrawsoft.com/cn/electrical-symbols.php"&gt;标准电路图符号 - Edraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.talkingelectronics.com/CctSymbols/Circuit_Symbols.html"&gt;CIRCUIT SYMBOLS (talkingelectronics.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category></entry><entry><title>Keil MDK 社区版小记</title><link href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/" rel="alternate"></link><published>2024-05-24T20:01:00+08:00</published><updated>2024-05-24T20:01:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-24:/2024/05/notes-on-keil-mdk-community/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-arm-development/"&gt;ARM开发环境小记&lt;/a&gt;，了解一下Keil MDK的社区版（社区版本不能用于商业用途）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标：看到一个例子代码，能大致知道是什么环境构建的，用了什么库 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-arm-development/"&gt;ARM开发环境小记&lt;/a&gt;，了解一下Keil MDK的社区版（社区版本不能用于商业用途）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标：看到一个例子代码，能大致知道是什么环境构建的，用了什么库&lt;/p&gt;
&lt;h2 id="keil"&gt;Keil&lt;/h2&gt;
&lt;p&gt;Keil ，取自其创始人的名字，德国人，发音 /kɑɪl/ - 其中 "kɑɪ" 发音类似于英语单词 "kite"。似乎在国内 /keɪl/或/ki:l/ 也能接受？&lt;/p&gt;
&lt;p&gt;Keil 有4套东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keil MDK：Keil for ARM，Keil MDK-ARM，用于ARM微处理器&lt;/li&gt;
&lt;li&gt;Keil PK51：Keil C51, 用于 8051微处理器&lt;/li&gt;
&lt;li&gt;Keil PK166：Keil C166，用于 XC16x, C16x, ST10微处理器&lt;/li&gt;
&lt;li&gt;Keil DK251：Keil C251，用于 C251微处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们只关心 Keil MDK。Keil MDK 又有三种授权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Community：免费，非商业用途&lt;/li&gt;
&lt;li&gt;Essential：&lt;/li&gt;
&lt;li&gt;Professional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们只关心Keil MDK社区版&lt;/p&gt;
&lt;h3 id="keil-mdk"&gt;keil MDK 编译器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ARM Compiler 5：armcc&lt;/li&gt;
&lt;li&gt;ARM Compiler 6：armclang&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;Keil MDK 版本&lt;/th&gt;
&lt;th&gt;默认编译器&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016年5月&lt;/td&gt;
&lt;td&gt;5.22&lt;/td&gt;
&lt;td&gt;ARM Compiler 5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;首次引入&lt;/strong&gt; ARM Compiler 6，但非默认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017年6月&lt;/td&gt;
&lt;td&gt;5.24&lt;/td&gt;
&lt;td&gt;ARM Compiler 5&lt;/td&gt;
&lt;td&gt;强烈推荐迁移到 ARM Compiler 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018年&lt;/td&gt;
&lt;td&gt;5.25&lt;/td&gt;
&lt;td&gt;ARM Compiler 6&lt;/td&gt;
&lt;td&gt;ARM Compiler 6 成为&lt;strong&gt;默认&lt;/strong&gt;编译器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022年&lt;/td&gt;
&lt;td&gt;5.34&lt;/td&gt;
&lt;td&gt;ARM Compiler 6&lt;/td&gt;
&lt;td&gt;不再包含 ARM Compiler 5，需要手动配置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="keil-mdk_1"&gt;Keil MDK社区版&lt;/h2&gt;
&lt;h3 id="_1"&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;直接官网 &lt;a href="https://www.keil.com/demo/eval/arm.htm"&gt;MDK-ARM Version 5.39 Evaluation Software Request (keil.com)&lt;/a&gt; 下载即可&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;安装包没有体现Comminity或lite字样，直接安装即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看About对话框，可以看到 MDK-Lite字样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="keil-mdk-community-about" src="https://blog.debao.me/images/arm/keil-mdk-community-about.png"&gt;&lt;/p&gt;
&lt;p&gt;另外，通过 &lt;code&gt;File-&amp;gt;License Managerment&lt;/code&gt;也可以看到 MDK-Lite字样。&lt;/p&gt;
&lt;h3 id="_2"&gt;使用&lt;/h3&gt;
&lt;p&gt;以STM32为例&lt;/p&gt;
&lt;h4 id="_3"&gt;创建项目&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Project-&amp;gt;New uVision projects...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选择一个项目路径，会弹出设备选择框&lt;/p&gt;
&lt;h4 id="_4"&gt;选择设备&lt;/h4&gt;
&lt;p&gt;选择匹配的设备&lt;/p&gt;
&lt;p&gt;&lt;img alt="keil-mdk-select-device" src="https://blog.debao.me/images/arm/keil-mdk-select-device.png"&gt;&lt;/p&gt;
&lt;h4 id="_5"&gt;管理运行时环境&lt;/h4&gt;
&lt;p&gt;“Manage Run-Time Environment”（管理运行时环境）是一个重要的工具，用于配置和管理项目所需的各种软件组件和中间件。&lt;/p&gt;
&lt;p&gt;组件通常由 Keil 和第三方提供，并且经过测试和验证，可以无缝集成到项目中。&lt;/p&gt;
&lt;p&gt;一般要选中 &lt;code&gt;CMSIS-Core&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="keil-mdk-manager-run-time" src="https://blog.debao.me/images/arm/keil-mdk-manager-run-time.png"&gt;&lt;/p&gt;
&lt;p&gt;CMSIS，全称为 Cortex Microcontroller Software Interface Standard，是由 ARM（现为 Arm Holdings）开发的一套标准化软件接口，用于简化 ARM Cortex-M 处理器系列的嵌入式应用开发。CMSIS 提供了一组一致的、硬件抽象层（HAL）接口和库，旨在提高代码的可移植性和可重用性，同时减少开发时间。&lt;/p&gt;
&lt;p&gt;对于CMSIS，有多个组成部分：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组成部分&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-Core&lt;/td&gt;
&lt;td&gt;提供对 Cortex-M 处理器内核的访问，包括内核寄存器、NVIC、系统时钟设置等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-DSP&lt;/td&gt;
&lt;td&gt;包含一组数字信号处理（DSP）库，支持常用的 DSP 算法，如 FFT、滤波、矩阵运算等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-RTOS&lt;/td&gt;
&lt;td&gt;定义一个统一的 RTOS API 接口，允许开发者使用不同的 RTOS 实现而无需更改应用代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-Driver&lt;/td&gt;
&lt;td&gt;定义一组标准化的外设驱动接口，如 I2C、SPI、UART、USB 等，帮助在不同硬件平台间移植代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-Pack&lt;/td&gt;
&lt;td&gt;定义软件包的格式和内容，包括设备描述、启动代码、驱动程序、示例应用等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMSIS-NN&lt;/td&gt;
&lt;td&gt;提供一组神经网络加速库，专为 Cortex-M 处理器优化，支持机器学习和神经网络推理。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_6"&gt;项目文件&lt;/h3&gt;
&lt;p&gt;生成的项目文件主要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;t1.uvprojx：Keil μVision 项目的主配置文件，包含项目的整体配置和结构信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;t1.uvoptx： Keil μVision 项目的选项文件，主要用于保存 IDE 相关的用户设置和首选项。【不要作为源码提交！】&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_7"&gt;引脚和时钟&lt;/h4&gt;
&lt;p&gt;需要在代码中配置寄存器。不同的库有不同的写法。&lt;/p&gt;
&lt;p&gt;对于ST家族的STM32，使用 Keil µVision 创建新项目并选择微控制器型号。&lt;/p&gt;
&lt;p&gt;使用 STM32CubeMX 生成初始化代码：配置引脚和外设，生成 Keil 项目。&lt;/p&gt;
&lt;p&gt;？？？ 既然这样，我为什么不直接STM32CubeIDE....&lt;/p&gt;
&lt;h2 id="stm32"&gt;STM32库？&lt;/h2&gt;
&lt;p&gt;对于STM32，除了ARM主导的 CMSIS，还有ST主导的HAL与LL、SPL等可以用...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们可以使用STM32CubeMX或者STM32CubeIDE生成 hal文件，放置到keil下使用！！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="hal-hardware-abstraction-layer"&gt;HAL (Hardware Abstraction Layer)&lt;/h3&gt;
&lt;p&gt;HAL 是“硬件抽象层”的英文缩写，通常由微控制器制造商提供，用于简化直接通过寄存器访问硬件资源的复杂性。HAL 为应用程序和硬件设备之间提供了一个抽象的接口，使得应用程序可以不依赖于底层硬件的具体实现。&lt;/p&gt;
&lt;h3 id="ll-low-layer"&gt;LL (Low Layer)&lt;/h3&gt;
&lt;p&gt;LL 是“低层”（Low Layer）的简称，也是由微控制器制造商提供的库，它提供了比 HAL 更接近硬件的抽象层。LL 库允许更精细的硬件控制，并且通常比 HAL 更为高效，但使用起来比 HAL 更复杂。&lt;/p&gt;
&lt;h3 id="spl-standard-peripheral-library"&gt;SPL (Standard Peripheral Library)&lt;/h3&gt;
&lt;p&gt;ST 标准外设库（Standard Peripheral Library），通常简称为 SPL，是由 STMicroelectronics 提供的一套用于 STM32 微控制器的硬件抽象层（HAL）库。它为用户提供了一组函数，用于配置和控制 STM32 微控制器的各种外设，如 GPIO、USART、SPI、I2C、ADC 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽管STM32Cube HAL 库是 ST 推出的新一代库，SPL 仍然在一些老旧项目和特定需求中被广泛使用！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;如何区分？&lt;/h3&gt;
&lt;p&gt;看到一个代码，如何区分其用的是哪一个库...&lt;/p&gt;
&lt;h4 id="_9"&gt;通过头文件引用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CMSIS：包含&lt;code&gt;stm32f4xx.h&lt;/code&gt;或类似文件。还可能有&lt;code&gt;core_cm4.h&lt;/code&gt;  、&lt;code&gt;system_stm32f4xx.h&lt;/code&gt;等文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;SPL：包含&lt;code&gt;stm32f4xx_rcc.h&lt;/code&gt;或&lt;code&gt;stm32f4xx_gpio.h&lt;/code&gt;等具体的外设头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;HAL：包含&lt;code&gt;stm32f4xx_hal.h&lt;/code&gt;以及可能的具体外设头文件&lt;code&gt;stm32f4xx_hal_gpio.h&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_10"&gt;函数调用&lt;/h4&gt;
&lt;p&gt;不同的库提供不同的API函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMSIS 直接操作寄存器，比如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;RCC&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RCC_CR_HSEON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;GPIOA&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;MODER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_MODER_MODER5_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;SPL：使用SPL提供的函数，比如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;RCC_HSEConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCC_HSE_ON&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;GPIO_InitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_InitStructure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;GPIO_InitStructure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Pin_5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;GPIO_InitStructure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO_Mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_Mode_OUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;GPIO_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIOA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;GPIO_InitStructure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;HAL：使用HAL提供的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;HAL_Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;RCC_OscInitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RCC_OscInitStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;RCC_OscInitStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OscillatorType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RCC_OSCILLATORTYPE_HSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;HAL_RCC_OscConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RCC_OscInitStruct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_11"&gt;初始化与配置结构体&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CMSIS：通常不使用结构体，直接操作寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;SPI：使用具体外设的初始化结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GPIO_InitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_InitStructure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;HAL：使用HAL定义的结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GPIO_InitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GPIO_InitStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;RCC_OscInitTypeDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RCC_OscInitStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="stm32cubeide"&gt;STM32CubeIDE&lt;/h3&gt;
&lt;p&gt;先空着，后面需要了解这个东西看看&lt;/p&gt;
&lt;p&gt;是否可以同一个项目，同时支持keil mdk 和 cubeIDE ??&lt;/p&gt;
&lt;p&gt;参考目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;MyProject/
├── Docs/                 // 项目文档
│   ├── design.md
│   ├── user_manual.md
├── Inc/                  // 头文件
│   └── main.h
├── Src/                  // 源文件
│   └── main.c
├── Test/                 // 测试代码
│   └── test_main.c
├── Drivers/              // 驱动文件
│   ├── CMSIS/
│   ├── HAL/
│   └── BSP/
├── Build/                // 构建脚本
│   └── Makefile
├── Keil/                 // Keil 相关文件
│   └── MyProject.uvprojx
├── STM32CubeIDE/         // STM32CubeIDE 相关文件
│   └── .project
└── .gitignore            // Git 忽略文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;其中，&lt;code&gt;.gitignore&lt;/code&gt;示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 忽略编译生成的文件&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.o&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.d&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.elf&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.map&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.bin&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.hex&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.out&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略编辑器和IDE产生的临时文件&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.suo&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.user&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.userprefs&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.args&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.sublime&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.workspace&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.vscode&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.idea&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.project&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.cproject&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.settings&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略Keil特有文件&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.uvprojx.bak&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.uvoptx&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.crash&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略STM32CubeIDE特有文件&lt;/span&gt;
&lt;span class="nf"&gt;Debug&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="nf"&gt;Release&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略操作系统生成的文件&lt;/span&gt;
&lt;span class="na"&gt;.DS_Store&lt;/span&gt;
&lt;span class="nf"&gt;Thumbs.db&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略使用 Git 版本控制时常见的日志和数据文件&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.log&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.csv&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.dat&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;.tmp&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略特定的个人或敏感文件&lt;/span&gt;
&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;config.ini&lt;/span&gt;
&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;secret_config.yaml&lt;/span&gt;

&lt;span class="c1"&gt;# 如果有自动生成的文档，也可以选择忽略&lt;/span&gt;
&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;doc_gen&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;

&lt;span class="c1"&gt;# 忽略构建脚本生成的文件夹&lt;/span&gt;
&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="visual-studio-code"&gt;Visual Studio Code&lt;/h2&gt;
&lt;p&gt;Keil 有用于 VSCode的扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Arm.keil-studio-pack"&gt;Arm Keil Studio Pack (MDK v6) - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="ARM"></category></entry><entry><title>VHDL与Verilog学习小记</title><link href="https://blog.debao.me/2024/05/learning-notes-on-vhdl-and-verilog/" rel="alternate"></link><published>2024-05-23T20:01:00+08:00</published><updated>2024-05-23T20:01:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-23:/2024/05/learning-notes-on-vhdl-and-verilog/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-questa-intel-fpga-starter-1/"&gt;Questa Intel FPGA Starter学习小记（一）&lt;/a&gt;，Questa仿真环境应该可以用了，试着了解一下VHDL与Verilog的基本语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先列个表格，看看历史：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;VHDL&lt;/th&gt;
&lt;th&gt;Verilog&lt;/th&gt;
&lt;th&gt;SystemVerilog&lt;/th&gt;
&lt;th&gt;SystemC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1987&lt;/td&gt;
&lt;td&gt;VHDL-87 (IEEE 1076-1987)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;VHDL-93 (IEEE 1076-1993)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1995&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Verilog-95&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2001&lt;/td&gt;
&lt;td&gt;VHDL-2000 (IEEE 1076-2000)&lt;/td&gt;
&lt;td&gt;Verilog-2001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SystemC 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-questa-intel-fpga-starter-1/"&gt;Questa Intel FPGA Starter学习小记（一）&lt;/a&gt;，Questa仿真环境应该可以用了，试着了解一下VHDL与Verilog的基本语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先列个表格，看看历史：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;VHDL&lt;/th&gt;
&lt;th&gt;Verilog&lt;/th&gt;
&lt;th&gt;SystemVerilog&lt;/th&gt;
&lt;th&gt;SystemC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1987&lt;/td&gt;
&lt;td&gt;VHDL-87 (IEEE 1076-1987)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;VHDL-93 (IEEE 1076-1993)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1995&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Verilog-95&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2001&lt;/td&gt;
&lt;td&gt;VHDL-2000 (IEEE 1076-2000)&lt;/td&gt;
&lt;td&gt;Verilog-2001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SystemC 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SystemC 2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;VHDL-2002 (IEEE 1076-2002)&lt;/td&gt;
&lt;td&gt;Verilog-2005 (IEEE 1364-2005)&lt;/td&gt;
&lt;td&gt;IEEE 1800-2005&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2006&lt;/td&gt;
&lt;td&gt;VHDL-2006 (IEEE 1076-2006)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SystemC 2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2009&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IEEE 1800-2009&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;VHDL-2008 (IEEE 1076-2008)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IEEE 1800-2012&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SystemC 2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IEEE 1800-2017&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;VHDL-2019 (IEEE 1076-2019)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Verilog从2005年开始已经融入进SystemVerilog，后面正经学习应该直接看SystemVerilog。但是网络上资源似乎都很老旧，各种写法似乎都停留在Verilog标准化之前Verilog95风格，所以本文仍然Verilog为主。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="vhdlverilog"&gt;VHDL与Verilog差异对比？&lt;/h2&gt;
&lt;p&gt;VHDL（VHSIC Hardware Description Language）和Verilog是两种广泛使用的硬件描述语言（HDL），用于电子设计自动化（EDA）领域，尤其是在集成电路（IC）设计中。&lt;/p&gt;
&lt;h3 id="_1"&gt;语言对比&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;VHDL&lt;/th&gt;
&lt;th&gt;Verilog&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;起源&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;由美国国防部于1980年代初发起&lt;/td&gt;
&lt;td&gt;由Gateway Design Automation于1984年开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;设计哲学&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;更偏向于强类型和严格的语法&lt;/td&gt;
&lt;td&gt;更灵活，语法较为宽松&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;类型系统&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;强类型系统，需要明确指定数据类型&lt;/td&gt;
&lt;td&gt;弱类型系统，类型转换较自由&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;并发机制&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;使用进程（processes）来描述并发&lt;/td&gt;
&lt;td&gt;使用always和initial块来描述并发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可读性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;类似Ada，更加注重可读性和维护性&lt;/td&gt;
&lt;td&gt;语法类似于C语言，较为简洁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;调试和测试&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供强大的断言（assertions）和测试特性&lt;/td&gt;
&lt;td&gt;测试和调试功能较为基础&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;应用领域&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在欧洲及军事/航空航天领域更受欢迎&lt;/td&gt;
&lt;td&gt;在美国及消费电子领域更普遍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;学习曲线&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;相对陡峭，语法复杂&lt;/td&gt;
&lt;td&gt;相对平缓，易于上手&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_2"&gt;一些术语差异&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;VHDL&lt;/th&gt;
&lt;th&gt;Verilog&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Entity&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Module&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;描述硬件的基本单位，用于定义输入输出端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Architecture&lt;/td&gt;
&lt;td&gt;Implementation Block&lt;/td&gt;
&lt;td&gt;描述实体或模块的功能实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Signal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Wire/Reg&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于在设计中连接不同部分的变量。Wire 是连续赋值，Reg 用于存储。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Always&lt;/strong&gt; Block&lt;/td&gt;
&lt;td&gt;描述在特定条件下执行的代码块。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Component&lt;/td&gt;
&lt;td&gt;Module Instance&lt;/td&gt;
&lt;td&gt;用于实例化一个模块或实体，用于设计的结构化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Configuration&lt;/td&gt;
&lt;td&gt;Configuration&lt;/td&gt;
&lt;td&gt;用来绑定特定的实体和架构，或指定模块的特定实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Function/Procedure&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Function/Task&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于封装并重用代码，Function 返回单个值，Task 可以没有返回值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package&lt;/td&gt;
&lt;td&gt;Package/Library&lt;/td&gt;
&lt;td&gt;用于定义和封装一组相关的定义和实现，以便重用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Generic&lt;/td&gt;
&lt;td&gt;Parameter&lt;/td&gt;
&lt;td&gt;用于在实例化模块或实体时设置模块属性的参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Constant&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Parameter/Localparam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;定义在编译时已知且不可变的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variable&lt;/td&gt;
&lt;td&gt;Variable&lt;/td&gt;
&lt;td&gt;用于过程内部存储和操作数据的局部存储元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attribute&lt;/td&gt;
&lt;td&gt;Attribute&lt;/td&gt;
&lt;td&gt;用于为实体或信号添加特定的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concurrent Statement&lt;/td&gt;
&lt;td&gt;Concurrent Assignment&lt;/td&gt;
&lt;td&gt;在架构或模块级别上同时执行的语句。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sequential Statement&lt;/td&gt;
&lt;td&gt;Sequential Block&lt;/td&gt;
&lt;td&gt;在过程内部按顺序执行的语句。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_3"&gt;数据类型差异&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;VHDL 数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Verilog 数据类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;STD_LOGIC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wire&lt;/code&gt;, &lt;code&gt;reg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通用的单比特类型，表示逻辑值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;STD_LOGIC_VECTOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wire [n-1:0]&lt;/code&gt;, &lt;code&gt;reg [n-1:0]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多比特的向量类型，用于表示一组逻辑线。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BIT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wire&lt;/code&gt;, &lt;code&gt;reg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;单个二进制数（0或1）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BIT_VECTOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wire [n-1:0]&lt;/code&gt;, &lt;code&gt;reg [n-1:0]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二进制数字的向量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOLEAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;表示逻辑真或假。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INTEGER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSIGNED&lt;/code&gt;, &lt;code&gt;SIGNED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;用于表示无符号和有符号整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;REAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于表示浮点数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ENUMERATION TYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;允许用户定义一组命名的常量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ARRAY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于定义具有多个元素的数据结构。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RECORD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;允许用户定义可以包含不同数据类型的复合数据结构。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ACCESS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;指针类型，用于动态内存分配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FILE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;用于文件操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TIME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于表示时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_4"&gt;大小写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;strong&gt;不区分&lt;/strong&gt;大小写。在 VHDL 中，标识符（例如变量名、信号名和模块名）的大小写不会影响其含义。例如，Signal, signal, 和 SIGNAL 在 VHDL 中被视为同一个标识符。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Verilog &lt;strong&gt;区分&lt;/strong&gt;大小写的语言。在 Verilog 中，所有的标识符（包括变量名、模块名等）的大小写必须保持一致。例如，counter, Counter, 和 COUNTER 在 Verilog 中会被认为是三个不同的标识符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;示例对比&lt;/h2&gt;
&lt;p&gt;没时间系统学习东西，先用一些简单的例子找找感觉&lt;/p&gt;
&lt;h3 id="_6"&gt;使用注释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- 这是一个单行注释&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;这是一个多行注释，&lt;/span&gt;
&lt;span class="cm"&gt;但请注意，标准VHDL不支持此种注释方式，&lt;/span&gt;
&lt;span class="cm"&gt;使用时需要确保工具链兼容。&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 这是一个单行注释&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;这是一个多行注释&lt;/span&gt;
&lt;span class="cm"&gt;可以跨越多行&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL标准仅官方支持单行注释，使用&lt;code&gt;--&lt;/code&gt;。Verilog支持类似C语言的单行(&lt;code&gt;//&lt;/code&gt;)和多行(&lt;code&gt;/* ... */&lt;/code&gt;)注释，这使得在代码中添加详细注释更灵活。&lt;/p&gt;
&lt;h3 id="_7"&gt;模块定义与端口声明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE.STD_LOGIC_1164.&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC_VECTOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Veriog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在VHDL中，模块被称为“实体”（entity），并且需要明确地包括库的引用。每个端口的方向（输入或输出）和类型都需要显式声明。而在Verilog中，模块定义更为简洁，端口类型和方向直接在模块声明中定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意在 VHDL 中，library 和 use 声明是用来引入外部定义的包和库，这些包和库提供了额外的数据类型、子程序和功能，以便在设计中使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ieee.std_logic_1164&lt;/code&gt; 和 &lt;code&gt;ieee.numeric_std&lt;/code&gt; 是非常常用的包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ieee.std_logic_1164&lt;/code&gt; 非常重要，它定义了 &lt;code&gt;std_logic&lt;/code&gt; 类型，这是 VHDL 中最常用的数据类型之一，用于表示数字逻辑的单个位。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std_logic&lt;/code&gt; 类型是一个枚举类型，包含 'U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-' 等值，分别代表未初始化、强制未知、强制为0、强制为1、高阻态、弱未知、弱0、弱1 和不关心。此包还包括多位版本&lt;code&gt;std_logic_vector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Verilog模块声明中的wire可省略，完整的写法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_8"&gt;信号赋值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rising_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在VHDL中，信号赋值通常发生在过程（process）块内，使用条件语句来检测时钟边沿和重置条件。Verilog使用always块来描述类似的行为，语法更接近于传统的编程语言如C。&lt;/p&gt;
&lt;p&gt;在VHDL中，&lt;strong&gt;上升沿和下降沿&lt;/strong&gt; 分别用 &lt;code&gt;rising_edge&lt;/code&gt;和&lt;code&gt;falling_edge&lt;/code&gt;检测；在Verilog中，&lt;code&gt;posedge&lt;/code&gt;和&lt;code&gt;negedge&lt;/code&gt;两个关键字直接在always块的敏感列表中使用。&lt;/p&gt;
&lt;h3 id="_9"&gt;位宽与向量操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_vector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC_VECTOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;my_vector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;00001111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;my_vector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b00001111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL和Verilog都支持向量操作，但是在VHDL中，向量的位宽和方向需要明确指定（例如7 downto 0表示从高位到低位）。Verilog中的位宽声明更加类似于C语言数组的声明方式。&lt;/p&gt;
&lt;p&gt;对于常量，列个表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;VHDL 示例&lt;/th&gt;
&lt;th&gt;Verilog 示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;123&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;123&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二进制&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b"1010"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4'b1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;八进制&lt;/td&gt;
&lt;td&gt;&lt;code&gt;o"12"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3'o12&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十六进制&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x"1A"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;8'h1A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑向量&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std_logic_vector'(b"1010")&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4'b1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'A'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(不适用)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"Hello"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"Hello"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.23&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.23&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定义带基数的整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;16#1A#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;8'h1A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Verilog 中，数值常量前的数字（如 3'o12 中的 3）表示该常量的位宽。3'o12 表示一个 3 位宽的八进制数 12。12在二进制下是1010，但由于这里指定了只有 3 位宽，所以会截取最低的三位，即 010。这样，3'o12 在二进制下实际上表示的是 010。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_10"&gt;条件判断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL使用=作为等于操作符，而Verilog使用==。此外，Verilog明确要求位宽和基数（如1'b1表示一个位的二进制1），而VHDL则相对更灵活。&lt;/p&gt;
&lt;h3 id="_11"&gt;循环控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;process&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在VHDL中，循环通常用于过程（process）中，loop语句用于迭代。Verilog的循环语法使用for循环。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意while循环也是存在的，但是不适用于综合，只用于仿真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_12"&gt;函数和过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_two_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- 使用&lt;/span&gt;
&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_two_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_two_numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;add_two_numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c1"&gt;// 使用&lt;/span&gt;
&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_two_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL中的函数定义比较形式化，包括详细的参数和返回类型说明。Verilog的函数定义语法上更为紧凑，函数的使用和C语言类似。&lt;/p&gt;
&lt;h3 id="_13"&gt;模块实例化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Adder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Adder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Adder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- 实例化&lt;/span&gt;
&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;u_adder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adder&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;

&lt;span class="c1"&gt;// 实例化&lt;/span&gt;
&lt;span class="k"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Adder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u_adder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在VHDL中，模块实例化需要明确指出实体和架构，通过port map来映射端口。Verilog端口连接通过&lt;code&gt;.&lt;/code&gt;语法直接指定。&lt;/p&gt;
&lt;h3 id="_14"&gt;时序控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rising_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL使用rising_edge函数来明确指示时钟上升沿，而Verilog直接在always块的敏感列表中使用posedge。&lt;/p&gt;
&lt;h3 id="_15"&gt;使用数组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- 其他元素初始化&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 其他元素初始化&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在VHDL中，定义数组类型需要先声明一个类型，然后使用该类型定义信号或变量。Verilog则直接在变量声明时指定数组大小和位宽。&lt;/p&gt;
&lt;h3 id="_16"&gt;描述复杂逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在描述复杂的逻辑运算时，VHDL往往需要更多的结构化代码，如process块和明确的条件语句。Verilog可以使用更简洁的表达式，如使用逻辑运算符（&lt;code&gt;&amp;amp;&lt;/code&gt;代表AND，&lt;code&gt;|&lt;/code&gt;代表OR）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;verilog中，assign语句用于执行连续赋值。如果不用assign，就需要用always块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_17"&gt;参数化模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;GenericAdder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;GenericAdder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;GenericAdder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GenericAdder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#(&lt;/span&gt;&lt;span class="k"&gt;parameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;参数化模块（泛型）在VHDL中通过generic关键字实现，允许在实例化时定制属性。Verilog使用parameter关键字，语法更接近于C语言的模板或宏定义&lt;/p&gt;
&lt;h3 id="_18"&gt;状态机实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rising_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;IDLE:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;WORKING:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;DONE:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;next_state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IDLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;endcase&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;VHDL中使用type来定义状态类型，而Verilog使用enum。两者都使用条件语句来描述状态转移&lt;/p&gt;
&lt;h3 id="_19"&gt;寄存器组的定义和使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg_array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;定义一组寄存器时，VHDL需要定义一个数组类型然后声明一个信号，而Verilog直接在寄存器声明中定义数组大小和位宽。&lt;/p&gt;
&lt;h3 id="_20"&gt;触发器实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VHDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE.STD_LOGIC_1164.&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;CLK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rising_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DFF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;触发器是数字电路中的基本构件。在VHDL和Verilog中都使用了对应的时钟边缘检测机制来描述触发器的行为。Verilog的代码更简洁。&lt;/p&gt;
&lt;h2 id="systemverilog"&gt;SystemVerilog&lt;/h2&gt;
&lt;p&gt;先列个表格，后面慢慢了解&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;Verilog&lt;/th&gt;
&lt;th&gt;SystemVerilog&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;语言范围&lt;/td&gt;
&lt;td&gt;硬件描述语言（HDL）&lt;/td&gt;
&lt;td&gt;硬件描述语言 + 硬件验证语言（HVL）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据类型&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reg&lt;/code&gt;, &lt;code&gt;wire&lt;/code&gt; 等基本类型&lt;/td&gt;
&lt;td&gt;增加&lt;code&gt;logic&lt;/code&gt;, &lt;code&gt;bit&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt; 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口&lt;/td&gt;
&lt;td&gt;使用端口连接模块&lt;/td&gt;
&lt;td&gt;引入 &lt;code&gt;interface&lt;/code&gt;，简化模块连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;抽象层次&lt;/td&gt;
&lt;td&gt;RTL 和行为级建模&lt;/td&gt;
&lt;td&gt;支持更高级的抽象如 TLM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;类和对象&lt;/td&gt;
&lt;td&gt;不支持面向对象编程&lt;/td&gt;
&lt;td&gt;支持类和对象，具备 OOP 特性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;随机化&lt;/td&gt;
&lt;td&gt;无内置随机化功能&lt;/td&gt;
&lt;td&gt;提供随机化和约束机制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;约束和断言&lt;/td&gt;
&lt;td&gt;无直接支持&lt;/td&gt;
&lt;td&gt;引入断言和约束用于验证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;并行处理&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;fork-join&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;增强的并行处理，如 &lt;code&gt;fork-join_any&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模块&lt;/td&gt;
&lt;td&gt;支持模块（module）&lt;/td&gt;
&lt;td&gt;还引入了 &lt;code&gt;program&lt;/code&gt; 块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;覆盖&lt;/td&gt;
&lt;td&gt;无覆盖率收集机制&lt;/td&gt;
&lt;td&gt;支持代码和功能覆盖&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="EE"></category><category term="FPGA"></category></entry><entry><title>Questa Intel FPGA Starter 小记（一）</title><link href="https://blog.debao.me/2024/05/notes-on-questa-intel-fpga-starter-1/" rel="alternate"></link><published>2024-05-22T22:04:00+08:00</published><updated>2024-05-22T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-22:/2024/05/notes-on-questa-intel-fpga-starter-1/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-4/"&gt;Quartus Prime Lite小记四&lt;/a&gt;，已经安装了 Questa Intel FPGA Starter 版本。不妨使用这个版本，简单且认真地了解一下Questa这个仿真软件怎么用...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于Questa来说，基本的仿真流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-4/"&gt;Quartus Prime Lite小记四&lt;/a&gt;，已经安装了 Questa Intel FPGA Starter 版本。不妨使用这个版本，简单且认真地了解一下Questa这个仿真软件怎么用...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于Questa来说，基本的仿真流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建工作库（使用 vlib)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;编译设计文件（对verilog来说，使用 vlog)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;加载与仿真（使用 vsim)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;调试结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，还有一个基于项目的仿真流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建项目&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;添加文件到项目&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;编译设计文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;运行仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;调试结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先了解基本的仿真流程&lt;/p&gt;
&lt;h2 id="_1"&gt;从一个计数器开始？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;试着找一个verilog的入门例子，看看能不能仿真起来...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="questa-result" src="https://blog.debao.me/images/fpga/questa-result-1.png"&gt;&lt;/p&gt;
&lt;p&gt;用verilog编写了一个计数器模块，文件名 counter.v：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&amp;#39;h00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&amp;#39;h01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;或者写成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&amp;#39;h00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;8&amp;#39;h01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;要进行仿真，需要再编写一个testbench文件，比如命名 tb_counter.v&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;`timescale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test_counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Instantiate the counter device under test (DUT)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Generate a clock with a period of 20 ns&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;forever&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Toggle clock every 10 ns&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Generate a reset pulse&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// Initial reset state&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Assert reset after 5 ns&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Deassert reset after 9 ns total&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：第一行的格式
&lt;code&gt;`timescale &amp;lt;time_unit&amp;gt; / &amp;lt;time_precision&amp;gt;&lt;/code&gt;，时间单位用于表明仿真中的1个时间单位对应现实世界中多长时间。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以用questa提供的编译verilog与systemverilog的命令行工具vlog，对上面的代码进行编译：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vlog counter.v tb_counter.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;编译结果在work文件夹内（二进制文件？）&lt;/p&gt;
&lt;p&gt;而后使用questa的命令行工具 vsim 启动 questa：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vsim -voptargs=+acc test_counter work.tb_counter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意，选项&lt;code&gt;-voptargs=+acc&lt;/code&gt;`是为了保障信号可见性。（因为我们这个例子跳过了vopt命令，不然，可以给vopt命令传入&lt;code&gt;+acc&lt;/code&gt;选项，也可以实现类似效果）。&lt;/p&gt;
&lt;p&gt;而后，需要在界面上进行操作，添加wave，并执行run仿真。&lt;/p&gt;
&lt;h3 id="ui1do"&gt;规避UI，操作1（.do)？&lt;/h3&gt;
&lt;p&gt;其实这些UI操作，可以直接合并到前面的命令行中，变成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vsim -voptargs=+acc work.tb_counter -do &amp;quot;add wave -position end /tb_counter/*; run 2000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;每次这样敲命令太长的话，可以把引号中的内容写入到一个myrun.do文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;add wave -position end /tb_counter/*
run 2000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;而后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vsim -voptargs=+acc work.tb_counter -do myrun.do
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意，生成的波形文件是二进制文件，默认命名 vsim.wlf，可以通过命令行参数来修改它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;wlf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;mycounter&lt;/span&gt;.&lt;span class="nv"&gt;wlf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;voptargs&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="nv"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;work&lt;/span&gt;.&lt;span class="nv"&gt;tb&lt;/span&gt;.&lt;span class="nv"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;myrun&lt;/span&gt;.&lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;在Questa中，可以打开这个波形文件进行查看。wlf是 Waveform Logging Format缩写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个myrun.do文件，可以继续进行扩展，比如，像下面这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加波形&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;控制时钟&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;添加复位信号&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;运行仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    vsim tb_counter_opt
    add wave count
    add wave clk
    add wave reset
    force -freeze clk 0 0, 1 {50 ns} -r 100
    force reset 1
    run 100
    force reset 0
    run 300
    force reset 1
    run 400
    force reset 0
    run 200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="ui2tcl"&gt;规避UI，操作2（.tcl)？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;前面用了 .do文件，其内部是在sim下运行的指令。尽管如此，.do文件其实就是tcl脚本，我们可以在其内部直接使用tcl各种语法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了使用do文件，我们可以写成 .tcl 文件，比如 myrun.tcl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;voptargs&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;acc&lt;span class="w"&gt;  &lt;/span&gt;work.tb_counter

&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wave&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;tb_counter&lt;span class="o"&gt;/*&lt;/span&gt;

&lt;span class="c"&gt;#run -all&lt;/span&gt;
&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;通过如下命令执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;myrun&lt;/span&gt;.&lt;span class="nv"&gt;tcl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;vsim 还可以接受一个 `-c` 参数，用它之后，将不会出现UI界面，只能在控制台下仿真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;命令&lt;/h2&gt;
&lt;p&gt;前面用到两个命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vlog：执行verilog或systemverilog的编译&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;vsim：执行仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实也有其他很多命令，比如：&lt;/p&gt;
&lt;h3 id="vlib"&gt;vlib&lt;/h3&gt;
&lt;p&gt;由于Questa仿真，需要先创建一个library库，而我前面的测试结果是vlog命令执行时会自动创建这个库。&lt;strong&gt;网上给的信息与此不太相符，很多信息说vlog不会自动调用vlib，从而...&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vlib work
vlog counter.v tb_counter.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;先使用 vlib 创建一个库（此处创建一个work的文件夹，其内部有一个&lt;code&gt;_info&lt;/code&gt;文本文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;而后vlog会将编译结果放入到这个库中(默认名字 work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个库的名字可以修改的，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vlib my_test_lib
vlog -work my_test_lib counter.v tb_counter.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="vopt"&gt;vopt&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;vopt 代表 "Verification Optimization"，主要目的是提高仿真效率，从而加快仿真速度。虽然优化可能会使某些内部信号在仿真中不可见（因为它们可能被优化掉了），但通常可以通过特定的选项来保留这些信号，以便于调试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vlog之后，我们可以执行vopt命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vopt +acc tb_counter -o tb_counter_opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;而后用 vsim 来对 &lt;code&gt;tb_counter_opt&lt;/code&gt; 进行仿真&lt;/p&gt;
&lt;p&gt;使用vopt时，完整的脚本 myrun2.tcl 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vlog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;.v
&lt;span class="nv"&gt;vopt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;acc&lt;span class="w"&gt; &lt;/span&gt;tb_counter&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;o&lt;span class="w"&gt; &lt;/span&gt;tb_counter_opt
&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tb_counter_opt

&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wave&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;tb_counter&lt;span class="o"&gt;/*&lt;/span&gt;

&lt;span class="c"&gt;#run -all&lt;/span&gt;
&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;使用vsim直接执行编译、优化、仿真、添加波形，运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;myrun2&lt;/span&gt;.&lt;span class="nv"&gt;tcl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_3"&gt;### 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vdel&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;vmap&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;vcover&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;vsimk&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;断言&lt;/h2&gt;
&lt;p&gt;testbench 和 软件开发中的单元测试很像。所以我们不需要界面，直接用断言，也是完全可以的&lt;/p&gt;
&lt;p&gt;更新后的tb_counter2.v文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;`timescale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test_counter2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Instantiate the counter device under test (DUT)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Generate a clock with a period of 20 ns&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;forever&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Toggle clock every 10 ns&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Generate a reset pulse&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// Initial reset state&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Assert reset after 5 ns&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Deassert reset after 9 ns total&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// Wait 1 ns to ensure reset propagation&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Assertion failed: count is not 0 after reset.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Assert that count increments correctly after reset&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;always&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="k"&gt;posedge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Assertion failed: count did not increment correctly.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;完全不用界面的话：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vlib work
vlog counter.v tb_counter2.v
vsim -c -do myrun.tcl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="vhdl"&gt;用VHDL再走一遍？&lt;/h2&gt;
&lt;p&gt;用vhdl重写一下前面的verilog计数器，文件名 counter.vhd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE.STD_LOGIC_1164.&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE.NUMERIC_STD.&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- 使用 NUMERIC_STD 来处理数值运算&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC_VECTOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- 使用 unsigned 类型处理 count_reg 以支持算术运算&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count_reg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;count_reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;others&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;elsif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rising_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;count_reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count_reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- 正确的加法操作&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- 将内部的 unsigned 信号转换回 STD_LOGIC_VECTOR 类型输出&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;std_logic_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count_reg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Behavioral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;这个东西比verilog版本的长太多了...，先跑通再说，有时间再学习VHDL与Verilog的基本语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于verilog和vhdl可以并存，我们可以继续使用前面例子中的 testbench 文件进行测试，只需要修改一下tcl脚本 myrun3.tcl：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;vcom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;counter.vhd
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;vlog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tb_counter.v
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;vopt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;acc&lt;span class="w"&gt; &lt;/span&gt;tb_counter&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;o&lt;span class="w"&gt; &lt;/span&gt;tb_counter_opt
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tb_counter_opt

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wave&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;tb_counter&lt;span class="o"&gt;/*&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;#run -all&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意vhdl的编译器用的&lt;code&gt;vcom&lt;/code&gt;，其他执行起来就和原来一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;vsim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;myrun3&lt;/span&gt;.&lt;span class="nv"&gt;tcl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_5"&gt;结果&lt;/h2&gt;
&lt;p&gt;前面提到仿真结果会存放到一个 .wlf 文件中，在Questa中，可以打开这个波形文件进行查看。wlf是 Waveform Logging Format缩写。&lt;/p&gt;
&lt;p&gt;另外，我们还可以生成list文件，使用如下命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;add list -decimal *
write list counter.lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;可以得到如下文件 counter.lst：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;             ns       /tb_counter/clk            
              delta   /tb_counter/reset          
                          /tb_counter/count      
              0  +0              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
              0  +1              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
             50  +0             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            100  +0              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            100  +1              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            150  +0             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            150  +2             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            200  +0              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            250  +0             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            250  +2             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            300  +0              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            350  +0             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            350  +2             -1&amp;#39;d1 &lt;span class="gs"&gt;* *&lt;/span&gt;** 
            400  +0              1&amp;#39;d0 &lt;span class="gs"&gt;* *&lt;/span&gt;**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content><category term="EE"></category><category term="FPGA"></category><category term="Questa"></category></entry><entry><title>Intel Quartus Prime Lite 小记（四）</title><link href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-4/" rel="alternate"></link><published>2024-05-20T22:04:00+08:00</published><updated>2024-05-20T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-20:/2024/05/notes-on-intel-quartus-prime-4/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-3/"&gt;Quartus Prime Lite小记三&lt;/a&gt;，搞定git和Quartus整合后，了解一下Quartus下面的Questa Intel FPGA 这个仿真软件怎么用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="questa-intel-fpga"&gt;Questa Intel FPGA是什么东西？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ModelSim，Questa，都没有用过；VHDL、Verilog还没开始接触；碰到这一堆堆东西，想简单学学 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-3/"&gt;Quartus Prime Lite小记三&lt;/a&gt;，搞定git和Quartus整合后，了解一下Quartus下面的Questa Intel FPGA 这个仿真软件怎么用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="questa-intel-fpga"&gt;Questa Intel FPGA是什么东西？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ModelSim，Questa，都没有用过；VHDL、Verilog还没开始接触；碰到这一堆堆东西，想简单学学，还真有点不知道怎么入手。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quartus Prime从21版本开始，带了仿真软件 Questa Intel FPGA（在此之前带的是ModelSim Intel FPGA)。&lt;/p&gt;
&lt;p&gt;运行界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="quartus-questa-result" src="https://blog.debao.me/images/fpga/quartus-questa-result.png"&gt;&lt;/p&gt;
&lt;h3 id="quartus-questa"&gt;Quartus 与 Questa&lt;/h3&gt;
&lt;p&gt;和Quartus的 Lite版本一样，Questa Intel也提供一个免费版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel® Quartus® Prime Lite Edition&lt;/li&gt;
&lt;li&gt;Questa*-Intel® FPGA Starter Edition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quartus Lite无需License文件，Questa Starter需要在Intel官方免费申领License。&lt;/p&gt;
&lt;h3 id="modelsim-questa"&gt;ModelSim 与 Questa&lt;/h3&gt;
&lt;p&gt;ModelSim 和 Questa 都是是硬件描述语言（HDL）仿真软件，目前都属于西门子。ModelSim最初是由 &lt;strong&gt;Model&lt;/strong&gt; Technology开发，后来被 Mentor Graphics 收购，而 Mentor Graphics 又被 Siemens 收购。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ModelSim 是一种更基础的仿真工具，适用于教育、小型到中型项目以及个人使用。&lt;/li&gt;
&lt;li&gt;Questa 是一个高级仿真和验证平台，专为大型项目和复杂的系统级验证设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="modelsim-intel-questa-intel"&gt;ModelSim-Intel 与 Questa-Intel&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这两个都是针对Intel FPGA设计优化的仿真软件。在Altera被Intel收购前，他们分别叫ModelSim-Altera与Questa-Altera。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quartus Prime 从版本 21开始，包含Questa-Intel仿真器。在21版本之前，它包含ModelSim仿真器。&lt;/p&gt;
&lt;p&gt;Quartus lites版本安装后，starter版本的&lt;code&gt;questasim.exe&lt;/code&gt;位于&lt;code&gt;D:\intelFPGA_lite\23.1std\questa_fse\win64&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ModelSim-Intel 与 Questa-Intel 的 Starter版本都是免费使用的，在Intel官方可以下载。（安装包和标准版是同一个，安装时有选项可以选择Starter）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ModelSim-Intel 只能下载到 20.1，可能也不会有21了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="questastarterlicense"&gt;Questa的starter版本的License问题&lt;/h2&gt;
&lt;p&gt;尽管是免费申领，但是这个操作挺繁琐...&lt;/p&gt;
&lt;h3 id="license"&gt;申请License文件&lt;/h3&gt;
&lt;p&gt;访问官方，注册账户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://licensing.intel.com/"&gt;https://licensing.intel.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://licensing.intel.com/psg/s/sales-signup-evaluationlicenses"&gt;Sales_signup_evaluationLicenses (intel.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选中如下项，点击继续&lt;code&gt;Questa*-Intel® FPGA Starter Edition (License: SW-QUESTA)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加计算机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入网卡地址NIC-ID（12个16进制数，不适用:或-分隔符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;申请成功就会发送我们的email中。&lt;/p&gt;
&lt;h3 id="license_1"&gt;添加 license 文件&lt;/h3&gt;
&lt;p&gt;在 Quartus 的 Tools菜单中，点击&lt;code&gt;License Setup...&lt;/code&gt;调出设置页面。把license文件路径设置为环境变量&lt;code&gt;LM_LICENSE_FILE&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="questasim"&gt;启动 QuestaSim&lt;/h3&gt;
&lt;p&gt;此时就可以启动questasim了，不过，要注意，由于是starter版本，只能启动一个实例！！！&lt;/p&gt;
&lt;p&gt;可执行程序路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;D:\intelFPGA_lite\23.1std\questa_fse\win64\questasim.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="questa-intel-fpga-starter" src="https://blog.debao.me/images/fpga/questa-intel-fpga-starter.jpg"&gt;&lt;/p&gt;
&lt;h3 id="quartus"&gt;配置 Quartus&lt;/h3&gt;
&lt;p&gt;在Quartus中创建新项目时，可以配置Simulation为Questa Intel FPGA。&lt;/p&gt;
&lt;p&gt;相关配置有几处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Tools-&amp;gt; Options...-&amp;gt;EDA Tool Options&lt;/code&gt; ，设置Questa Intel FPGA 的路径 ，大致 &lt;code&gt;d:/intelfpga_lite/23.1std/questa_fse/win64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assignments-&amp;gt;EDA Tools Settings-&amp;gt;Simulation&lt;/code&gt; 选择 &lt;code&gt;Questa Intel FPDA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools -&amp;gt; Run simulation Tool -&amp;gt; ...&lt;/code&gt; 执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.qsf 文件中出现&lt;code&gt;EDA_SIMULATION_TOOL&lt;/code&gt;相关的assignment&lt;/li&gt;
&lt;li&gt;编译时生成 Questa 所需的文件，在 &lt;code&gt;simulation/questa&lt;/code&gt; 目录下面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="quartus_eda"&gt;quartus_eda&lt;/h4&gt;
&lt;p&gt;命令行工具&lt;code&gt;quartus_eda&lt;/code&gt;用于生成仿真所需的文件（接之前的例子，项目名 mytest3.qpf，源文件mytest2.v），执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_eda --read_settings_files=off --write_settings_files=off mytest3 -c mytest3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在文件夹&lt;code&gt;simulation/questa&lt;/code&gt;下生成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest3.sft&lt;/li&gt;
&lt;li&gt;mytest3.vo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，再此之前，必须先执行综合（如果没执行的话）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_map --read_settings_files=on --write_settings_files=off mytest3 -c mytest3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意： eda使用的选型 &lt;code&gt;--read_settings_files=off&lt;/code&gt;，并不是说这个命令和.qsf文件无关，而是因为map已经将.qsf的内容消化并写入到了db文件夹下面。eda会直接使用db文件夹中的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="quartusquesta"&gt;使用quartus和questa进行仿真&lt;/h2&gt;
&lt;p&gt;使用前面的简单的组合逻辑电路，试着在quartus界面下跑通questa仿真流程&lt;/p&gt;
&lt;h3 id="_1"&gt;准备项目&lt;/h3&gt;
&lt;p&gt;创建一个quartus项目，并添加verilog文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest4.qpf&lt;/li&gt;
&lt;li&gt;mytest4.qsf&lt;/li&gt;
&lt;li&gt;mytest2.v (继续使用之前的代码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mytest2.v的内容如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;mytest4.qsf内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FAMILY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAX 10&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;DEVICE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;M50SAE144C8G
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;TOP_LEVEL_ENTITY&lt;span class="w"&gt; &lt;/span&gt;mytest2
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;mytest2.v

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;ORIGINAL_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;STD.0
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;LAST_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PROJECT_OUTPUT_DIRECTORY&lt;span class="w"&gt; &lt;/span&gt;output_files
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;MIN_CORE_JUNCTION_TEMP&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;MAX_CORE_JUNCTION_TEMP&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;ERROR_CHECK_FREQUENCY_DIVISOR&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_SIMULATION_TOOL&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Questa Intel FPGA (Verilog)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TIME_SCALE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 ps&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_OUTPUT_DATA_FORMAT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VERILOG HDL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_timing
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_symbol
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_signal_integrity
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_boundary_scan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;有意义的主要是前4行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这时候可以编译项目了。&lt;/p&gt;
&lt;h3 id="testbench"&gt;添加 testbench 文件&lt;/h3&gt;
&lt;p&gt;要仿真上面的模块，需要先创建一个testbench文件，比如&lt;code&gt;testbench_mytest2.v&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;`timescale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testbench_mytest2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Inputs&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;reg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Outputs&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 实例化要测试的模块&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mytest2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 初始化输入&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 激励序列&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;而后进行配置，&lt;code&gt;Assignments-&amp;gt;Settings...-&amp;gt;EDA Tool Settings-&amp;gt;Simulation-&amp;gt;NativeLink setting-&amp;gt; Compile test bench&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="quartus-settings-eda-simulation" src="https://blog.debao.me/images/fpga/quartus-settings-eda-simulation.png"&gt;&lt;/p&gt;
&lt;p&gt;在该页面中，添加我们创建的 &lt;code&gt;testbench_mytest2.v&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;一通操作过后，我们的.qsf文件长这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FAMILY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAX 10&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;DEVICE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;M50SAE144C8G
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;TOP_LEVEL_ENTITY&lt;span class="w"&gt; &lt;/span&gt;mytest3
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;ORIGINAL_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;STD.0
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;LAST_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PROJECT_OUTPUT_DIRECTORY&lt;span class="w"&gt; &lt;/span&gt;output_files
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;MIN_CORE_JUNCTION_TEMP&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;MAX_CORE_JUNCTION_TEMP&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;ERROR_CHECK_FREQUENCY_DIVISOR&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2.v
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;mytest2.v

&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x2
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_7&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x1
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;f

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_SIMULATION_TOOL&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Questa Intel FPGA (Verilog)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TIME_SCALE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 ns&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_OUTPUT_DATA_FORMAT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VERILOG HDL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_timing
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_symbol
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_signal_integrity
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_boundary_scan
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_NETLIST_TYPE&lt;span class="w"&gt; &lt;/span&gt;SOURCE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_FITTER_PRESERVATION_LEVEL&lt;span class="w"&gt; &lt;/span&gt;PLACEMENT_AND_ROUTING&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_COLOR&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16764057&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;POWER_PRESET_COOLING_SOLUTION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23 MM HEAT SINK WITH 200 LFPM AIRFLOW&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;POWER_BOARD_THERMAL_MODEL&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NONE (CONSERVATIVE)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FLOW_ENABLE_POWER_ANALYZER&lt;span class="w"&gt; &lt;/span&gt;ON
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;POWER_DEFAULT_INPUT_IO_TOGGLE_RATE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;12.5 %&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TEST_BENCH_ENABLE_STATUS&lt;span class="w"&gt; &lt;/span&gt;TEST_BENCH_MODE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_NATIVELINK_SIMULATION_TEST_BENCH&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TEST_BENCH_NAME&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_simulation
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_DESIGN_INSTANCE_NAME&lt;span class="w"&gt; &lt;/span&gt;NA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TEST_BENCH_MODULE_NAME&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_TEST_BENCH_FILE&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2.v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;testbench_mytest2

&lt;span class="nv"&gt;set_instance_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_HIERARCHY&lt;span class="w"&gt; &lt;/span&gt;root_partition&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;运行仿真&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Tools-&amp;gt;Run simulation Tool-&amp;gt;RTL Simulation&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="quartus-questa-result" src="https://blog.debao.me/images/fpga/quartus-questa-result.png"&gt;&lt;/p&gt;
&lt;p&gt;也可以和真值表对一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="light controller circuit" src="https://blog.debao.me/images/ee/fpga-light-controller.png"&gt;&lt;/p&gt;
&lt;p&gt;至此，简单的流程算是跑通了，但是背后调用的命令，暂时还是一头雾水。&lt;/p&gt;
&lt;h2 id="_3"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fpgacademy.org/tools.html"&gt;FPGAcademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fQD5QQL5UOE"&gt;FPGA 2 - Set up Intel Altera Quartus/Questa (free version) (youtube.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TgH6mVZ0o3A"&gt;Using Testbenches in Quartus with Questa Intel FPGA edition (youtube.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/jiaotaiyang/p/17644337.html"&gt;Quartus 和 Questa 版下载 激活 - 蕉太羊 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="FPGA"></category><category term="Quartus"></category><category term="Questa"></category><category term="Git"></category></entry><entry><title>Intel Quartus Prime Lite 小记（三）</title><link href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-3/" rel="alternate"></link><published>2024-05-19T22:04:00+08:00</published><updated>2024-05-19T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-19:/2024/05/notes-on-intel-quartus-prime-3/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-2/"&gt;Quartus Prime Lite小记二&lt;/a&gt;，断断续续看了好几天Quaruts基本用法了，在学习Verilog或VHDL之前，应该把git和quartus整合搞定...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;回顾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编写verilog文件 mytest2.v&lt;/li&gt;
&lt;li&gt;编写脚本my_setup.tcl&lt;/li&gt;
&lt;li&gt;运行quartus_sh命令，完成项目创建和编译工 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-2/"&gt;Quartus Prime Lite小记二&lt;/a&gt;，断断续续看了好几天Quaruts基本用法了，在学习Verilog或VHDL之前，应该把git和quartus整合搞定...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;回顾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编写verilog文件 mytest2.v&lt;/li&gt;
&lt;li&gt;编写脚本my_setup.tcl&lt;/li&gt;
&lt;li&gt;运行quartus_sh命令，完成项目创建和编译工作，得到 mytest3.sof文件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在小记二中，我们有了一个 verilog文件 mytest2.v，文件内定义了一个mytest2的模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们写了一个tcl脚本my_setup.tcl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;project_new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mytest3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;overwrite

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FAMILY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAX 10&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;DEVICE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;M50SAE144C8G&lt;span class="w"&gt; &lt;/span&gt;
set_global_assignment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;TOP_LEVEL_ENTITY&lt;span class="w"&gt; &lt;/span&gt;mytest2
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PROJECT_OUTPUT_DIRECTORY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output_files&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;mytest2.v

&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x1
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_7&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x2
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;通过执行如下命令创建一个完整工程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh -t my_setup.tcl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;得到文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest3.qpf&lt;/li&gt;
&lt;li&gt;mytest3.qsf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再执行编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh --flow compile mytest3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;即可得到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest3.sof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么..., 如何获取git信息，并体现在编译输出的文件名中...&lt;/p&gt;
&lt;h2 id="git"&gt;Git基础&lt;/h2&gt;
&lt;p&gt;Git作为分布式的源码管理工具，没有可以类比SVN的递增值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交的唯一标识是一个长长的SHA值：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rev-parse  HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;要短一点也可以&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rev-parse --short HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;用这个东西肯定是正确的，但是现实中用它，对用户很不友好...，友好的方式可以选择...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打上tag，使用describe，可以获取类似 "v1.0-3-gabc123" 的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git descrbe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;如果偷懒的话，直接用提交数可以（确保和中央仓库同步），在一些小项目中，这么做比较简单，但是不严谨：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取提交数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rev-list --count HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;或者提交数加上当前提交的日期，获取日期可以通过：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git log -1 --format=%cd --date=format:%Y%m%d%H%M%S
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_2"&gt;编译过程中执行自定义脚本&lt;/h2&gt;
&lt;p&gt;quaruts允许配置如下钩子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PRE_FLOW_SCRIPT_FILE&lt;/code&gt; 指定流程开始前要执行的脚本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST_MODULE_SCRIPT_FILE&lt;/code&gt; 指定编译每个阶段执行完执行的脚本（比如map、fit、asm每个阶段执行完的时候）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST_FLOW_SCRIPT_FILE&lt;/code&gt;指定流程结束后执行的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在.qsf中进行配置，语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;执行时，quartus会转换成如下命令进行执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;executable&amp;gt; -t &amp;lt;script name&amp;gt; &amp;lt;flow or module name&amp;gt; &amp;lt;project name&amp;gt; &amp;lt;revision name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="git_1"&gt;输出git信息&lt;/h3&gt;
&lt;p&gt;编写一个脚本 get_git_info.tcl：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# 获取最新提交的哈希值&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_hash&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-parse&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_count&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;count&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# 将哈希值写入文件&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version_info.txt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$commit_count $commit_hash&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;加入到.qsf文件中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PRE_FLOW_SCRIPT_FILE&lt;span class="w"&gt; &lt;/span&gt;quartus_sh:get_git_info.tcl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在命令行中，或者在quartus中，执行编译操作，即可得到一个包含版本信息的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;version_info.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：该文件不会被 &lt;code&gt;quartus_sh --clean&lt;/code&gt; 清理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了避免脚本在git仓库之外执行，或者git找不到造成崩溃问题，可以调整一下脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# 尝试获取最新提交的哈希值和提交计数&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_hash&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_count&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_hash&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-parse&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_count&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;count&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;err

&lt;span class="c"&gt;# 检查是否成功获取了信息&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$commit_hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$commit_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_hash&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commit_count&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 将哈希值和计数写入文件&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version_info.txt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$commit_count $commit_hash&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;这只是一个demo，理论上，我们应该可以将git信息输出到项目文件，或者被verilog或vhdl包含的文件中。进而编译进固件中，并可以被后续上位机读取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="sof"&gt;修改sof文件名&lt;/h3&gt;
&lt;p&gt;没找到如何直接配置sof和pof的文件名，只要写一个tcl脚本，编译结束后，直接拷贝出来，拷贝成我们想要的文件名。&lt;/p&gt;
&lt;p&gt;脚本 my_post.tcl：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# 定义源文件夹和目标文件夹&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;source_folder&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output_files&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;target_folder&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 确保目标文件夹存在，如果不存在，则创建&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;exists&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$target_folder&lt;/span&gt;&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$target_folder&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 获取Git提交次数&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{[catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;count&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git_commit_count&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error getting git commit count: $git_commit_count&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 获取最后一次提交的日期，格式为YYYYMMDDHHMMSS&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{[catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;format&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;cd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;date&lt;span class="err"&gt;=&lt;/span&gt;format:&lt;span class="o"&gt;%&lt;/span&gt;Y&lt;span class="o"&gt;%&lt;/span&gt;m&lt;span class="o"&gt;%&lt;/span&gt;d&lt;span class="o"&gt;%&lt;/span&gt;H&lt;span class="o"&gt;%&lt;/span&gt;M&lt;span class="o"&gt;%&lt;/span&gt;S&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git_last_commit_date&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error getting last commit date: $git_last_commit_date&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# 移除任何可能的双引号&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git_last_commit_date&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&amp;quot;} $git_last_commit_date]&lt;/span&gt;

&lt;span class="s2"&gt;# 遍历指定类型的文件&lt;/span&gt;
&lt;span class="s2"&gt;foreach filetype {sof pof} {&lt;/span&gt;
&lt;span class="s2"&gt;    set files [glob -nocomplain -directory $source_folder *.$filetype]&lt;/span&gt;
&lt;span class="s2"&gt;    foreach file_path $files {&lt;/span&gt;
&lt;span class="s2"&gt;        # 获取文件名（不含扩展名）&lt;/span&gt;
&lt;span class="s2"&gt;        set filename [file rootname [file tail $file_path]]&lt;/span&gt;
&lt;span class="s2"&gt;        # 获取文件扩展名&lt;/span&gt;
&lt;span class="s2"&gt;        set extension [file extension $file_path]&lt;/span&gt;
&lt;span class="s2"&gt;        # 构造新的文件名&lt;/span&gt;
&lt;span class="s2"&gt;        set new_filename &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;${target_folder}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;${filename}_${git_commit_count}&lt;/span&gt;_&lt;span class="nv"&gt;${git_last_commit_date}${extension}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;        # 尝试复制文件，捕获并报告任何错误&lt;/span&gt;
&lt;span class="s2"&gt;        if {[catch {file copy -force -- $file_path $new_filename} error_message]} {&lt;/span&gt;
&lt;span class="s2"&gt;            puts &amp;quot;&lt;/span&gt;Error&lt;span class="w"&gt; &lt;/span&gt;copying&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$new_filename:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$error_message&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        } else {&lt;/span&gt;
&lt;span class="s2"&gt;            puts &amp;quot;&lt;/span&gt;Successfully&lt;span class="w"&gt; &lt;/span&gt;copied&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$new_filename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;puts &amp;quot;&lt;/span&gt;Operation&lt;span class="w"&gt; &lt;/span&gt;completed&lt;span class="w"&gt; &lt;/span&gt;successfully.&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在 .psf 进行配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POST_FLOW_SCRIPT_FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;quartus_sh:&lt;/span&gt;&lt;span class="n"&gt;my_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tcl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="gitignore"&gt;.gitignore&lt;/h2&gt;
&lt;p&gt;先记录一个 &lt;a href="https://gist.github.com/nhasbun/71918796044b7ba89d6662133495f754"&gt;Git ignore file for quartus II projects · GitHub&lt;/a&gt;作为后续参考，后面需要时再调整&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt; Need to keep all HDL files
&lt;span class="gh"&gt;#&lt;/span&gt; *.vhd
&lt;span class="gh"&gt;#&lt;/span&gt; *.v

&lt;span class="gh"&gt;#&lt;/span&gt; ignore Quartus II generated files
*_generation_script*
&lt;span class="gs"&gt;*_inst.vhd&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.bak
&lt;span class="gs"&gt;*.cmp&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.done
&lt;span class="gs"&gt;*.eqn&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.hex
&lt;span class="gs"&gt;*.html&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.jdi
&lt;span class="gs"&gt;*.jpg&lt;/span&gt;
&lt;span class="gs"&gt;# *&lt;/span&gt;.mif
&lt;span class="gs"&gt;*.pin&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.pof
&lt;span class="gs"&gt;*.ptf.*&lt;/span&gt;
*.qar
&lt;span class="gs"&gt;*.qarlog&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.qws
&lt;span class="gs"&gt;*.rpt&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.smsg
&lt;span class="gs"&gt;*.sof&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.sopc_builder
&lt;span class="gs"&gt;*.summary&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;.tcl
&lt;span class="gs"&gt;*.txt # Explicitly add any text files used&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;~
&lt;span class="gs"&gt;*example*&lt;/span&gt;
*sopc_*
&lt;span class="gh"&gt;#&lt;/span&gt; *.sdc # I want those timing files

&lt;span class="gh"&gt;#&lt;/span&gt; ignore Quartus II generated folders
*/db/
&lt;span class="gs"&gt;*/incremental_db/&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;/simulation/
&lt;span class="gs"&gt;*/timing/&lt;/span&gt;
&lt;span class="gs"&gt;*&lt;/span&gt;/testbench/
*/*_sim/
incremental_db/
db/
_output_files/
PLLJ_PLLSPE_INFO.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="qsf"&gt;禁止更新 .qsf文件&lt;/h2&gt;
&lt;p&gt;quartus执行时会自动 .qsf文件，这对于源码管控很不友好...&lt;/p&gt;
&lt;p&gt;看一下通过GUI界面执行编译时，后台的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_map --read_settings_files=on --write_settings_files=off mytest3 -c mytest3
quartus_fit --read_settings_files=off --write_settings_files=off mytest3 -c mytest3
quartus_asm --read_settings_files=off --write_settings_files=off mytest3 -c mytest3
quartus_pow --read_settings_files=off --write_settings_files=off mytest3 -c mytest3
quartus_sta mytest3 -c mytest3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;估计问题出在&lt;code&gt;quartus_sta&lt;/code&gt;上？&lt;/p&gt;
&lt;p&gt;先记录一下，后面慢慢了解...&lt;/p&gt;
&lt;h2 id="_3"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/docs/programmable/683325/18-1/automating-script-execution.html"&gt;2.9. Automating Script Execution (intel.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.intel.com/t5/Intel-Quartus-Prime-Software/Quartus-version-control-methodology/m-p/1479729"&gt;Solved: Quartus version control methodology - Intel Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.intel.com/t5/Intel-Quartus-Prime-Software/How-to-change-the-default-name-of-sof-file-in-Quartus/td-p/145024"&gt;How to change the default name of *.sof file in Quartus - Intel Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/docs/programmable/683296/24-1/projectwideassignments.html"&gt;Project-Wide Assignments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="FPGA"></category><category term="Quartus"></category><category term="Git"></category></entry><entry><title>Intel Quartus Prime Lite 小记（二）</title><link href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-2/" rel="alternate"></link><published>2024-05-18T22:04:00+08:00</published><updated>2024-05-18T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-18:/2024/05/notes-on-intel-quartus-prime-2/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-1/"&gt;Quartus Prime Lite小记一&lt;/a&gt;，继续野路子补充Quartus基本知识。注：本文内容依然使用 Quartus Prime Lite 23.1进行验证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quartus的界面很多人在用，但是用它的界面入门的话，总觉得还缺点东西...，可能 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-1/"&gt;Quartus Prime Lite小记一&lt;/a&gt;，继续野路子补充Quartus基本知识。注：本文内容依然使用 Quartus Prime Lite 23.1进行验证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quartus的界面很多人在用，但是用它的界面入门的话，总觉得还缺点东西...，可能命令行更适合我。&lt;/p&gt;
&lt;h2 id="_1"&gt;工作流程&lt;/h2&gt;
&lt;p&gt;Quartus可以在命令行下工作，典型的工作流如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="quartus-command-line-design-flow" src="https://blog.debao.me/images/fpga/quartus-command-line-design-flow.png"&gt;&lt;/p&gt;
&lt;p&gt;详见：https://www.intel.com/content/www/us/en/docs/programmable/683432/21-4/compilation-with-quartus-sh-flow.html&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：图中，用于综合的工具叫做&lt;code&gt;quartus_syn&lt;/code&gt;，这个是在Quartus专业版中才有，在我们的Lite版本中，只能使用&lt;code&gt;quartus_map&lt;/code&gt;工具！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;暂时只关心几个工具：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;主要任务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;综合设计，将高级描述转换为逻辑元素&lt;/td&gt;
&lt;td&gt;- 分析和优化设计代码。&lt;br&gt;- 进行逻辑综合，映射到 FPGA 的逻辑资源。&lt;br&gt;- 输出逻辑网表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_fit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行布局与布线，将综合的逻辑元素放置到 FPGA 的物理资源上&lt;/td&gt;
&lt;td&gt;- 进行布局，确定元件位置。&lt;br&gt;- 执行布线，规划连接路径。&lt;br&gt;- 进行时序分析和优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_sta&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;静态时序分析&lt;/td&gt;
&lt;td&gt;用于验证数字电路在没有进行实际操作或在没有输入任何实际数据的情况下满足时序要求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_asm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成最终的 FPGA 设备配置文件&lt;/td&gt;
&lt;td&gt;- 合并布局与布线结果和引脚分配。&lt;br&gt;- 输出 &lt;code&gt;.sof&lt;/code&gt; 文件和 &lt;code&gt;.rbf&lt;/code&gt; 文件。&lt;br&gt;- 确保文件准确反映设计的所有方面。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_eda&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EDA网表写入&lt;/td&gt;
&lt;td&gt;用于与其他电子设计自动化（EDA）工具集成。这包括生成用于仿真和验证的文件，以及为电路板级设计生成其他必需的设计文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_pgm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;FPGA 设备编程&lt;/td&gt;
&lt;td&gt;- 通过 JTAG 或其他接口将配置文件（如 &lt;code&gt;.sof&lt;/code&gt; 文件）下载到 FPGA 或 CPLD 设备。&lt;br&gt;- 支持设备的在线或离线编程。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;quartus_cpf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配置文件格式转换&lt;/td&gt;
&lt;td&gt;- 从 &lt;code&gt;.sof&lt;/code&gt; 格式转换为 &lt;code&gt;.rbf&lt;/code&gt; 或其他格式。&lt;br&gt;- 支持配置文件的压缩和加密等高级特性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_2"&gt;查看帮助&lt;/h3&gt;
&lt;p&gt;如下命令可以调出帮助页面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh -qhelp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="quartus-command-line-help" src="https://blog.debao.me/images/fpga/quartus-command-line-help.png"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;参数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;手册中说，调用命令时，尽可能使用&lt;code&gt;--read_settings_files=off&lt;/code&gt;和&lt;code&gt;--write_settings_files=off&lt;/code&gt;，来优化Quartus读取和更新.qsf文件的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="assignments"&gt;命令行程序执行时，会按照如下顺序读取Assignments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;命令行参数&lt;/li&gt;
&lt;li&gt;.qsf文件内容&lt;/li&gt;
&lt;li&gt;工程的数据库(db目录）&lt;/li&gt;
&lt;li&gt;Intel Quartus软件默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过如下命令控制是否去读.qsf文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--read_settings_files = on&lt;/code&gt; （default）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--read_settings_files = off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_4"&gt;程序执行结束时，参数写入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;.qsf文件&lt;/li&gt;
&lt;li&gt;工程数据库(db)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下命令可以控制是否写入.qsf文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--write_settings_files = on&lt;/code&gt; （default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--write_settings_files = off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;例子&lt;/h2&gt;
&lt;p&gt;不使用界面，看看只用命令行，如何创建一个项目，并完成编译&lt;/p&gt;
&lt;h3 id="_6"&gt;创建工程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh --prepare mytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;会创建出如下两个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest2.qpf&lt;/li&gt;
&lt;li&gt;mytest2.qsf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;qpf文件没什么内容，主要看看.qsf文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAMILY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cyclone V&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEVICE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TOP_LEVEL_ENTITY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest2&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORIGINAL_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;&lt;span class="n"&gt;STD&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT_CREATION_TIME_DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;14:10:27  MAY 17, 2024&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LAST_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;网上有这个&lt;code&gt;--prepare&lt;/code&gt;似乎很少，没找到如何通过命令行指定FAMILY和DEVICE，只能手动修改这个文件了（根据自己的FPGA手动修改）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAMILY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MAX 10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEVICE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="n"&gt;M50SAE144C8G&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_7"&gt;源文件&lt;/h3&gt;
&lt;p&gt;编写一个verilog文件，比如mytest2.v&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：模块名字和需要和qsf文件中的 &lt;code&gt;TOP_LEVEL_ENTITY&lt;/code&gt; 匹配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将该文件加入到.qsf文件内，即加一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VERILOG_FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;如果要绑定引脚，也是需要修改.qsf文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_8"&gt;编译&lt;/h3&gt;
&lt;p&gt;源码和项目文件都有了，可以直接编译了...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_map mytest2
quartus_fit mytest2
quartus_asm mytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;三条命令执行完，即可在当前目录下得到如下文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest2.sof&lt;/li&gt;
&lt;li&gt;mytest2.pof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不想直接敲这么多命令的话，其实下面一条命令也是可以的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh --flow compile mytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;该命令除了执行我们前面的命令外，还执行&lt;code&gt;quartus_sta&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_9"&gt;清理&lt;/h3&gt;
&lt;p&gt;要删除各种临时文件，只需要如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus --clean mytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，这个清理工作是智能的，它只清理mytest2对应的各种产出结果。如果同一个文件夹下还有一个mytest3，mytest3的源码以及各种产出结果，并不会被清理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="tcl"&gt;TCL脚本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;真的像我们这样用命令行的似乎很少。资料找起来有点头大，可能姿势不对...，官方对TCL支持似乎更好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_10"&gt;创建项目&lt;/h3&gt;
&lt;p&gt;先写一个tcl脚本，比如my_setup.tcl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;project_new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mytest3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;overwrite

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FAMILY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAX 10&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;DEVICE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;M50SAE144C8G&lt;span class="w"&gt; &lt;/span&gt;
set_global_assignment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;TOP_LEVEL_ENTITY&lt;span class="w"&gt; &lt;/span&gt;mytest2

&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;mytest2.v

&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x1
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_7&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x2
&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;而后直接执行它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh -t my_setup.tcl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这样就会生成如下文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest3.qpf&lt;/li&gt;
&lt;li&gt;mytest3.qsf&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_11"&gt;编译&lt;/h3&gt;
&lt;p&gt;把我们上个例子中的mytest.v源码拷进来，工程就是全的。直接执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh --flow compile mytest3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;即可完成编译，并生成待烧写文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest3.sof&lt;/li&gt;
&lt;li&gt;mytest3.pof&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_12"&gt;常用文件后缀&lt;/h2&gt;
&lt;p&gt;前面走马观花看了verilog在Quartus开发最简流程，接触了一些后缀文件。需要再看看&lt;/p&gt;
&lt;h3 id="_13"&gt;项目文件&lt;/h3&gt;
&lt;p&gt;前面见到了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.qpf 项目入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.qsf 项目配置文件：包括项目使用的 FPGA 设备类型、引脚配置、项目选项、编译设置、时序约束和其他用户定义的设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手册中还提到（尽管在Prime Lite下没找到如何生成它们）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.qws 工作区文件（和项目构建无关，纯粹和Quartus界面有关？）&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.qdf 默认配置文件（格式和.qsf一样）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_14"&gt;配置文件（烧写文件）&lt;/h3&gt;
&lt;p&gt;前面编译的结果是 .sof文件，这个文件通常调试，正式发布的话，一般需要转成.pof文件或.jic文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sof 文件（SRAM Object File）：这是一个二进制文件，包含 FPGA 的配置数据，通常在开发阶段用于直接通过 JTAG 或其他接口将配置下载到 FPGA 的 SRAM。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.pof 文件（Programmer Object File）：这是一个用于永久编程 FPGA 或 CPLD 的二进制文件，适用于需要将配置数据永久存储在设备中的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.jic文件（JTAG Indirect Configuration File）：这个文件用于定义通过 JTAG 间接配置 FPGA 时所需的数据和参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Quartus Prime菜单&lt;code&gt;File-&amp;gt;Convert Programming Files...&lt;/code&gt; 可以调出这个转换页面。&lt;/p&gt;
&lt;p&gt;另外还有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.rbf 文件（Raw Binary File）：&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.hex 文件（）：一种文本文件...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_15"&gt;设计输入&lt;/h3&gt;
&lt;p&gt;这个表格有点长&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件扩展名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.tdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Intel自己的硬件描述语言（Altera HDL)，用于硬件描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.vhd&lt;/code&gt;, &lt;code&gt;.vhdl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;VHDL源代码文件&lt;/strong&gt;，用于硬件描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.v&lt;/code&gt;, &lt;code&gt;.vlg&lt;/code&gt;, &lt;code&gt;.verilog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Verilog源代码文件&lt;/strong&gt;，用于硬件描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.sv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;SystemVerilog源代码文件&lt;/strong&gt;，用于更复杂的硬件描述和验证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.vqm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含了用于 Quartus 综合器的优化后的 Verilog HDL 代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.edf&lt;/code&gt;, &lt;code&gt;.edif&lt;/code&gt;, &lt;code&gt;.edn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;电子设计互操作格式文件，用于在不同的CAD工具之间传输设计数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.cpp&lt;/code&gt;, &lt;code&gt;.h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++源代码和头文件，可能用于FPGA设计中的软件部分或与FPGA交互的外部程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.mdl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MATLAB Simulink模型文件，用于基于模型的设计和仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.gdf&lt;/code&gt;, &lt;code&gt;.bdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;图形设计文件，用于Quartus Prime的图形用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.qip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Quartus IP 文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.qdb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Quartus Database，存储编译后的设计数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.cmp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiler Mapping File，可能用于定义编译器的映射设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.qxp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Quartus Export Package，用于导出和导入设计的一部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.smf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Simulation Model File，用于仿真模型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.qsys&lt;/code&gt;, &lt;code&gt;.ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于定义和实例化系统级设计和IP核&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="tcl_1"&gt;TCL语言介绍&lt;/h2&gt;
&lt;p&gt;Tcl（Tool Command Language，工具命令语言）是一种灵活的脚本语言，与 Python 和 C++ 相比，它具有不同的语法和设计理念。Tcl 的设计侧重于字符串处理、集成和易于嵌入。&lt;/p&gt;
&lt;h3 id="_16"&gt;基本语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命令和参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tcl 的基本单位是命令，每个命令由一个命令名和一系列参数组成，参数之间由空格分隔。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;commandName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arg1&lt;span class="w"&gt; &lt;/span&gt;arg2&lt;span class="w"&gt; &lt;/span&gt;arg3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Tcl 中，注释以井号 # 开始，直到行末。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# 这是一个注释&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量通过 set 命令定义，不需要声明类型。使用 $ 符号来访问变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符串可以用双引号（处理变量和转义字符）或大括号（原样输出，不进行任何替换）括起来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, $name&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;Hello,&lt;span class="w"&gt; &lt;/span&gt;World
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Hello&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;Hello,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_17"&gt;控制结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Greater than 10&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Equal to 10&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Less than 10&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;循环&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for 循环类似于 C++ 和 Python 中的 for 循环。
foreach 循环用于遍历列表。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;10&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;incr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;apple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;banana&lt;span class="w"&gt; &lt;/span&gt;cherry&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fruit&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$fruit&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_18"&gt;列表和字典&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;myList&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;apple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;banana&lt;span class="w"&gt; &lt;/span&gt;cherry&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$myList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;banana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;字典&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;myDict&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;key1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;value1&lt;span class="w"&gt; &lt;/span&gt;key2&lt;span class="w"&gt; &lt;/span&gt;value2&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$myDict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key1&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;value1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_19"&gt;函数（过程）&lt;/h3&gt;
&lt;p&gt;在 Tcl 中，函数被称为“过程”（procedure），使用 proc 关键字定义。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;proc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sum&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;b&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;输出&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_20"&gt;文件读写&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename.txt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_21"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/programmable/quartushelp/21.3/index.htm#reference/glossary/def_file_types.htm"&gt;Intel® Quartus® Prime Pro Edition Help version 21.3 - file types Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.intel.cn/content/www/cn/zh/support/programmable/support-resources/design-guidance/quartus-support.html"&gt;英特尔® Quartus® Prime 设计软件支持中心资源 |英特尔 (intel.cn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://community.intel.com/t5/Intel-Quartus-Prime-Software/Quartus-version-control-methodology/m-p/1479729&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/programmable/quartushelp/23.1/index.htm#tafs/tafs/tcl_pkg_project_ver_7.0.htm"&gt;Intel® Quartus® Prime Pro Edition Help version 23.1 - ::quartus::project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/fpga-partial-reconfig"&gt;GitHub - intel/fpga-partial-reconfig: Tutorials, scripts and reference designs for the Intel FPGA partial reconfiguration (PR) design flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="FPGA"></category><category term="Quartus"></category></entry><entry><title>Intel Quartus Prime Lite 小记（一）</title><link href="https://blog.debao.me/2024/05/notes-on-intel-quartus-prime-1/" rel="alternate"></link><published>2024-05-12T20:36:00+08:00</published><updated>2024-05-12T20:36:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-12:/2024/05/notes-on-intel-quartus-prime-1/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-fpga/"&gt;FGPA小记&lt;/a&gt;，试着学习一下FGPA基础知识。Intel提供了免费的Quartus Prime Lite版本，不妨从它开始。Quartus Prime 是 Quartus II的后续产品，首次发布于2015年，紧随Intel收购Altera之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;从哪儿开始&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文内容使用 Quartus Prime Lite 23.1 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-fpga/"&gt;FGPA小记&lt;/a&gt;，试着学习一下FGPA基础知识。Intel提供了免费的Quartus Prime Lite版本，不妨从它开始。Quartus Prime 是 Quartus II的后续产品，首次发布于2015年，紧随Intel收购Altera之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;从哪儿开始&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文内容使用 Quartus Prime Lite 23.1 进行测试，从Quaruts的GUI操作开始，看看其后台是如何工作的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="light controller circuit" src="https://blog.debao.me/images/ee/fpga-light-controller.png"&gt;&lt;/p&gt;
&lt;p&gt;不妨，先从一个最简单的Verilog程序开始&lt;/p&gt;
&lt;h3 id="_2"&gt;一步一步操作看看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建工程：.qpf/.qsf&lt;/li&gt;
&lt;li&gt;添加源码文件：.v&lt;/li&gt;
&lt;li&gt;编译：生成 .sof&lt;/li&gt;
&lt;li&gt;引脚分配：修改.qsf&lt;/li&gt;
&lt;li&gt;再次编译&lt;/li&gt;
&lt;li&gt;编程和配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;通过向导创建一个空工程&lt;/h4&gt;
&lt;p&gt;会生成2个文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mytest1.qpf&lt;/li&gt;
&lt;li&gt;mytest1.qsf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个都是文本文件。&lt;/p&gt;
&lt;p&gt;前者工程文件，只有三行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;QUARTUS_VERSION = &amp;quot;23.1&amp;quot;
DATE = &amp;quot;20:59:03  May 11, 2024&amp;quot;

&lt;span class="gh"&gt;#&lt;/span&gt; Revisions
PROJECT_REVISION = &amp;quot;mytest1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;后者是设置文件。包含使用的FPGA芯片，顶层入口名&lt;code&gt;TOP_LEVEL_ENTITY&lt;/code&gt;，以及要支持的第三方EDA软件等：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAMILY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cyclone IV GX&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEVICE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TOP_LEVEL_ENTITY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORIGINAL_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;&lt;span class="n"&gt;STD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT_CREATION_TIME_DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;20:59:03  MAY 11, 2024&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LAST_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_files&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_timing&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_symbol&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_signal_integrity&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_boundary_scan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_4"&gt;添加设计输入文件&lt;/h4&gt;
&lt;p&gt;添加一个verilog文件，mytest1.v，内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意，网上很多资料中，模块定义都是采用如下（标准化之前的 Verilog-95 风格）的写法，信号类型&lt;code&gt;wire&lt;/code&gt;可以省略：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：这个模块名要和qsf配置文件中&lt;code&gt;TOP_LEVEL_ENTITY&lt;/code&gt;设置的一样！（类似于C中的入口函数）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加入工程之后，qsf文件中多了如下一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VERILOG_FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_5"&gt;执行编译&lt;/h4&gt;
&lt;p&gt;直接点击菜单中的开始编译。后台会执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_map&lt;span class="w"&gt; &lt;/span&gt;--read_settings_files&lt;span class="o"&gt;=&lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;--write_settings_files&lt;span class="o"&gt;=&lt;/span&gt;off&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;mytest1
quartus_fit&lt;span class="w"&gt; &lt;/span&gt;--read_settings_files&lt;span class="o"&gt;=&lt;/span&gt;off&lt;span class="w"&gt; &lt;/span&gt;--write_settings_files&lt;span class="o"&gt;=&lt;/span&gt;off&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;mytest1
quartus_asm&lt;span class="w"&gt; &lt;/span&gt;--read_settings_files&lt;span class="o"&gt;=&lt;/span&gt;off&lt;span class="w"&gt; &lt;/span&gt;--write_settings_files&lt;span class="o"&gt;=&lt;/span&gt;off&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;mytest1
quartus_sta&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;mytest1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;命令介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map：映射(mapping)，将源代码（Verilog或VHDL）转换成某种内部表示。&lt;/li&gt;
&lt;li&gt;fit：适配(fitting)，根据目标FPGA设备的资源和约束来优化和防止设置逻辑&lt;/li&gt;
&lt;li&gt;asm：汇编，将适配阶段生成的数据转换成可用于FPGA的二进制文件&lt;/li&gt;
&lt;li&gt;sta：静态时序仿真（static timng analysis）,检查时钟速度、延迟等是否满足设计要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选项介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--read_settings_files=on&lt;/code&gt;读取qsf配置文件，比如用到里面的&lt;code&gt;TOP_LEVEL_ENTITY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--write_settings_files=off&lt;/code&gt;不写入qsf配置文件，避免配置文件被修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxxxx&lt;/code&gt;：项目名称或顶层文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c xxxxx&lt;/code&gt;：指定配置文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生 &lt;code&gt;db&lt;/code&gt;、&lt;code&gt;incremental_db&lt;/code&gt;、&lt;code&gt;output_files&lt;/code&gt; 三个目录&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;output_files&lt;/code&gt;中生成：mytst1.&lt;strong&gt;sof&lt;/strong&gt; 文件！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pin-assignment"&gt;引脚分配（Pin Assignment)&lt;/h4&gt;
&lt;p&gt;在上面的编译过程中，我们没有分配引脚，Quartus会自动选择了引脚。引脚指定通过菜单&lt;code&gt;Assignments-&amp;gt;Assignment Editor&lt;/code&gt;或&lt;code&gt;Assignments-&amp;gt;Pin Planner&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;指定结果存在qsf配置文件中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAMILY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cyclone IV GX&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEVICE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EP4CGX15BF14A7&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TOP_LEVEL_ENTITY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORIGINAL_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;&lt;span class="n"&gt;STD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT_CREATION_TIME_DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;08:59:03  MAY 11, 2024&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LAST_QUARTUS_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_files&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_timing&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_symbol&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_signal_integrity&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eda_board_design_boundary_scan&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VERILOG_FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mytest1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION_NETLIST_TYPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOURCE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION_FITTER_PRESERVATION_LEVEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PLACEMENT_AND_ROUTING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;
&lt;span class="n"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION_COLOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16764057&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;
&lt;span class="n"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PIN_A8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PIN_A6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;
&lt;span class="n"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PIN_A7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;
&lt;span class="n"&gt;set_instance_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PARTITION_HIERARCHY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root_partition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;section_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;注意看其中&lt;code&gt;set_location_assignment&lt;/code&gt;那几行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了指定引脚，我们DEVICE也不能选择AUTO，注意对比&lt;code&gt;set_global_assignment -name DEVI&lt;/code&gt;那一行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="_6"&gt;综合后结果查看&lt;/h4&gt;
&lt;p&gt;通过&lt;code&gt;Tools-&amp;gt;NetList Viewers-&amp;gt;RTL Viewer&lt;/code&gt;，可以查看综合后结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="quartus-tools-rtlviewer" src="https://blog.debao.me/images/fpga/quartus-tools-rtlviewer.png"&gt;&lt;/p&gt;
&lt;h4 id="programming-and-configuring"&gt;编程和配置（Programming and Configuring）&lt;/h4&gt;
&lt;p&gt;编译后的结果可以通过&lt;code&gt;USB-Blaster&lt;/code&gt;烧写器配置到FPGA中。使用Quartus中的Programming工具。&lt;/p&gt;
&lt;h3 id="tcl"&gt;为工程生成Tcl文件&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;Project-&amp;gt;Generate Tcl file for Project...&lt;/code&gt; 可以生成如下一个tcl文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Load Quartus Prime Tcl Project package&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;require&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;quartus::project

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;need_to_close_project&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make_assignments&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# Check that the right project is open&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{[&lt;/span&gt;&lt;span class="nv"&gt;is_project_open&lt;/span&gt;&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{[&lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;compare&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$quartus&lt;/span&gt;&lt;span class="k"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;project&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mytest1&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Project mytest1 is not open&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make_assignments&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;# Only open if not already open&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{[&lt;/span&gt;&lt;span class="nv"&gt;project_exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="k"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;project_open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;revision&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;mytest1
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;project_new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;revision&lt;span class="w"&gt; &lt;/span&gt;mytest1&lt;span class="w"&gt; &lt;/span&gt;mytest1
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;need_to_close_project&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Make assignments&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$make_assignments&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;FAMILY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cyclone IV GX&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;DEVICE&lt;span class="w"&gt; &lt;/span&gt;EP4CGX15BF14A7
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;ORIGINAL_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23.1&lt;/span&gt;STD.0
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PROJECT_CREATION_TIME_DATE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;20:59:03  MAY 11, 2024&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;LAST_QUARTUS_VERSION&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;23.1std.0 Lite Edition&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PROJECT_OUTPUT_DIRECTORY&lt;span class="w"&gt; &lt;/span&gt;output_files
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_timing
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_symbol
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_signal_integrity
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;EDA_GENERATE_FUNCTIONAL_NETLIST&lt;span class="w"&gt; &lt;/span&gt;OFF&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;eda_board_design_boundary_scan
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;VERILOG_FILE&lt;span class="w"&gt; &lt;/span&gt;mytest1.v
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_NETLIST_TYPE&lt;span class="w"&gt; &lt;/span&gt;SOURCE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_FITTER_PRESERVATION_LEVEL&lt;span class="w"&gt; &lt;/span&gt;PLACEMENT_AND_ROUTING&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_global_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_COLOR&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16764057&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_A8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;f
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_A6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x1
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_location_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PIN_A7&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;x2
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;set_instance_assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;PARTITION_HIERARCHY&lt;span class="w"&gt; &lt;/span&gt;root_partition&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;section_id&lt;span class="w"&gt; &lt;/span&gt;Top

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;# Commit assignments&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;export_assignments&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;# Close project&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$need_to_close_project&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;project_close&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;除了可以再Quartus Prime 界面中执行这个脚本。还可以直接在命令行下面执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;quartus_sh.exe -t mytest1.tcl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;其实，我们只需要保留这个.tcl文件和.v文件就够了。项目文件可以由这个脚本自动生成。&lt;/p&gt;
&lt;h3 id="qar"&gt;归档文件 .qar&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;.qar 文件是为了在 Quartus Prime 内部使用而设计的，&lt;strong&gt;不同于通用压缩格式&lt;/strong&gt; 如 zip 或 rar，因此需要通过 Quartus Prime 软件来创建和解压。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它弹出的对话框，对我们理解文件类别会有帮助&lt;/p&gt;
&lt;h4 id="qar_1"&gt;创建 .qar 文件：&lt;/h4&gt;
&lt;p&gt;在 Quartus Prime 中，可以通过项目菜单选择“Archive Project”（归档项目）来创建 .qar 文件。这将打开一个对话框，允许用户选择要包括在归档中的特定文件和设置。&lt;/p&gt;
&lt;h4 id="qar_2"&gt;还原 .qar 文件：&lt;/h4&gt;
&lt;p&gt;要还原 .qar 文件，只需在 Quartus Prime 中选择“File”（文件）菜单下的“Open Project”（打开项目），然后选择 .qar 文件。Quartus 将解压缩归档并还原项目的所有内容。&lt;/p&gt;
&lt;h3 id="_7"&gt;配置文件（烧写文件）&lt;/h3&gt;
&lt;p&gt;前面编译的结果是 .sof文件，这个文件通常调试，正式发布的话，一般需要转成.pof文件或.jic文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sof 文件（SRAM Object File）：这是一个二进制文件，包含 FPGA 的配置数据，通常在开发阶段用于直接通过 JTAG 或其他接口将配置下载到 FPGA 的 SRAM。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.pof 文件（Programmer Object File）：这是一个用于永久编程 FPGA 或 CPLD 的二进制文件，适用于需要将配置数据永久存储在设备中的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.jic文件（JTAG Indirect Configuration File）：这个文件用于定义通过 JTAG 间接配置 FPGA 时所需的数据和参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Quartus Prime菜单&lt;code&gt;File-&amp;gt;Convert Programming Files...&lt;/code&gt; 可以调出这个转换页面。&lt;/p&gt;
&lt;h2 id="_8"&gt;一些表格&lt;/h2&gt;
&lt;h3 id="_9"&gt;文件后缀&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;File -&amp;gt; Open&lt;/code&gt;菜单，可以看到它支持如下众多的文件类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别名称&lt;/th&gt;
&lt;th&gt;文件后缀&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Design Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;.tdf &lt;em&gt;.vhd &lt;/em&gt;.vhdl &lt;em&gt;.v &lt;/em&gt;.vlg &lt;em&gt;.verilog &lt;/em&gt;.sv &lt;em&gt;.vqm &lt;/em&gt;.edf &lt;em&gt;.edif &lt;/em&gt;.edn &lt;em&gt;.cpp &lt;/em&gt;.mdl &lt;em&gt;.h &lt;/em&gt;.gdf &lt;em&gt;.bdf &lt;/em&gt;.qip &lt;em&gt;.qdb &lt;/em&gt;.cmp &lt;em&gt;.qxp &lt;/em&gt;.smf &lt;em&gt;.qsys &lt;/em&gt;.ip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Project Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;*.qpf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quartus Prime Archive Files&lt;/td&gt;
&lt;td&gt;*.gar&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quartus Prime Design Template Files&lt;/td&gt;
&lt;td&gt;*.par&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Other Source Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.inc &lt;/em&gt;.v &lt;em&gt;.vlg &lt;/em&gt;.vh &lt;em&gt;.verilog &lt;/em&gt;.pkg &lt;em&gt;.bsf &lt;/em&gt;.sym &lt;em&gt;.stp &lt;/em&gt;.lai &lt;em&gt;.mif &lt;/em&gt;.hex &lt;em&gt;.lmf &lt;/em&gt;.dpf *.ipx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graphic Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.gdf &lt;/em&gt;.bdf &lt;em&gt;.bsf &lt;/em&gt;.sym&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signal Tap Logic Analyzer Files&lt;/td&gt;
&lt;td&gt;*.stp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IP Variation Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.gip &lt;/em&gt;.qsys &lt;em&gt;.sip &lt;/em&gt;.ip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logic Analyzer Interface Files&lt;/td&gt;
&lt;td&gt;*.lai&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In-System Sources and Probes Files&lt;/td&gt;
&lt;td&gt;*.spf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;State Machine Editor Files&lt;/td&gt;
&lt;td&gt;*.smf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test Bench Output Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.wht &lt;/em&gt;.vt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.mif &lt;/em&gt;.hex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Programming Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.cdf &lt;/em&gt;.sof &lt;em&gt;.pof &lt;/em&gt;.jam &lt;em&gt;.jbc &lt;/em&gt;.jic &lt;em&gt;.jcf &lt;/em&gt;.fcf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Script Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.tcl &lt;/em&gt;.sdc &lt;em&gt;.pdc &lt;/em&gt;.gip *.sip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTML/Text-format Report Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.rpt &lt;/em&gt;.csfrpt &lt;em&gt;.sim.rpt &lt;/em&gt;.pao &lt;em&gt;.summary &lt;/em&gt;.htm &lt;em&gt;.html &lt;/em&gt;.csfhtm &lt;em&gt;.csfhtml &lt;/em&gt;.sim.htm *.sim.html&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output Files&lt;/td&gt;
&lt;td&gt;&lt;em&gt;.qmsg &lt;/em&gt;.vo &lt;em&gt;.who &lt;/em&gt;.tdo &lt;em&gt;.sdo &lt;/em&gt;.tao *.pin&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;手册中的表格对后缀解释更详细：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件类型&lt;/th&gt;
&lt;th&gt;扩展名&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AHDL Include File&lt;/td&gt;
&lt;td&gt;.inc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATOM Netlist File&lt;/td&gt;
&lt;td&gt;.atm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Block Design File&lt;/td&gt;
&lt;td&gt;.bdf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Block Symbol File&lt;/td&gt;
&lt;td&gt;.bsf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BSDL file&lt;/td&gt;
&lt;td&gt;.bsd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chain Description File&lt;/td&gt;
&lt;td&gt;.cdf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Comma-Separated Value File&lt;/td&gt;
&lt;td&gt;.csv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Component Declaration File&lt;/td&gt;
&lt;td&gt;.cmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Component Description File&lt;/td&gt;
&lt;td&gt;_hw.tcl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compressed Vector Waveform File&lt;/td&gt;
&lt;td&gt;.cvwf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conversion Setup File&lt;/td&gt;
&lt;td&gt;.cof&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cross-Reference File&lt;/td&gt;
&lt;td&gt;.xrf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;database files&lt;/td&gt;
&lt;td&gt;.cdb, .hdb, .rdb, .tdb&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design Protocol File&lt;/td&gt;
&lt;td&gt;.dpf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graphic Design File&lt;/td&gt;
&lt;td&gt;.gdf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hexadecimal (Intel-Format) File&lt;/td&gt;
&lt;td&gt;.hex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hexadecimal (Intel-Format) Output File&lt;/td&gt;
&lt;td&gt;.hexout&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSPICE Simulation Deck File&lt;/td&gt;
&lt;td&gt;.sp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTML-Format Report File&lt;/td&gt;
&lt;td&gt;.htm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I/O Pin State File&lt;/td&gt;
&lt;td&gt;.ips&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBIS Output File&lt;/td&gt;
&lt;td&gt;.ibs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In System Configuration File&lt;/td&gt;
&lt;td&gt;.isc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IP Index File&lt;/td&gt;
&lt;td&gt;.ipx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jam Byte Code File&lt;/td&gt;
&lt;td&gt;.jbc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jam File&lt;/td&gt;
&lt;td&gt;.jam&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JTAG Debugging Information File&lt;/td&gt;
&lt;td&gt;.jdi&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JTAG Indirect Configuration File&lt;/td&gt;
&lt;td&gt;.jic&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Library Mapping File&lt;/td&gt;
&lt;td&gt;.lmf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;License File&lt;/td&gt;
&lt;td&gt;license.dat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logic Analyzer Interface File&lt;/td&gt;
&lt;td&gt;.lai&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory Initialization File&lt;/td&gt;
&lt;td&gt;.mif&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory Map File&lt;/td&gt;
&lt;td&gt;.map&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PartMiner edaXML-Format File&lt;/td&gt;
&lt;td&gt;.xml&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pin-Out File&lt;/td&gt;
&lt;td&gt;.pin&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pin Planner File&lt;/td&gt;
&lt;td&gt;.ppf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Programmer Object File&lt;/td&gt;
&lt;td&gt;.pof&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Programming files&lt;/td&gt;
&lt;td&gt;.cdf, .cof&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QMSG File&lt;/td&gt;
&lt;td&gt;.qmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime IP File&lt;/td&gt;
&lt;td&gt;.qip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Archive File&lt;/td&gt;
&lt;td&gt;.qar&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Archive Log File&lt;/td&gt;
&lt;td&gt;.qarlog&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quartus User-Defined Device File&lt;/td&gt;
&lt;td&gt;.qud&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Default Settings File&lt;/td&gt;
&lt;td&gt;.qdf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Exported Partition File&lt;/td&gt;
&lt;td&gt;.qxp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Message Flag Rule File&lt;/td&gt;
&lt;td&gt;.frf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Message Suppression Rule File&lt;/td&gt;
&lt;td&gt;.srf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Project File&lt;/td&gt;
&lt;td&gt;.qpf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Settings File&lt;/td&gt;
&lt;td&gt;.qsf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel® Quartus® Prime Workspace File&lt;/td&gt;
&lt;td&gt;.qws&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raw Binary File&lt;/td&gt;
&lt;td&gt;.rbf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raw Programming Data File&lt;/td&gt;
&lt;td&gt;.rpd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Routing Constraints File&lt;/td&gt;
&lt;td&gt;.rcf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signal Activity File&lt;/td&gt;
&lt;td&gt;.saf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signal Tap File&lt;/td&gt;
&lt;td&gt;.stp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sources and Probes File&lt;/td&gt;
&lt;td&gt;.spf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRAM Object File&lt;/td&gt;
&lt;td&gt;.sof&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;State Machine File&lt;/td&gt;
&lt;td&gt;.smf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol File&lt;/td&gt;
&lt;td&gt;.sym&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Synopsys® Design Constraints File&lt;/td&gt;
&lt;td&gt;.sdc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab-Separated Value File&lt;/td&gt;
&lt;td&gt;.txt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tabular Text File&lt;/td&gt;
&lt;td&gt;.ttf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tcl Script File&lt;/td&gt;
&lt;td&gt;.tcl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text Design File&lt;/td&gt;
&lt;td&gt;.tdf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text-Format Report File&lt;/td&gt;
&lt;td&gt;.rpt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Token File&lt;/td&gt;
&lt;td&gt;ted.tok&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vector Table Output File&lt;/td&gt;
&lt;td&gt;.tbl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vector source files&lt;/td&gt;
&lt;td&gt;.tbl, .vwf, .vec&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vector Waveform File&lt;/td&gt;
&lt;td&gt;.vwf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verilog Design File&lt;/td&gt;
&lt;td&gt;.v, .vh, .verilog, .vlg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verilog Output File&lt;/td&gt;
&lt;td&gt;.vo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verilog Quartus Mapping File&lt;/td&gt;
&lt;td&gt;.vqm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verilog Test Bench File&lt;/td&gt;
&lt;td&gt;.vt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value Change Dump File&lt;/td&gt;
&lt;td&gt;.vcd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version-compatible database files&lt;/td&gt;
&lt;td&gt;.atm, .hdbx, .rcf, .xml&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VHDL Design File&lt;/td&gt;
&lt;td&gt;.vhd, .vhdl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VHDL Output File&lt;/td&gt;
&lt;td&gt;.vho&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VHDL Test Bench File&lt;/td&gt;
&lt;td&gt;.vht&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XML files&lt;/td&gt;
&lt;td&gt;.cof, .stp, .xml&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Waveform files&lt;/td&gt;
&lt;td&gt;.scf, .stp, .tbl, .vec, .vwf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Waveform Settings File&lt;/td&gt;
&lt;td&gt;.wsf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_10"&gt;补遗：名字变化&lt;/h3&gt;
&lt;p&gt;在Intel收购Altera之后，一些工具和组件的名称发生了变化：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Altera 名称&lt;/th&gt;
&lt;th&gt;Intel® 名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Qsys&lt;/td&gt;
&lt;td&gt;Platform Designer&lt;/td&gt;
&lt;td&gt;用于设计和配置FPGA内的IP组件和连接的系统集成工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TimeQuest&lt;/td&gt;
&lt;td&gt;Timing Analyzer&lt;/td&gt;
&lt;td&gt;进行时序验证和分析，确保设计满足时序要求的工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EyeQ&lt;/td&gt;
&lt;td&gt;Eye Viewer&lt;/td&gt;
&lt;td&gt;用于分析高速串行通道眼图的模拟工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JNEye&lt;/td&gt;
&lt;td&gt;Advanced Link Analyzer&lt;/td&gt;
&lt;td&gt;高级链路分析工具，适用于复杂的高速数据传输系统设计分析。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_11"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/programmable/quartushelp/21.3/index.htm#reference/glossary/def_file_types.htm"&gt;Intel® Quartus® Prime Pro Edition Help version 21.3 - file types Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.intel.cn/content/www/cn/zh/support/programmable/support-resources/design-guidance/quartus-support.html"&gt;英特尔® Quartus® Prime 设计软件支持中心资源 |英特尔 (intel.cn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://community.intel.com/t5/Intel-Quartus-Prime-Software/Quartus-version-control-methodology/m-p/1479729&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.intel.com/content/www/us/en/programmable/quartushelp/23.1/index.htm#tafs/tafs/tcl_pkg_project_ver_7.0.htm"&gt;Intel® Quartus® Prime Pro Edition Help version 23.1 - ::quartus::project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel/fpga-partial-reconfig"&gt;GitHub - intel/fpga-partial-reconfig: Tutorials, scripts and reference designs for the Intel FPGA partial reconfiguration (PR) design flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="FPGA"></category><category term="Quartus"></category></entry><entry><title>电气连接器小记</title><link href="https://blog.debao.me/2024/05/notes-on-electrical-connectors/" rel="alternate"></link><published>2024-05-02T23:25:00+08:00</published><updated>2024-05-02T23:25:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-05-02:/2024/05/notes-on-electrical-connectors/</id><summary type="html">&lt;h2 id="_1"&gt;射频连接器&lt;/h2&gt;
&lt;p&gt;用于同轴线。种类很多，一些常见的连接器：&lt;/p&gt;
&lt;p&gt;&lt;img alt="various circular RF connectors." src="https://blog.debao.me/images/ee/RF_Connectors_Assortment.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href="https://en.wikipedia.org/wiki/RF_connector"&gt;RF connector - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;连接器类型&lt;/th&gt;
&lt;th&gt;连接方式&lt;/th&gt;
&lt;th&gt;频率上限&lt;/th&gt;
&lt;th&gt;主要应用&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BNC&lt;/td&gt;
&lt;td&gt;卡 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h2 id="_1"&gt;射频连接器&lt;/h2&gt;
&lt;p&gt;用于同轴线。种类很多，一些常见的连接器：&lt;/p&gt;
&lt;p&gt;&lt;img alt="various circular RF connectors." src="https://blog.debao.me/images/ee/RF_Connectors_Assortment.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href="https://en.wikipedia.org/wiki/RF_connector"&gt;RF connector - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;连接器类型&lt;/th&gt;
&lt;th&gt;连接方式&lt;/th&gt;
&lt;th&gt;频率上限&lt;/th&gt;
&lt;th&gt;主要应用&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BNC&lt;/td&gt;
&lt;td&gt;卡口式 (Bayonet)&lt;/td&gt;
&lt;td&gt;最高 4 GHz&lt;/td&gt;
&lt;td&gt;视频、测试设备、无线电、通信&lt;/td&gt;
&lt;td&gt;快速连接和断开，适用于中等频率应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMA&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高 18 GHz&lt;/td&gt;
&lt;td&gt;微波设备、无线通信、卫星系统&lt;/td&gt;
&lt;td&gt;高耐用性，适用于高频应用，小型化设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMB&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;最高 4 GHz&lt;/td&gt;
&lt;td&gt;低功率无线和移动设备、GPS&lt;/td&gt;
&lt;td&gt;小型化，快速连接/断开，不适合高振动环境&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMC&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高 10 GHz&lt;/td&gt;
&lt;td&gt;军事、航空、空间应用&lt;/td&gt;
&lt;td&gt;小型化，更高的机械稳定性和耐用性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TNC&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高 11 GHz&lt;/td&gt;
&lt;td&gt;军事、移动通信、航空&lt;/td&gt;
&lt;td&gt;类似BNC但提供更好的机械稳定性和频率性能，耐振动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高 11 GHz&lt;/td&gt;
&lt;td&gt;广播、雷达、高频通信系统&lt;/td&gt;
&lt;td&gt;大尺寸，高功率和高频率应用，耐环境性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高1GHz&lt;/td&gt;
&lt;td&gt;电视信号传输&lt;/td&gt;
&lt;td&gt;结构简单、成本低廉且易于安装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UHF&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;最高 300 MHz&lt;/td&gt;
&lt;td&gt;CB无线电、业余无线电、商用无线电&lt;/td&gt;
&lt;td&gt;大尺寸，低频应用，耐用，适用于较低频率的长距离无线通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MCX&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;最高 6 GHz&lt;/td&gt;
&lt;td&gt;GPS、无线通信、电视接收器&lt;/td&gt;
&lt;td&gt;小尺寸，快速连接/断开，高频应用，适用于小型设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I-PEX MHF 4&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;最高 6 GHz&lt;/td&gt;
&lt;td&gt;笔记本、无线局域网 (WLAN)、移动设备&lt;/td&gt;
&lt;td&gt;极小型化，用于超小型设备，高频性能良好，安装简便&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Coax connectors" src="https://blog.debao.me/images/ee/coaxconnectors.gif"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/BNC_connector"&gt;BNC connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SMA_connector"&gt;SMA connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SMB_connector"&gt;SMB connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SMC_connector"&gt;SMC connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/TNC_connector"&gt;TNC connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/N_connector"&gt;N connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/F_connector"&gt;F connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/UHF_connector"&gt;UHF connector - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bnc-tnc"&gt;BNC  TNC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BNC：Bayonet Neill-Concelman的缩写。&lt;/li&gt;
&lt;li&gt;TNC：Threaded Neil-Concelman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bayonet  /ˈbeɪənət/，刺刀的意思，这儿指代卡口锁定机制；Neil-Concelman 两位发明者的姓氏。&lt;/p&gt;
&lt;p&gt;Threaded：螺纹的。&lt;/p&gt;
&lt;h3 id="sma-smb-smc"&gt;SMA SMB SMC&lt;/h3&gt;
&lt;p&gt;SMA：SubMiniature version A。&lt;/p&gt;
&lt;p&gt;Subminiature /sʌbˈmɪnɪətʃə/ 超小型的意思。&lt;/p&gt;
&lt;p&gt;SMA还存在一个反极性的版本RP-SMA（Reverse-polarity SMA)，这样一来，公头、母头的叫法就很容易乱了：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;螺纹&lt;/th&gt;
&lt;th&gt;中心&lt;/th&gt;
&lt;th&gt;叫法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SMA公头&lt;/td&gt;
&lt;td&gt;内螺纹&lt;/td&gt;
&lt;td&gt;针(pin)&lt;/td&gt;
&lt;td&gt;插头(plug)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMA母头&lt;/td&gt;
&lt;td&gt;外螺纹&lt;/td&gt;
&lt;td&gt;槽(receptacle)&lt;/td&gt;
&lt;td&gt;插孔(jack)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RP-SMA公头&lt;/td&gt;
&lt;td&gt;内螺纹&lt;/td&gt;
&lt;td&gt;槽(receptacle)&lt;/td&gt;
&lt;td&gt;插头(plug)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RP-SMA母头&lt;/td&gt;
&lt;td&gt;外螺纹&lt;/td&gt;
&lt;td&gt;针(pin)&lt;/td&gt;
&lt;td&gt;插孔(jack)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="sma-rpsma" src="https://blog.debao.me/images/ee/sma-rpsma-connectors.png"&gt;&lt;/p&gt;
&lt;h3 id="ipex"&gt;IPEX&lt;/h3&gt;
&lt;p&gt;IPEX（也称为u.FL、AMC、IPAX、IPX、MHF等）是一种非常小型的射频同轴连接器，广泛用于连接微型天线到无线通信设备中，例如在笔记本电脑、手机、GPS设备和无线局域网设备中。这种连接器由日本公司Hirose Electric Co., Ltd和I-PEX（Innovative Precision Excellence）制造，因其小巧的尺寸和可靠的性能而受到青睐。&lt;/p&gt;
&lt;p&gt;MHF：微型同轴高频连接器（Microcoaxial High Frequency）。MHF连接器由I-PEX公司制造，并且它们有几个不同的版本，比如MHF1, MHF2, MHF3, MHF4等。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipex connectors" src="https://blog.debao.me/images/ee/ipex-connecters.png"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://www.grand-tek.com/en/i-pex-mhf-connector.aspx&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系列型号&lt;/th&gt;
&lt;th&gt;外径 (大约)&lt;/th&gt;
&lt;th&gt;常用应用&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MHF1&lt;/td&gt;
&lt;td&gt;2.5 mm&lt;/td&gt;
&lt;td&gt;笔记本电脑、无线路由器&lt;/td&gt;
&lt;td&gt;初始的MHF系列产品，广泛应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF3&lt;/td&gt;
&lt;td&gt;1.7 mm&lt;/td&gt;
&lt;td&gt;移动设备&lt;/td&gt;
&lt;td&gt;体积小，适合空间受限的应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF4&lt;/td&gt;
&lt;td&gt;1.4 mm&lt;/td&gt;
&lt;td&gt;智能手机、平板电脑&lt;/td&gt;
&lt;td&gt;极小型设计，适用于超小型设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF5&lt;/td&gt;
&lt;td&gt;0.81 mm&lt;/td&gt;
&lt;td&gt;可穿戴设备、极小型无线模块&lt;/td&gt;
&lt;td&gt;MHF系列中最小的型号，高度迷你化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF6&lt;/td&gt;
&lt;td&gt;1.2 mm&lt;/td&gt;
&lt;td&gt;超小型设备&lt;/td&gt;
&lt;td&gt;类似MHF4但具有更好的耐振动性能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF7&lt;/td&gt;
&lt;td&gt;0.64 mm&lt;/td&gt;
&lt;td&gt;高密度应用如无线通信、可穿戴设备&lt;/td&gt;
&lt;td&gt;比MHF5还小，适用于极端空间限制的应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF I LK&lt;/td&gt;
&lt;td&gt;2.5 mm&lt;/td&gt;
&lt;td&gt;笔记本电脑、无线路由器、通信设备&lt;/td&gt;
&lt;td&gt;具有锁定机制的MHF1，提供更好的机械稳定性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF II&lt;/td&gt;
&lt;td&gt;2.05 mm&lt;/td&gt;
&lt;td&gt;无线通信设备&lt;/td&gt;
&lt;td&gt;相比MHF1更小，提供良好的性能与尺寸平衡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF III&lt;/td&gt;
&lt;td&gt;2.55 mm&lt;/td&gt;
&lt;td&gt;GPS装置、无线通信&lt;/td&gt;
&lt;td&gt;与MHF1类似尺寸，但设计用于不同的机械和电气性能要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF IV&lt;/td&gt;
&lt;td&gt;1.9 mm&lt;/td&gt;
&lt;td&gt;高频应用&lt;/td&gt;
&lt;td&gt;比MHF II小，适用于需要更小连接器的设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MHF XL&lt;/td&gt;
&lt;td&gt;3.0 mm&lt;/td&gt;
&lt;td&gt;无线基站、更大型的通信设备&lt;/td&gt;
&lt;td&gt;更大的设计，适合高功率应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="uhf"&gt;UHF&lt;/h3&gt;
&lt;p&gt;UHF：很老的接口，当时的 Ultra high frequency，指代30M以上。&lt;/p&gt;
&lt;h2 id="d-sub"&gt;D-Sub连接器&lt;/h2&gt;
&lt;p&gt;D-sub是“D-subminiature”连接器的简称，是一种传统的电子接口，广泛用于计算机和通信设备中。&lt;/p&gt;
&lt;p&gt;它的名称来自于特征性的&lt;strong&gt;D形金属屏蔽&lt;/strong&gt;，其目的是减少电磁干扰并确保插头正确对齐。D-sub连接器因其大小而被称为“subminiature”，&lt;strong&gt;尽管按今天的标准，它们并不小&lt;/strong&gt;。D-Sub连接器有不同的大小尺寸，用A、B、C、D、E表示；在标准布局下，插针数量分别为15、25、37、50、9。另外，还有高密度布局，以及双倍布局。&lt;/p&gt;
&lt;p&gt;&lt;img alt="D sub connectors" src="https://blog.debao.me/images/ee/d-sub-connectors.png"&gt;&lt;/p&gt;
&lt;p&gt;D-sub连接器有多种类型，通常按照插针的数量和排列来分类。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Normal density&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;High density&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Double density&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pin布局&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pin布局&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pin布局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DA-15&lt;/td&gt;
&lt;td&gt;8–7&lt;/td&gt;
&lt;td&gt;DA-26&lt;/td&gt;
&lt;td&gt;9–9–8&lt;/td&gt;
&lt;td&gt;DA-31&lt;/td&gt;
&lt;td&gt;10–11–10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DB-25&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;13–12&lt;/td&gt;
&lt;td&gt;DB-44&lt;/td&gt;
&lt;td&gt;15–15–14&lt;/td&gt;
&lt;td&gt;DB-52&lt;/td&gt;
&lt;td&gt;17–18–17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DC-37&lt;/td&gt;
&lt;td&gt;19–18&lt;/td&gt;
&lt;td&gt;DC-62&lt;/td&gt;
&lt;td&gt;21–21–20&lt;/td&gt;
&lt;td&gt;DC-79&lt;/td&gt;
&lt;td&gt;26–27–26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DD-50&lt;/td&gt;
&lt;td&gt;17–16–17&lt;/td&gt;
&lt;td&gt;DD-78&lt;/td&gt;
&lt;td&gt;20-19-20-19&lt;/td&gt;
&lt;td&gt;DD-100&lt;/td&gt;
&lt;td&gt;26-25-24-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DE-09&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;5–4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;DE-15&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;5–5–5&lt;/td&gt;
&lt;td&gt;DE-19&lt;/td&gt;
&lt;td&gt;6–7–6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;可能是由于早期DB25在个人电脑上作为并口比较普及，造成其他口也都被成为DBxx了。比如典型的：DE9 被称为 DB9。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最常见的类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB9或DE9：通常用于RS-232串行通信，虽然经常被错误地称为DB9，但正确的名称DE9，因为它有两排接针，上排5个，下排4个。&lt;/li&gt;
&lt;li&gt;DB25：用于并口通讯，也可用于RS-232串行通信，有两排，一排13个接针，另一排12个。&lt;/li&gt;
&lt;li&gt;DE15：通常用于VGA视频连接器，有三排，每排5个接针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每种D-sub连接器都有对应的公（插头）和母（插座）版本。公连接器（有凸出的插针）通常安装在电缆上，而母连接器（有凹入的孔）通常固定在设备上。&lt;/p&gt;
&lt;h2 id="_2"&gt;光纤接口&lt;/h2&gt;
&lt;p&gt;市面上有上百种光纤接口，&lt;a href="https://en.wikipedia.org/wiki/Optical_fiber_connector"&gt;Optical fiber connector - Wikipedia&lt;/a&gt;。一些常见的类型：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiber connector types of LC, SC, FC, ST, MTP, MPO" src="https://blog.debao.me/images/ee/fiber-connectors.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href="https://www.qsfptek.com/qt-news/fiber-connector-types-lc-sc-fc-st-mtp-mpo.html"&gt;Fiber Connector Types - LC vs SC vs FC vs ST vs MTP vs MPO (qsfptek.com)&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口类型&lt;/th&gt;
&lt;th&gt;连接方式&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;主要应用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;方形接口，耐用，低插损，适用于单模和多模光纤&lt;/td&gt;
&lt;td&gt;电信网络、CATV系统、高速数据传输网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LC&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;小型化设计，高精度陶瓷套筒，适用于密集连接环境&lt;/td&gt;
&lt;td&gt;数据中心、本地区域网络、电信网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ST&lt;/td&gt;
&lt;td&gt;旋入式&lt;/td&gt;
&lt;td&gt;圆形贝叶斯接口，机械稳定性好，主要用于多模光纤&lt;/td&gt;
&lt;td&gt;建筑内网络、数据中心、工业和军事应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MTP&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;支持多纤维（12到24根），高密度连接，空间节省&lt;/td&gt;
&lt;td&gt;高密度数据中心、高速网络传输、广播和高清视频应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FC&lt;/td&gt;
&lt;td&gt;螺纹式&lt;/td&gt;
&lt;td&gt;高精度螺纹式结构，适用于高振动环境，低插损，适用于单模光纤&lt;/td&gt;
&lt;td&gt;电信网络、测试和测量系统、高速数据应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MPO&lt;/td&gt;
&lt;td&gt;推拉式&lt;/td&gt;
&lt;td&gt;多纤维连接器，可支持多达72根光纤，用于高密度连接环境，适用于快速部署&lt;/td&gt;
&lt;td&gt;数据中心、高速计算和光纤到户&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;SC (Subscriber Connector 或 Standard Connector)：“Subscriber Connector”表示这是一种常用于订阅者接入的连接器，也被称为“Standard Connector”。&lt;/li&gt;
&lt;li&gt;LC (Lucent Connector)：“Lucent Connector”得名于其开发者Lucent Technologies。这是一种小型化的高密度连接器。&lt;/li&gt;
&lt;li&gt;ST (Straight Tip)：“Straight Tip”指的是连接器的直接插入设计，最初由AT&amp;amp;T开发。&lt;/li&gt;
&lt;li&gt;MTP (Multi-fiber Termination Push-on)：“Multi-fiber Termination Push-on”表示这是一种多纤维、推拉式的连接终端。&lt;/li&gt;
&lt;li&gt;FC (Ferrule Connector 或 Fiber Channel Connector)：“Ferrule Connector”指的是这种连接器中使用的陶瓷或金属套筒（ferrule）。&lt;/li&gt;
&lt;li&gt;MPO (Multi-fiber Push On)：“Multi-fiber Push On”同样指的是一种可以一次连接多条光纤的推拉式连接器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;航空插头&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;似乎是国内特有的？一种圆形多针接头？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="gx12-gx16-connectors" src="https://blog.debao.me/images/ee/gx12-gx16-connectors.png"&gt;&lt;/p&gt;
&lt;p&gt;航空插头：Aviation connector，或 aviation plug。特别设计用于航空、军事和其他恶劣环境中的高可靠性电子连接器。&lt;/p&gt;
&lt;p&gt;根据直径不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GX12&lt;/li&gt;
&lt;li&gt;GX16&lt;/li&gt;
&lt;li&gt;GX20&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;螺纹连接（Threaded）：具有螺纹的连接器，提供高强度的机械连接，适用于振动环境。这种类型的连接器需要旋转以完成接合和固定。&lt;/li&gt;
&lt;li&gt;推拉连接（Push-pull）：通过推拉动作快速连接和断开，适合频繁连接与断开的场合。&lt;/li&gt;
&lt;li&gt;卡口连接（Bayonet）：通过简单的插入和部分旋转动作实现快速锁定，提供较快的连接与断l开速度，常用于需要快速更换的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;杜邦线端子&lt;/h2&gt;
&lt;p&gt;杜邦线（Dupont Wire）是一种常用于电子和电气工程中的跳线，得名于其连接器的品牌“杜邦”（Dupont），虽然现在这个名称已经泛指各种类似的产品，不论其实际制造商。&lt;/p&gt;
&lt;p&gt;这种导线在两端有一个插座，这个插座能够刚好插在&lt;strong&gt;2.54mm（也有其他间距）间距的排针上&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dupont-connectors" src="https://blog.debao.me/images/ee/dupont-connectors.jpg"&gt;&lt;/p&gt;
&lt;h2 id="jst"&gt;JST连接器&lt;/h2&gt;
&lt;p&gt;&lt;img alt="jst-conectors" src="https://blog.debao.me/images/ee/jst-conectors.png"&gt;&lt;/p&gt;
&lt;p&gt;JST连接器是由日本厂商JST制造的一系列电子连接器的总称。JST是“Japan Solderless Terminal”的缩写，这个品牌以其高可靠性和多样性而闻名。JST连接器广泛应用于各种电子设备中，包括但不限于消费电子、汽车电子、工业设备和医疗设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XH系列：这是一种广泛使用的连接器，引脚间距为2.5mm，适用于较大电流的传输。&lt;/li&gt;
&lt;li&gt;PH系列：引脚间距为2.0mm，常用于需要较小体积的连接器的应用。&lt;/li&gt;
&lt;li&gt;ZH系列：引脚间距为1.5mm，用于更加紧凑的设计中。&lt;/li&gt;
&lt;li&gt;GH系列：引脚间距为1.25mm，是JST连接器中体积更小的一种，适用于非常有限的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="idc"&gt;IDC 牛角&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“牛角座”在电子组件领域通常指的是一种特定形状的插座或连接器，被称为双排针座（Double Row Pin Header）或双排母座。这种名称来源于这类连接器的引脚排列方式，因为它们的外观和排列类似于牛的角，引脚通常呈两排布置，形似“牛角”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="idc-connectors" src="https://blog.debao.me/images/ee/idc-connectors.png"&gt;&lt;/p&gt;
&lt;p&gt;IDC "Insulation Displacement Connector" ： “绝缘位移连接器”。这种连接器通过位移或切割电缆绝缘层来直接与电线内部的导体建立连接，无需提前剥除电线的绝缘层。&lt;/p&gt;
&lt;h2 id="lemo"&gt;Lemo连接器&lt;/h2&gt;
&lt;p&gt;Lemo 连接器是一种高质量的&lt;strong&gt;精密圆形推拉连接器&lt;/strong&gt;，广泛应用于多种行业，包括医疗、工业控制、测试与测量、音频/视频及军事领域。这种连接器因其高性能、可靠性和耐用性而受到青睐。Lemo 连接器由 LEMO 公司设计&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lemo connectors" src="https://blog.debao.me/images/ee/LEMO_connector_range.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推拉锁定机制：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lemo 连接器的一个显著特点是其推拉锁定系统。用户只需轻轻一推即可连接，并拉动外壳即可解锁并断开连接。这种设计既快速又方便，同时提供了坚固的机械和电气连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高密度接触布局：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些连接器通常具有高密度的引脚配置，使它们能在相对较小的空间内提供大量的信号和电源连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耐用性和可靠性：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lemo 连接器设计用于承受苛刻环境和重复连接/断开操作。它们通常具有高防护等级，能够抵抗水分、尘埃和其他污染物。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;材质和制造质量：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接器通常使用高质量的材料制成，如金属（铝、不锈钢）、高性能塑料等，确保其耐腐蚀性和机械强度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多样的配置和定制选项：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lemo 提供各种配置的连接器，包括不同数量和类型的接触点（信号、电源、同轴、光纤等）。此外，LEMOCO公司还提供定制服务以满足特定的应用需求。&lt;/p&gt;
&lt;h2 id="ffc-fpc"&gt;FFC / FPC 连接器&lt;/h2&gt;
&lt;p&gt;FFC (Flexible Flat Cable) 和 FPC (Flexible Printed Circuit) 是两种常用于电子设备中的柔性连接技术，它们主要用于连接电路板或设备内部组件。&lt;/p&gt;
&lt;p&gt;FFC (Flexible Flat Cable)，即柔性平面电缆，是一种非常薄且灵活的平面电缆，通常由多根导线组成，这些导线平行排列并被夹在两层绝缘材料之间。FFC主要用于电子设备内部的电连接，特别是在空间受限的应用中。&lt;/p&gt;
&lt;p&gt;FPC (Flexible Printed Circuit)，即柔性印刷电路板，是一种可以弯曲的打印电路板，通常由柔性基材（如聚酰亚胺）上印制一层或多层导电图案构成。FPC不仅能传输信号，还可以在其表面安装电子元件。&lt;/p&gt;
&lt;p&gt;&lt;img alt="FFC Connectors" src="https://blog.debao.me/images/ee/ffc_cable_assemblies.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://www.leotronics.co.uk&lt;/p&gt;
&lt;h2 id="usb"&gt;USB连接器&lt;/h2&gt;
&lt;p&gt;USB（&lt;strong&gt;Universal Serial Bus&lt;/strong&gt;）接口种类繁多，个人觉得常见的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准A口（TypeA）：不同颜色，表示不同的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;标准B口（TypeB）：打印机&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Mini-B：很老的手机或玩具&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Micro-B：老的手机，移动硬盘&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Type-C：取代各种A口，B口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个都有插头（Plug）和插座（Receptacle）之分，下表中使用的是插座图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="USB" src="https://blog.debao.me/images/ee/usb-connectors.png"&gt;&lt;/p&gt;
&lt;p&gt;图片内容：参考wikipedia&lt;/p&gt;
&lt;p&gt;引脚数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USB2.0：4或5&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;USB3.x：9或10&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;TypeC：12x2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeA口的颜色和版本有关（不绝对，很多厂商也会用其他颜色）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="USB" src="https://blog.debao.me/images/ee/usb-connections-800x462.png"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href="https://bloggerpilot.com/en/usb-color-codes/"&gt;USB color codes - Which USB version by color?&lt;/a&gt;&lt;/p&gt;</content><category term="EE"></category></entry><entry><title>ARM开发环境小记</title><link href="https://blog.debao.me/2024/04/notes-on-arm-development/" rel="alternate"></link><published>2024-04-20T22:04:00+08:00</published><updated>2024-04-20T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-04-20:/2024/04/notes-on-arm-development/</id><summary type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-stm32/"&gt;STM32小记&lt;/a&gt;，继续学习ARM开发环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;东西似乎比较杂，简单搜集记录一下。以免忘了....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="keil-mdk-arm"&gt;Keil MDK-ARM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;关注一下它的编译器，armcc已经太老了，使用armclang。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keil ，取自其创始人 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-stm32/"&gt;STM32小记&lt;/a&gt;，继续学习ARM开发环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;东西似乎比较杂，简单搜集记录一下。以免忘了....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="keil-mdk-arm"&gt;Keil MDK-ARM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;关注一下它的编译器，armcc已经太老了，使用armclang。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keil ，取自其创始人的名字，德国人，发音 /kɑɪl/ - 其中 "kɑɪ" 发音类似于英语单词 "kite"。似乎在国内 /keɪl/或/ki:l/ 也能接受？ &lt;/p&gt;
&lt;p&gt;Keil MDK-ARM 是一个强大的微控制器开发环境，专为 ARM Cortex-M 微处理器设计。它提供了包括 µVision IDE、编译器、调试器和必要的中间件组件。具有高级的代码编辑功能、项目管理工具和强大的调试功能。它也支持 RTOS（实时操作系统）和提供了广泛的中间件库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1982年，Keil Elektronic GmbH在德国成立，专注于8051微处理器的开发工具。&lt;/li&gt;
&lt;li&gt;1990年代末，随着ARM架构兴起，Keil开始开发面向ARM的编译器和调试工具。&lt;/li&gt;
&lt;li&gt;2005年，ARM公司收购了Keil。&lt;/li&gt;
&lt;li&gt;Keil MDK-ARM：随着 ARM 微控制器的普及，Keil 发布了 Microcontroller Development Kit (MDK)，专为 ARM Cortex-M 和 Cortex-R 系列设计。&lt;/li&gt;
&lt;li&gt;2014年：Keil MDK-ARM 版本5发布，引入了许多新功能和改进，包括对 ARM Cortex-M 内核的全面支持，以及全新的软件包管理功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：Keil 有4套东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keil MDK：Keil for ARM，Keil MDK-ARM，用于ARM微处理器&lt;/li&gt;
&lt;li&gt;Keil PK51：Keil C51, 用于 8051微处理器&lt;/li&gt;
&lt;li&gt;Keil PK166：Keil C166，用于 XC16x, C16x, ST10微处理器&lt;/li&gt;
&lt;li&gt;Keil DK251：Keil C251，用于 C251微处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不用于商业开发的话，&lt;strong&gt;Keil MDK社区版本&lt;/strong&gt; 可以免费使用，社区版之前叫做MDK Lite版本。&lt;/p&gt;
&lt;h3 id="keil-mdk"&gt;keil MDK 编译器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ARM Compiler 5：armcc&lt;/li&gt;
&lt;li&gt;ARM Compiler 6：armclang&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;Keil MDK 版本&lt;/th&gt;
&lt;th&gt;默认编译器&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016年5月&lt;/td&gt;
&lt;td&gt;5.22&lt;/td&gt;
&lt;td&gt;ARM Compiler 5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;首次引入&lt;/strong&gt; ARM Compiler 6，但非默认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017年6月&lt;/td&gt;
&lt;td&gt;5.24&lt;/td&gt;
&lt;td&gt;ARM Compiler 5&lt;/td&gt;
&lt;td&gt;强烈推荐迁移到 ARM Compiler 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018年&lt;/td&gt;
&lt;td&gt;5.25&lt;/td&gt;
&lt;td&gt;ARM Compiler 6&lt;/td&gt;
&lt;td&gt;ARM Compiler 6 成为&lt;strong&gt;默认&lt;/strong&gt;编译器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022年&lt;/td&gt;
&lt;td&gt;5.34&lt;/td&gt;
&lt;td&gt;ARM Compiler 6&lt;/td&gt;
&lt;td&gt;不再包含 ARM Compiler 5，需要手动配置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="gun-gcc"&gt;Gun GCC工具链&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;STM32CubeIDE是一个专用于STM32的免费的开发环境，它使用的时GUN GCC工具链。在其安装目录下 STM32CubeIDE/plugins/com.st.stm32cube.ide.mcu.externaltools.gun-tools-for-stm32.... 下面，可以看到&lt;strong&gt;arm-none-eabi&lt;/strong&gt; 字样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于ARM的GCC工具链，2014年之前是Sourcery GCC，2010起 Linaro成立后提供 GCC工具链下载，后来由ARM官方提供GCC工具链下载。&lt;/p&gt;
&lt;h3 id="arm"&gt;ARM官网&lt;/h3&gt;
&lt;p&gt;在ARM官网，我们可以看到其为4种target在不同的操作系统下都提供了GUN交叉编译工具链。这4种target列成表格如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Target Triple&lt;/th&gt;
&lt;th&gt;架构&lt;/th&gt;
&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;ABI&lt;/th&gt;
&lt;th&gt;浮点支持&lt;/th&gt;
&lt;th&gt;主要用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-none-eabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AArch32&lt;/td&gt;
&lt;td&gt;Bare-metal&lt;/td&gt;
&lt;td&gt;EABI&lt;/td&gt;
&lt;td&gt;硬件/软件（可选）&lt;/td&gt;
&lt;td&gt;嵌入式系统（如微控制器）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-none-linux-gnueabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AArch32&lt;/td&gt;
&lt;td&gt;GNU/Linux&lt;/td&gt;
&lt;td&gt;GNU EABI with hard-float&lt;/td&gt;
&lt;td&gt;硬件浮点&lt;/td&gt;
&lt;td&gt;嵌入式Linux系统，需要硬件浮点支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aarch64-none-elf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AArch64&lt;/td&gt;
&lt;td&gt;Bare-metal&lt;/td&gt;
&lt;td&gt;ELF&lt;/td&gt;
&lt;td&gt;硬件浮点&lt;/td&gt;
&lt;td&gt;高性能嵌入式系统，无操作系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aarch64-none-linux-gnu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AArch64&lt;/td&gt;
&lt;td&gt;GNU/Linux&lt;/td&gt;
&lt;td&gt;GNU&lt;/td&gt;
&lt;td&gt;硬件浮点&lt;/td&gt;
&lt;td&gt;服务器或高端嵌入式系统运行Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aarch64都支持硬件浮点，所以ABI无需体现浮点特性。&lt;/li&gt;
&lt;li&gt;aarch32用于嵌入式Linux系统时，需要硬件浮点支持。ABI种的hf代表硬件浮点(Hard Float)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件包名字（以Window下为例），挺长的(当前2024年4月）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi.zip&lt;/li&gt;
&lt;li&gt;arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-linux-gnueabihf.zip&lt;/li&gt;
&lt;li&gt;arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-aarch64-none-elf.zip&lt;/li&gt;
&lt;li&gt;arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-aarch64-none-linux-gnu.zip&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ubuntu"&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;Ubuntu官方仓库提供如下软件包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc-arm-linux-gnueabi&lt;/li&gt;
&lt;li&gt;gcc-arm-linux-gnueabihf&lt;/li&gt;
&lt;li&gt;gcc-arm-none-eabi&lt;/li&gt;
&lt;li&gt;gcc-aarch64-linux-gnu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应target分别为（可查看其gcc对应的名字，比如arm-linux-guneabi-gcc）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arm-linux-guneabi&lt;/li&gt;
&lt;li&gt;arm-linux-gnueabihf&lt;/li&gt;
&lt;li&gt;arm-none-eabi&lt;/li&gt;
&lt;li&gt;aarch64-linux-gnu&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于Arm GNU Toolchain releases已经在ARM官网提供，PPA &lt;a href="https://launchpad.net/gcc-arm-embedded"&gt;GNU Arm Embedded Toolchain in Launchpad&lt;/a&gt; 已经不再使用。Ubuntu仓库和Arm官方用的应该是一样的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;arm-none-eabi对应源码包（ubuntu24.04)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc-arm-none-eabi_13.2.rel1.orig.tar.bz2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://hk.archive.ubuntu.com/ubuntu/pool/universe/g/gcc-arm-none-eabi/&lt;/li&gt;
&lt;li&gt;http://old-releases.ubuntu.com/ubuntu/pool/universe/g/gcc-arm-none-eabi/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linaro"&gt;Linaro&lt;/h3&gt;
&lt;p&gt;Linaro 是一个非盈利组织，成立于 2010 年，专注于开发开源软件项目，特别是那些运行在基于 ARM 架构的设备上的项目。Linaro 的目标是提升 ARM 生态系统的软件质量、提高开发效率以及优化相关软件性能，以便更好地支持和利用 ARM 处理器的特性。&lt;/p&gt;
&lt;p&gt;二进制包只提供到GCC7.5，时间也截止到2019年。（后面应该都是转到了ARM官方的GCC工具链）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aarch64-elf        &lt;/li&gt;
&lt;li&gt;aarch64-linux-gnu        &lt;/li&gt;
&lt;li&gt;aarch64_be-elf        &lt;/li&gt;
&lt;li&gt;aarch64_be-linux-gnu        &lt;/li&gt;
&lt;li&gt;arm-eabi        &lt;/li&gt;
&lt;li&gt;arm-linux-gnueabi        &lt;/li&gt;
&lt;li&gt;arm-linux-gnueabihf        &lt;/li&gt;
&lt;li&gt;armeb-eabi        &lt;/li&gt;
&lt;li&gt;armeb-linux-gnueabi    &lt;/li&gt;
&lt;li&gt;armeb-linux-gnueabihf&lt;/li&gt;
&lt;li&gt;armv8l-linux-gnueabihf&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="target-triple"&gt;Target Triple&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;没有统一的规定，一般来说，这个前缀代表TARGET平台：比如 CPU-PLATFORM-OS 组合，或 &lt;code&gt;arch [-vendor] [-os] [-(gnu)eabi]&lt;/code&gt; 等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本格式如下（注意，没有严格标准！！！）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;-[&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;]-[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;]-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arch：代表目标的体系架构。即想要编译的代码将运行在哪种类型的处理器上。例如，arm、aarch64、x86等。&lt;/li&gt;
&lt;li&gt;vendor：可选部分。指的是工具链供应商，这可以是任何组织或个人。不指定vendor，通常意味着没有特定的供应商，工具链是通用的。&lt;/li&gt;
&lt;li&gt;os：也是可选部分。指定目标操作系统。这有助于工具链生成适应特定操作系统的代码，例如针对其系统调用、库函数等。none表示没有操作系统，这通常用于裸机（bare-metal）编程&lt;/li&gt;
&lt;li&gt;api：对ARM来说，eabi，guneabihf, guneabi 等。其中，带gnu表示有linux系统，使用glibc库；不带gnu的是裸机，使用newlib库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在从源码构建GCC交叉工具链时，在configure时可以指定build, host与target：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;configure --build=xxxx --host=xxx  --target=xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;如果build、host、target 三者一样，叫做native&lt;/li&gt;
&lt;li&gt;如果build与host一样，但与target不一样，叫做cross（交叉编译）。如果target指定为foo-bar，那么生成gcc则命名为 &lt;code&gt;foo-bar-gcc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;另外，有时会创建各种链接，比如飞思卡尔的gcc工具链：&lt;code&gt;arm-fsl-linux-gnueabi-*&lt;/code&gt;，有时会创建&lt;code&gt;arm-none-linux-guneabi-*&lt;/code&gt; 或 &lt;code&gt;arm-linux-*&lt;/code&gt; 来指向它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;历史&lt;/h3&gt;
&lt;h4 id="sourcery-g-lite-arm-none-linux-gnueabi"&gt;Sourcery G++ Lite （arm-none-linux-gnueabi）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;网上不少中文资料都指向这个东西，但是官网似乎很隐蔽，原来它时间线：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;由Codesourcery 公司开发&lt;/li&gt;
&lt;li&gt;公司被Mentor收购&lt;/li&gt;
&lt;li&gt;终止该项目开发&lt;/li&gt;
&lt;li&gt;Mentor被Siemens 收购&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;arm-none-linux-gnueabi是Codesourcery公司基于GCC推出的ARM交叉编译工具。包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU C 和 C++编译器&lt;/li&gt;
&lt;li&gt;GNU 汇编和链接器&lt;/li&gt;
&lt;li&gt;C 和 C++运行库&lt;/li&gt;
&lt;li&gt;GNU 调试器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可用于交叉编译ARM系统中各个环节的代码，包括裸机程序、u-boot、Linux kernel、filesystem和应用程序。它提供有Linux、Windows下的预编译二进制。&lt;/p&gt;
&lt;p&gt;比如Linux下预编译包，其软件包命名如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arm-2006q1-6-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2&lt;/li&gt;
&lt;li&gt;arm-2009q3-67-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2 &lt;/li&gt;
&lt;li&gt;arm-2010q1-202-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2&lt;/li&gt;
&lt;li&gt;arm-2010.09-50-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2 &lt;/li&gt;
&lt;li&gt;arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件包的日期在2010年命名上稍有区别，应该和Codesourcery被Mentor收购有关。&lt;/p&gt;
&lt;p&gt;2014.05-29 是该工具包最后一个版本，工具包内个软件的版本信息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8.3&lt;/li&gt;
&lt;li&gt;GNU二进制工具 2.24.51&lt;/li&gt;
&lt;li&gt;GDB 7.7.50&lt;/li&gt;
&lt;li&gt;GNU C库 2.18&lt;/li&gt;
&lt;li&gt;Linux内核头文件 3.13&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iar-embedded-workbench"&gt;IAR Embedded Workbench&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;先放上，以免忘了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IAR Embedded Workbench 是一个集成开发环境和工具链，支持包括 STM32 在内的多种 ARM Cortex-M 微控制器。它以其编译器优化技术和高效的代码生成而闻名。提供了高级的代码优化功能，包括对代码大小和执行速度的优化，以及全面的调试工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IAR Embedded Workbench 使用的编译器通常被称为 IAR C/C++ Compiler。这个编译器是 IAR Systems 提供的，专门为嵌入式系统的开发设计。IAR C/C++ Compiler 针对多种微处理器架构提供优化，支持包括 ARM、AVR、MSP430、RX、RISC-V、8051 等多种流行的微控制器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="llvm"&gt;LLVM工具链&lt;/h2&gt;
&lt;p&gt;先放上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases"&gt;Releases · ARM-software/LLVM-embedded-toolchain-for-Arm · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm"&gt;GitHub - ARM-software/LLVM-embedded-toolchain-for-Arm: A project dedicated to building LLVM toolchain for 32-bit Arm embedded targets.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="arduino"&gt;Arduino&lt;/h2&gt;
&lt;p&gt;Arduino  /ɑːrˈdwiːnoʊ/ 是一个开源电子原型平台，由硬件（物理编程板）和软件（Arduino IDE）两部分组成。它是设计用来让艺术家、设计师、爱好者和任何对创造互动对象或环境感兴趣的人更容易接入到电子和编程世界中。&lt;/p&gt;
&lt;h3 id="arduido-ide"&gt;Arduido IDE&lt;/h3&gt;
&lt;p&gt;Arduino IDE 使用的编译器依赖于目标硬件平台。对于基于不同微控制器的开发板，Arduino IDE 使用不同的工具链来处理代码的编译和上传。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于基于AVR的Arduino开发版（Arguino Uno, Mega等），Arduino IDE 使用 arv-gcc编译器。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;对于基于ARM的Arduibo 开发版(Arduino Due, Zero, MKR等)，Arduino IDE使用 arm-none-eabi-gcc编译器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;库&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 ARM Cortex-M 微控制器开发中，有 CMSIS、SPL、HAL 和 LL 不同的个东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CMSIS 是 ARM主导的，&lt;strong&gt;而SPL(STM32标准库）、HAL和LL是ST主导的，用于STM32&lt;/strong&gt;*。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;CMSIS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;SPL&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;HAL&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;LL&lt;/strong&gt; (Low-Layer)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ARM 提供的标准化软件接口，简化 Cortex-M 系列微控制器的开发。&lt;/td&gt;
&lt;td&gt;STMicroelectronics 提供的标准外设库，用于 STM32 微控制器。&lt;/td&gt;
&lt;td&gt;STMicroelectronics 提供的硬件抽象层库，用于 STM32 微控制器。&lt;/td&gt;
&lt;td&gt;STMicroelectronics 提供的低层次硬件接口库，用于 STM32 微控制器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;标准化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供一致的接口，适用于不同厂商的 Cortex-M 微控制器。&lt;/td&gt;
&lt;td&gt;针对 STM32 系列微控制器，提供一致的外设接口。&lt;/td&gt;
&lt;td&gt;针对 STM32 系列微控制器，提供一致的外设接口。&lt;/td&gt;
&lt;td&gt;针对 STM32 系列微控制器，提供一致的外设接口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;组件化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;包括 CMSIS-Core、CMSIS-DSP、CMSIS-RTOS、CMSIS-Driver 等多个组件。&lt;/td&gt;
&lt;td&gt;包含各类外设驱动函数。&lt;/td&gt;
&lt;td&gt;包含各类外设驱动函数。&lt;/td&gt;
&lt;td&gt;包含各类外设驱动函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;抽象层级&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;低级：直接访问 Cortex-M 内核和基本外设寄存器。&lt;/td&gt;
&lt;td&gt;中级：提供对 STM32 外设的高级抽象。&lt;/td&gt;
&lt;td&gt;高级：提供对 STM32 外设的高级抽象。&lt;/td&gt;
&lt;td&gt;低级：提供对 STM32 外设的直接访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;代码可读性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要对 Cortex-M 内核有较深理解。&lt;/td&gt;
&lt;td&gt;提供较为简洁的 API，适合快速开发。&lt;/td&gt;
&lt;td&gt;提供较为简洁的 API，适合快速开发。&lt;/td&gt;
&lt;td&gt;代码量较大，适合需要精细控制的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能优化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供优化的 DSP 和 RTOS 支持。&lt;/td&gt;
&lt;td&gt;性能较高，但抽象层次较低。&lt;/td&gt;
&lt;td&gt;易于使用，但可能在某些情况下性能不如 LL。&lt;/td&gt;
&lt;td&gt;性能高，适合对时间和资源要求严格的应用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- 系统初始化、异常处理、内核寄存器操作。                                 - 高性能计算（CMSIS-DSP）。 &lt;br/&gt;- RTOS 开发（CMSIS-RTOS）。&lt;/td&gt;
&lt;td&gt;- STM32 微控制器的基本外设配置和操作。&lt;/td&gt;
&lt;td&gt;- STM32 微控制器的基本外设配置和操作。&lt;/td&gt;
&lt;td&gt;- 需要高性能和精细控制的嵌入式应用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;集成工具&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;与 ARM 的开发工具链紧密集成。&lt;/td&gt;
&lt;td&gt;与 STM32 标准库和开发工具链紧密集成。&lt;/td&gt;
&lt;td&gt;与 STM32CubeMX 工具紧密集成，可自动生成初始化代码。&lt;/td&gt;
&lt;td&gt;与 STM32CubeMX 工具紧密集成，可自动生成初始化代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="cmsis"&gt;CMSIS&lt;/h3&gt;
&lt;p&gt;CMSIS (Cortex Microcontroller Software Interface Standard)&lt;/p&gt;
&lt;p&gt;CMSIS 是由 ARM 提供的一个软件接口标准，旨在使软件复用、可移植性和开发效率最大化。CMSIS 定义了一系列与硬件无关的接口，使得开发者可以编写与特定微控制器无关的应用软件。&lt;/p&gt;
&lt;h3 id="hal-hardware-abstraction-layer"&gt;HAL (Hardware Abstraction Layer)&lt;/h3&gt;
&lt;p&gt;HAL 是“硬件抽象层”的英文缩写，通常由微控制器制造商提供，用于简化直接通过寄存器访问硬件资源的复杂性。HAL 为应用程序和硬件设备之间提供了一个抽象的接口，使得应用程序可以不依赖于底层硬件的具体实现。&lt;/p&gt;
&lt;h3 id="ll-low-layer"&gt;LL (Low Layer)&lt;/h3&gt;
&lt;p&gt;LL 是“低层”（Low Layer）的简称，也是由微控制器制造商提供的库，它提供了比 HAL 更接近硬件的抽象层。LL 库允许更精细的硬件控制，并且通常比 HAL 更为高效，但使用起来比 HAL 更复杂。&lt;/p&gt;
&lt;h3 id="spl-standard-peripheral-library"&gt;SPL (Standard Peripheral Library)&lt;/h3&gt;
&lt;p&gt;ST 标准外设库（Standard Peripheral Library），通常简称为 SPL，是由 STMicroelectronics 提供的一套用于 STM32 微控制器的硬件抽象层（HAL）库。它为用户提供了一组函数，用于配置和控制 STM32 微控制器的各种外设，如 GPIO、USART、SPI、I2C、ADC 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽管STM32Cube HAL 库是 ST 推出的新一代库，SPL 仍然在一些老旧项目和特定需求中被广泛使用！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.keil.com/product/"&gt;Keil Product Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://wiki.st.com/stm32mcu/wiki/STM32CubeIDE&lt;/li&gt;
&lt;li&gt;&lt;a href="https://releases.linaro.org/components/toolchain/binaries/"&gt;Linaro Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://web.archive.org/web/20160410104337/https://community.freescale.com/thread/313490#comment-354077&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm"&gt;GitHub - ARM-software/LLVM-embedded-toolchain-for-Arm: A project dedicated to building LLVM toolchain for 32-bit Arm embedded targets.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/gcc-arm-embedded"&gt;GNU Arm Embedded Toolchain in Launchpad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="arm"></category></entry><entry><title>STM32小记</title><link href="https://blog.debao.me/2024/04/notes-on-stm32/" rel="alternate"></link><published>2024-04-16T22:04:00+08:00</published><updated>2024-04-16T22:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-04-16:/2024/04/notes-on-stm32/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;需要补充一点单片机开发的知识，从STM32开始吧...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;STM32是意法半导体（STMicroelectronics）推出的一系列32位ARM Cortex-M微控制器产品线。&lt;/p&gt;
&lt;p&gt;这些微控制器采用了ARM Cortex-M内核，并具有丰富的外设和功能，可用 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;需要补充一点单片机开发的知识，从STM32开始吧...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;STM32是意法半导体（STMicroelectronics）推出的一系列32位ARM Cortex-M微控制器产品线。&lt;/p&gt;
&lt;p&gt;这些微控制器采用了ARM Cortex-M内核，并具有丰富的外设和功能，可用于各种应用领域，包括工业控制、汽车电子、医疗设备、消费电子等。&lt;/p&gt;
&lt;h2 id="stm32"&gt;STM32&lt;/h2&gt;
&lt;p&gt;STM32 引脚&lt;/p&gt;
&lt;p&gt;&lt;img alt="stm32-pinout-diagram" src="https://blog.debao.me/images/stm32-pinout-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://www.wellpcb.com/STM32-pinout.html&lt;/p&gt;
&lt;p&gt;STM32系列微控制器产品线包括多个系列和型号，以满足不同应用和需求。这些系列包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STM32F系列：主流系列&lt;/li&gt;
&lt;li&gt;STM32L系列：超低功耗系列&lt;/li&gt;
&lt;li&gt;STM32H系列：高性能系列&lt;/li&gt;
&lt;li&gt;STM32G系列：通用系列&lt;/li&gt;
&lt;li&gt;STM32W系列&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="arm-cortex-mcu-portfolio" src="https://blog.debao.me/images/arm-cortex-mcu-portfolio-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://www.st.com/en/microcontrollers-microprocessors/stm32-32-bit-arm-cortex-mcus.html&lt;/p&gt;
&lt;h3 id="_1"&gt;命名格式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;STM32&amp;lt;Family&amp;gt;&amp;lt;Line&amp;gt;&amp;lt;Memory&amp;gt;&amp;lt;Package&amp;gt;&amp;lt;Temp&amp;gt;&amp;lt;Option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Family：表示 MCU 所属的系列。&lt;/li&gt;
&lt;li&gt;Line：表示具体的产品线或子系列。&lt;/li&gt;
&lt;li&gt;Memory：表示闪存和 RAM 容量。&lt;/li&gt;
&lt;li&gt;Package：表示封装类型。&lt;/li&gt;
&lt;li&gt;Temp：表示工作温度范围。&lt;/li&gt;
&lt;li&gt;Option：表示其他可选特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 STM32F103C8T6 为例，解析如下：&lt;/p&gt;
&lt;p&gt;STM32：表示这是一个 STM32 系列的微控制器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;F：表示家族，F 代表 Cortex-M3 内核的主流系列。&lt;/li&gt;
&lt;li&gt;103：表示具体的产品线，103 是 STM32F1 系列中的一条线，通常表示基本的特性和性能。&lt;/li&gt;
&lt;li&gt;C8：表示存储容量和某些特性：&lt;ul&gt;
&lt;li&gt;C 表示 48 引脚封装。&lt;/li&gt;
&lt;li&gt;8 表示 64KB 闪存和 20KB RAM。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;T：表示封装类型，T 代表 LQFP 封装。&lt;/li&gt;
&lt;li&gt;6：表示工作温度范围，6 代表 -40°C 至 +85°C。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="arm"&gt;ARM 是什么？&lt;/h2&gt;
&lt;p&gt;ARM是 Advanced RISC Machine的缩写，&lt;strong&gt;是指&lt;/strong&gt;一家名为ARM的公司，&lt;strong&gt;也指&lt;/strong&gt;该公司设计的处理器内核ARM。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARM公司是全球领先的半导体知识产权（IP）提供商，只设计内核不生产实物&lt;/li&gt;
&lt;li&gt;ARM公司设计ARM内核，其他半导体厂商完善内核周边电路并生产芯片，意法半导体的STM32。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARM传统上采用数字命名:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARM7&lt;/li&gt;
&lt;li&gt;ARM9&lt;/li&gt;
&lt;li&gt;ARM11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来出了新的CORTEX家族，其又可以分为分为三个系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CORTEX &lt;strong&gt;A&lt;/strong&gt;x：高端应用领域，性能最高&lt;/li&gt;
&lt;li&gt;CORTEX &lt;strong&gt;R&lt;/strong&gt;x：实时性高的产品&lt;/li&gt;
&lt;li&gt;CORTEX &lt;strong&gt;M&lt;/strong&gt;x：嵌入式，单片机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ArmRoadMap" src="https://blog.debao.me/images/ArmRoadMap.png"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://emcu.it/CortexFamily/CortexFamily.html&lt;/p&gt;
&lt;h2 id="_2"&gt;集成开发环境&lt;/h2&gt;
&lt;p&gt;STM32CubeIDE是意法半导体提供的免费IDE，2019年发布。Keil 历史比较久远，支持ARM的芯片更广泛。&lt;/p&gt;
&lt;p&gt;20240531更新链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.debao.me/2024/04/notes-on-arm-development/"&gt;ARM开发环境小记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.debao.me/2024/05/notes-on-keil-mdk-community/"&gt;Keil MDK 社区版小记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.debao.me/2024/05/notes-on-stm32cubemx/"&gt;STM32CubeMX小记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stm32cubeide"&gt;STM32CubeIDE&lt;/h3&gt;
&lt;p&gt;STM32CubeIDE 是一个全面的开发环境，集成了代码编写、编译、调试和程序烧写功能。它基于开源的 Eclipse IDE、CDT（C/C++ Development Tooling）和 GDB（GNU Debugger）构建，并集成了ST专有的HAL（硬件抽象层）库和LL（低层）驱动器。
包括 STM32CubeMX，用于配置微控制器的各种硬件特性如时钟、中断、外设等，并自动生成初始化代码。&lt;/p&gt;
&lt;p&gt;除了CubeIDE，还经常看到另外三个名字。在典型的开发流程中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STM32CubeMX 用于生成初始化代码和配置项目，然后在 &lt;/li&gt;
&lt;li&gt;STM32CubeIDE 中编辑、编译和调试这些代码&lt;/li&gt;
&lt;li&gt;STM32CubeProgrammer 用于将编译好的程序烧写到微控制器上&lt;/li&gt;
&lt;li&gt;STM32CubeMonitor 可用于进一步的运行时分析和性能调优。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列个表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;主要功能&lt;/th&gt;
&lt;th&gt;用途说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;STM32CubeMX&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- 图形化的微控制器配置工具&lt;br&gt;- 生成初始化代码&lt;/td&gt;
&lt;td&gt;- 配置微控制器外设和功能&lt;br&gt;- 为 IDE 设置项目基础&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;STM32CubeProgrammer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- 微控制器的编程和固件升级工具&lt;br&gt;- 支持多种编程接口&lt;/td&gt;
&lt;td&gt;- 上传编译后的程序到微控制器&lt;br&gt;- 执行固件升级和备份操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;STM32CubeMonitor&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- 实时数据监控和可视化工具&lt;/td&gt;
&lt;td&gt;- 监控和分析微控制器应用程序的运行时数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;STM32CubeIDE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- 集成开发环境&lt;br&gt;- 包含代码编辑、编译、调试功能&lt;br&gt;- 集成 STM32CubeMX 和 STM32CubeProgrammer&lt;/td&gt;
&lt;td&gt;- 开发、编译、调试 STM32 应用程序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="keil-mdk-arm"&gt;Keil MDK-ARM&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注：它的编译器之前是armcc，2014年起逐步变更为armclang编译器（二者共存），2020年已不再包含armcc，它们是ARM 公司提供的专门针对 ARM 处理器的编译器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keil MDK-ARM 是一个强大的微控制器开发环境，专为 ARM Cortex-M 微处理器设计。它提供了包括 µVision IDE、编译器、调试器和必要的中间件组件。具有高级的代码编辑功能、项目管理工具和强大的调试功能。它也支持 RTOS（实时操作系统）和提供了广泛的中间件库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1982年，Keil Elektronic GmbH在德国成立，专注于8051微处理器的开发工具。&lt;/li&gt;
&lt;li&gt;1990年代末，随着ARM架构兴起，Keil开始开发面向ARM的编译器和调试工具。&lt;/li&gt;
&lt;li&gt;2005年，ARM公司收购了Keil。&lt;/li&gt;
&lt;li&gt;Keil MDK-ARM：随着 ARM 微控制器的普及，Keil 发布了 Microcontroller Development Kit (MDK)，专为 ARM Cortex-M 和 Cortex-R 系列设计。&lt;/li&gt;
&lt;li&gt;2014年：Keil MDK-ARM 版本5发布，引入了许多新功能和改进，包括对 ARM Cortex-M 内核的全面支持，以及全新的软件包管理功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：Keil 有4套东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keil MDK：Keil for ARM，Keil MDK-ARM，用于ARM微处理器&lt;/li&gt;
&lt;li&gt;Keil PK51：Keil C51, 用于 8051微处理器&lt;/li&gt;
&lt;li&gt;Keil PK166：Keil C166，用于 XC16x, C16x, ST10微处理器&lt;/li&gt;
&lt;li&gt;Keil DK251：Keil C251，用于 C251微处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不用于商业开发的话，&lt;strong&gt;Keil MDK社区版本&lt;/strong&gt; 可以免费使用。&lt;/p&gt;
&lt;h3 id="iar-embedded-workbench"&gt;IAR Embedded Workbench&lt;/h3&gt;
&lt;p&gt;IAR Embedded Workbench 是一个集成开发环境和工具链，支持包括 STM32 在内的多种 ARM Cortex-M 微控制器。它以其编译器优化技术和高效的代码生成而闻名。提供了高级的代码优化功能，包括对代码大小和执行速度的优化，以及全面的调试工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IAR Embedded Workbench 使用的编译器通常被称为 IAR C/C++ Compiler。这个编译器是 IAR Systems 提供的，专门为嵌入式系统的开发设计。IAR C/C++ Compiler 针对多种微处理器架构提供优化，支持包括 ARM、AVR、MSP430、RX、RISC-V、8051 等多种流行的微控制器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="jtag-swd"&gt;JTAG 与 SWD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JTAG (Joint Test Action Group) &lt;/li&gt;
&lt;li&gt;SWD (Serial Wire Debug) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是两种常用的调试和编程接口，用于微控制器和其他集成电路的开发。&lt;/p&gt;
&lt;p&gt;JTAG 和 SWD 的主要特性和区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;JTAG&lt;/th&gt;
&lt;th&gt;SWD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;引脚数量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通常需要 4 个或更多引脚&lt;/td&gt;
&lt;td&gt;只需要 2 个引脚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;引脚功能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;- TCK (时钟)&lt;br&gt;- TMS (模式选择)&lt;br&gt;- TDI (数据输入)&lt;br&gt;- TDO (数据输出)&lt;br&gt;- (可选) TRST (复位)&lt;/td&gt;
&lt;td&gt;- SWCLK (时钟)&lt;br&gt;- SWDIO (数据输入/输出)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;协议复杂性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较复杂，因为提供了链式连接多个设备的能力&lt;/td&gt;
&lt;td&gt;较简单，专注于单一设备的调试和编程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;通用性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持多种设备，不限于 ARM 架构&lt;/td&gt;
&lt;td&gt;主要用于 ARM 架构的设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;调试能力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持复杂的调试功能，如边界扫描等&lt;/td&gt;
&lt;td&gt;专注于核心的调试功能，如断点和观察点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;速度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通常较慢，受限于链路中的最慢设备&lt;/td&gt;
&lt;td&gt;通常较快，因为只连接单个设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;硬件成本&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较高，因为需要多个引脚和复杂的接口&lt;/td&gt;
&lt;td&gt;较低，因为接口简单，引脚数少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;易用性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;配置较为复杂，尤其在多设备系统中&lt;/td&gt;
&lt;td&gt;配置简单，易于实现和使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_3"&gt;如何用？&lt;/h3&gt;
&lt;p&gt;如果使用ST官方的板子(Nucleo或Discovery)，不需要额外的调试器，因为板子上自带了ST-LINK的调试器。直接用USB连接到PC主机即可。&lt;/p&gt;
&lt;p&gt;中国大陆的开发的板子，通过不包含ST-LINK。需要使用外置的调试器来烧写或调试。&lt;/p&gt;
&lt;p&gt;ST官方 ST-LINK/V2的接口如下，它包含一个20针接头（板子上需要这么留接口）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typical ARM JTAG SWD Header" src="https://blog.debao.me/images/ARM_JTAG_SWD_Header.png"&gt;&lt;/p&gt;
&lt;p&gt;但是，中国克隆的ST-LINK/V2接口可能只使用10针接头：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ST-LINK Clone Header" src="https://blog.debao.me/images/ST-LINK_V2_Clone_Header.png"&gt;&lt;/p&gt;
&lt;p&gt;图片来源：https://stm32-base.org/guides/connecting-your-debugger.html&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不管几针，都是要接到STM32的对应的引脚上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="st-link"&gt;烧写器ST-Link&lt;/h3&gt;
&lt;h4 id="st-link_1"&gt;ST-LINK&lt;/h4&gt;
&lt;p&gt;&lt;img alt="st-link-v2" src="https://blog.debao.me/images/st-link-v2.png"&gt;&lt;/p&gt;
&lt;h4 id="st-link-utility"&gt;ST-LINK Utility&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;与烧写器对应的上位机软件：STM32 ST-LINK Utility。Keil MDK-ARM 也使用 ST-LINK Utility 对 STM32进行烧写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="stm32cubeprogrammer"&gt;STM32CubeProgrammer&lt;/h4&gt;
&lt;p&gt;STM32CubeProgrammer 是一个独立的软件工具，它不依赖于 ST-LINK Utility 来执行其功能。对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ST-LINK Utility 是一个更简单、更专注的工具，主要用于通过 ST-LINK 调试器进行设备的编程和基本调试。&lt;/li&gt;
&lt;li&gt;STM32CubeProgrammer 提供了更广泛的功能，不仅支持 ST-LINK，还支持其他调试适配器和通信协议，同时集成了更多高级功能，例如安全编程和更复杂的内存操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="st-link-j-link"&gt;ST-Link 与 J-Link&lt;/h3&gt;
&lt;p&gt;ST-Link 功能有限，但是便宜！J-Link功能强&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ST-Link&lt;/th&gt;
&lt;th&gt;J-Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;厂商&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;STMicroelectronics&lt;/td&gt;
&lt;td&gt;SEGGER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;主要针对 STM32 系列&lt;/td&gt;
&lt;td&gt;支持多种架构，如 ARM Cortex-M/A/R, RX, PPC, MIPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;主要是 SWD&lt;/td&gt;
&lt;td&gt;JTAG, SWD, Fine, cJTAG, SPI 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基本功能：下载、调试、单步执行等&lt;/td&gt;
&lt;td&gt;包括高级功能：实时终端、系统查看器、无限断点等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;价格&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较低&lt;/td&gt;
&lt;td&gt;较高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;软件支持&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;STM32CubeIDE, Keil, IAR, Eclipse&lt;/td&gt;
&lt;td&gt;Ozone Debugger, J-Flash, 多数第三方IDE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;STM32开发、预算有限的项目&lt;/td&gt;
&lt;td&gt;多平台开发、需要高级调试功能的复杂项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="boot"&gt;Boot引脚&lt;/h2&gt;
&lt;p&gt;STM32 微控制器系列通常具有一个或多个用于控制启动模式的引脚，称为 BOOT 引脚。这些 BOOT 引脚的状态（高电平或低电平）在微控制器上电重置时决定了 CPU 从哪里开始执行代码。这一功能对于程序开发、调试以及固件升级非常重要。&lt;/p&gt;
&lt;p&gt;对于大多数 STM32 微控制器，常见的配置包括 BOOT0 和有时的 BOOT1 引脚。具体的 BOOT 引脚配置和行为可能会根据不同的 STM32 系列和具体型号有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BOOT0: 这是最常见的启动模式选择引脚。它通常需要在上电或复位时设置为高电平或低电平，以选择启动模式。&lt;/li&gt;
&lt;li&gt;BOOT1（如果存在）: 这个引脚与 BOOT0 结合使用，提供更多的启动配置选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;启动模式&lt;/h3&gt;
&lt;p&gt;STM32 微控制器的启动模式通常可以分为以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主闪存模式（Main Flash Memory）:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 BOOT0 设置为低电平时，微控制器从主闪存（用户程序存储区）启动。
这是大多数应用程序的正常运行模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统内存模式（System Memory）:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 BOOT0 设置为高电平（并且 BOOT1 为低电平，如果有的话）时，微控制器从系统内存启动。
系统内存通常包含了一个由 ST 提供的引导加载程序（bootloader），可用于通过特定的通信接口（如 USART、USB、CAN 等）进行固件升级。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌入式SRAM模式（Embedded SRAM）:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在某些 STM32 配置中，当 BOOT0 和 BOOT1 都设置为高电平时，微控制器可能从内嵌的 SRAM 启动。这种模式主要用于特殊的调试目的。&lt;/p&gt;
&lt;h2 id="esp32"&gt;与 ESP32对比&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ESP32 不是ARM架构！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ESP32&lt;/th&gt;
&lt;th&gt;STM32&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;制造商&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Espressif Systems&lt;/td&gt;
&lt;td&gt;STMicroelectronics&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;处理器架构&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Xtensa LX6 微处理器&lt;/td&gt;
&lt;td&gt;ARM Cortex-M 系列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心数和频率&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;双核，最高 240 MHz&lt;/td&gt;
&lt;td&gt;从单核到双核，频率从 48 MHz 到 480 MHz 不等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;内置无线&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Wi-Fi 802.11 b/g/n, 蓝牙 4.2/BLE&lt;/td&gt;
&lt;td&gt;多数型号无内置无线，STM32WB 系列支持蓝牙和其他无线通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;内存&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;520 KB SRAM, 外部通过 SPI 连接的 Flash&lt;/td&gt;
&lt;td&gt;RAM 从几 KB 到 1 MB 以上，Flash 从几十 KB 到几 MB 不等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;外设&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GPIO, ADC, DAC, UART, SPI, I2C, CAN, Ethernet MAC&lt;/td&gt;
&lt;td&gt;GPIO, ADC, DAC, UART, SPI, I2C, USB, CAN, Ethernet 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;低功耗模式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持深度睡眠模式&lt;/td&gt;
&lt;td&gt;提供丰富的低功耗模式，适用于超低功耗应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;开发环境&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ESP-IDF, Arduino IDE, MicroPython&lt;/td&gt;
&lt;td&gt;STM32CubeIDE, Keil, IAR, Arduino IDE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;应用领域&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;物联网设备，智能家居，智能城市&lt;/td&gt;
&lt;td&gt;广泛的应用，包括工业控制、汽车电子、低功耗便携设备等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_5"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://wiki.st.com/stm32mcu/wiki/STM32CubeIDE&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="STM32"></category></entry><entry><title>FPGA小记</title><link href="https://blog.debao.me/2024/04/notes-on-fpga/" rel="alternate"></link><published>2024-04-16T19:04:00+08:00</published><updated>2024-04-16T19:04:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-04-16:/2024/04/notes-on-fpga/</id><summary type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-eda-softwares/"&gt;EDA软件小记&lt;/a&gt;，继续学习。&lt;/p&gt;
&lt;p&gt;FPGA（Field Programmable Gate Array 现场可编程门阵列）是一种高度灵活的数字集成电路，广泛应用于多种行业和技术领域。&lt;/p&gt;
&lt;h2 id="_1"&gt;知 …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-eda-softwares/"&gt;EDA软件小记&lt;/a&gt;，继续学习。&lt;/p&gt;
&lt;p&gt;FPGA（Field Programmable Gate Array 现场可编程门阵列）是一种高度灵活的数字集成电路，广泛应用于多种行业和技术领域。&lt;/p&gt;
&lt;h2 id="_1"&gt;知名厂家&lt;/h2&gt;
&lt;p&gt;一些知名的FPGA厂家：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMD Xilinx：/ˈzaɪ.lɪŋks/&lt;/li&gt;
&lt;li&gt;Intel (前Altera)：/ˈæl.tɛr.ə/&lt;/li&gt;
&lt;li&gt;Microchip Technology（前 Microsemi, 前Actel）：&lt;/li&gt;
&lt;li&gt;Lattice Semiconductor：&lt;/li&gt;
&lt;li&gt;Achronix：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列个表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FPGA 厂家&lt;/th&gt;
&lt;th&gt;FPGA 系列&lt;/th&gt;
&lt;th&gt;开发环境&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMD Xilinx /ˈzaɪ.lɪŋks/&lt;/td&gt;
&lt;td&gt;Virtex, Kintex, Artix, Zynq&lt;/td&gt;
&lt;td&gt;Vivado /vɪˈvɑː.doʊ/ Design Suite, Vitis /ˈvaɪ.tɪs/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel (前 Altera /ˈæl.tɛr.ə/)&lt;/td&gt;
&lt;td&gt;Stratix, Arria, Cyclone&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microchip (前 Microsemi, 前 Actel)&lt;/td&gt;
&lt;td&gt;PolarFire, SmartFusion2, IGLOO2, RTG4&lt;/td&gt;
&lt;td&gt;Libero SoC Design Suite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lattice Semiconductor&lt;/td&gt;
&lt;td&gt;Mach, LatticeECP3, iCE40&lt;/td&gt;
&lt;td&gt;Lattice Diamond, Radiant Software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Achronix&lt;/td&gt;
&lt;td&gt;Speedster7t&lt;/td&gt;
&lt;td&gt;Achronix CAD Environment (ACE)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="intel"&gt;Intel&lt;/h3&gt;
&lt;p&gt;对于Intel，FPGA的几个系列：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系列名称&lt;/th&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;常见应用领域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agilex&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;最新一代的高性能FPGA系列&lt;/td&gt;
&lt;td&gt;超高性能、能效优化&lt;/td&gt;
&lt;td&gt;数据中心加速、高速网络、AI加速&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stratix&lt;/strong&gt; /ˈstræ.tɪks/&lt;/td&gt;
&lt;td&gt;Stratix: 2002&lt;br&gt;Stratix II: 2004&lt;br&gt;Stratix III: 2007&lt;br&gt;Stratix IV: 2008&lt;br&gt;Stratix V: 2010&lt;br&gt;Stratix 10: 2016&lt;/td&gt;
&lt;td&gt;高端FPGA系列，提供最高性能&lt;/td&gt;
&lt;td&gt;高性能、高集成度&lt;/td&gt;
&lt;td&gt;数据中心、高性能计算、网络基础设备、军事系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Arria&lt;/strong&gt; /ˈɑː.ri.ə/&lt;/td&gt;
&lt;td&gt;Arria GX: 2008&lt;br&gt;Arria II: 2009&lt;br&gt;&lt;strong&gt;Arria V: 2011&lt;/strong&gt;&lt;br&gt;Arria 10: 2013&lt;br&gt;Arria V GZ: 2013&lt;/td&gt;
&lt;td&gt;中高端FPGA系列，性能与成本平衡&lt;/td&gt;
&lt;td&gt;性能优良、成本效益较高&lt;/td&gt;
&lt;td&gt;无线通信、广播、数据处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cyclone&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cyclone: 2002&lt;br&gt;Cyclone II: 2004&lt;br&gt;Cyclone III: 2007&lt;br&gt;&lt;strong&gt;Cyclone IV: 2009&lt;/strong&gt;&lt;br&gt;Cyclone V: 2012&lt;br/&gt;&lt;strong&gt;Cyclone 10: 2017&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;成本和功耗敏感的低端FPGA系列&lt;/td&gt;
&lt;td&gt;成本效益高、低功耗&lt;/td&gt;
&lt;td&gt;消费电子、工业控制、汽车电子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MAX&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;MAX 7000: 1996&lt;br&gt;MAX 3000A: 1997&lt;br&gt;MAX II: 2004&lt;br&gt;MAX V: 2010&lt;br&gt;MAX 10: 2013&lt;/td&gt;
&lt;td&gt;CPLD系列，适用于简单的逻辑集成&lt;/td&gt;
&lt;td&gt;小型化、低功耗&lt;/td&gt;
&lt;td&gt;简单逻辑控制、I/O扩展、设备管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SoC FPGA&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cyclone V SoC: 2012&lt;br&gt;Arria V SoC: 2013&lt;br&gt;Arria 10 SoC: 2016&lt;/td&gt;
&lt;td&gt;结合ARM处理器和FPGA的产品&lt;/td&gt;
&lt;td&gt;处理器功能强大、可编程灵活&lt;/td&gt;
&lt;td&gt;嵌入式系统、需要硬件加速的应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Quartus Prime Lite是 Intel 提供的免费 FPGA 设计软件版本，主要支持低成本 FPGA 设备。它包括设计和编程的基本功能，但在某些高级功能和设备支持方面有所限制。它支持的系列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arria II&lt;/li&gt;
&lt;li&gt;Cyclone IV&lt;/li&gt;
&lt;li&gt;Cyclone V&lt;/li&gt;
&lt;li&gt;Cyclone 10 LP&lt;/li&gt;
&lt;li&gt;MAX II, MAX V&lt;/li&gt;
&lt;li&gt;MAX 10&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fpga"&gt;FPGA 组成&lt;/h2&gt;
&lt;p&gt;FPGA的主要组成部分：可配置逻辑块，输入输出块、互联网络&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件分类&lt;/th&gt;
&lt;th&gt;英文名称&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;th&gt;特点或组成元素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可配置逻辑块/逻辑阵列块&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CLBs (Configurable Logic Blocks) / LABs (Logic Array Blocks)&lt;/td&gt;
&lt;td&gt;核心组成部分，执行各种逻辑功能&lt;/td&gt;
&lt;td&gt;包括查找表（LUTs）、寄存器、逻辑门等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;输入/输出块&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;IOBs (Input/Output Blocks)&lt;/td&gt;
&lt;td&gt;链接FPGA与外界，负责数据输入和输出&lt;/td&gt;
&lt;td&gt;支持不同电压和信号标准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;互连网络&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Interconnection Network&lt;/td&gt;
&lt;td&gt;连接FPGA内部的各个逻辑和功能块，传输数据&lt;/td&gt;
&lt;td&gt;路由通道、交叉开关、可编程连接点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;时钟管理模块&lt;/td&gt;
&lt;td&gt;Clock Management Modules&lt;/td&gt;
&lt;td&gt;提供和管理时钟信号，同步操作&lt;/td&gt;
&lt;td&gt;包括PLLs和时钟分配网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特定功能块&lt;/td&gt;
&lt;td&gt;Specialized Function Blocks&lt;/td&gt;
&lt;td&gt;优化特定应用的性能和资源使用&lt;/td&gt;
&lt;td&gt;如DSP块、高速串行接口、内置RAM块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;配置与控制逻辑&lt;/td&gt;
&lt;td&gt;Configuration and Control Logic&lt;/td&gt;
&lt;td&gt;管理配置过程，包括加载配置数据至逻辑和功能块&lt;/td&gt;
&lt;td&gt;确保FPGA按设计运行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="fpga_1"&gt;FPGA 开发流程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="fpga-development-process.png" src="https://blog.debao.me/images/fpga-development-process.png"&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;开发阶段&lt;/th&gt;
&lt;th&gt;Intel 使用的工具&lt;/th&gt;
&lt;th&gt;Xilinx 使用的工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;设计输入&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;td&gt;Vivado Design Suite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能仿真&lt;/td&gt;
&lt;td&gt;ModelSim-Intel Edition&lt;/td&gt;
&lt;td&gt;Vivado Simulator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;合成（Synthesis）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;td&gt;Vivado Design Suite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;布局布线（ Placement/Routing）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;td&gt;Vivado Design Suite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;时序分析&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;td&gt;Vivado Timing Analyzer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;生成比特流&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intel Quartus Prime&lt;/td&gt;
&lt;td&gt;Vivado Design Suite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;硬件加载（配置）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intel Quartus Programmer&lt;/td&gt;
&lt;td&gt;Vivado Hardware Manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;调试与优化&lt;/td&gt;
&lt;td&gt;SignalTap II Logic Analyzer&lt;/td&gt;
&lt;td&gt;Vivado Logic Analyzer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文档与发布&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_2"&gt;设计输入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;硬件描述语言(HDL)编程：&lt;ul&gt;
&lt;li&gt;常用的 VHDL和Verilog&lt;/li&gt;
&lt;li&gt;以及更先进的SystemVerilog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高级综合工具：&lt;ul&gt;
&lt;li&gt;高级综合工具HLS(High-Level Synthesis)：比如 AMD Xilinx Vivado HLS，Intel HLS Compiler 允许C/C++，而后转成HDL代码。&lt;/li&gt;
&lt;li&gt;模型驱动开发：比如Matlab或Simulink，通过模型或仿真来生成可在FPGA上运行的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形化设计&lt;ul&gt;
&lt;li&gt;FPGA设计软件：通过拖动不同的模块来创建设计&lt;/li&gt;
&lt;li&gt;封装好的IP核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嵌入式软件开发&lt;ul&gt;
&lt;li&gt;软核处理器：比如AMD Xilinx的MicroBlaze和Intel的Nios II，是FPGA内实现的软核，可以运行C/C++代码，实现软件与硬件集成&lt;/li&gt;
&lt;li&gt;操作系统支持：在FPGA上运行精良及系统比如FreeRTOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="synthesis"&gt;合成（Synthesis）&lt;/h3&gt;
&lt;p&gt;合成 又分为几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译 (Compilation) - 这一步骤涉及将设计者使用硬件描述语言（如VHDL或Verilog）编写的代码，转换为更低级的表示形式（例如，门级网表）。这是合成过程的一部分，目的是解析和优化源代码，准备进行下一步的逻辑映射。&lt;/li&gt;
&lt;li&gt;逻辑合成 (Logic Synthesis) - 在这个阶段，编译后的代码被进一步转换为逻辑门和电路的集合。这包括优化逻辑以减少所需资源的使用和提高性能。&lt;/li&gt;
&lt;li&gt;映射 (Mapping) - 映射步骤涉及将合成后的门级网表映射到FPGA的具体逻辑资源上，如查找表(LUTs)、触发器(Flip-Flops)和其他可配置逻辑块(CLBs)。这个过程需要 &lt;strong&gt;考虑FPGA的物理架构&lt;/strong&gt;，确保设计有效利用FPGA的资源，并满足时序和功能要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;开发环境&lt;/h2&gt;
&lt;h3 id="ide"&gt;首先，各家有自己的IDE环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AMD Xilinx Vivado: 针对 Xilinx FPGA 设计的开发环境，包括合成、放置和布线、仿真等工具。&lt;/li&gt;
&lt;li&gt;Intel Quartus Prime: 用于 Intel FPGA 设计的开发平台，同样提供全套设计、仿真和优化工具。&lt;/li&gt;
&lt;li&gt;Microsemi Libero: 针对 Microsemi FPGA 设计的软件工具。&lt;/li&gt;
&lt;li&gt;Lattice Diamond: 用于 Lattice FPGA 设计的软件环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;仿真环境&lt;/h3&gt;
&lt;p&gt;ModelSim 是一款广泛使用的硬件仿真工具，由 Mentor Graphics（现为 Siemens EDA 的一部分）开发。它支持 VHDL、Verilog 和 SystemVerilog 等硬件描述语言，用于在 FPGA 和 ASIC 设计流程中模拟和验证数字系统的行为。&lt;/p&gt;
&lt;h3 id="_5"&gt;合成&lt;/h3&gt;
&lt;p&gt;一些高级综合工具，它专门为 FPGA 设计提供支持，但它本身并不限定于特定品牌的 FPGA：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synopsys Synplify：高性能合成工具，适用于 FPGA 和 ASIC。支持 Verilog和VHDL语言。&lt;/li&gt;
&lt;li&gt;Candence Genus Snthesis Solution，提供高级综合和优化功能，适用于复杂的ASIC和FPGA设计。支持Verilog、VHDL和SystemVerilog语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;合成完成后，仍然需要使用 厂家的EDA来完成后续的布局和布线（Place and Route）以及生成可用于 FPGA 编程的最终文件。确保了设计在特定硬件上的最优性能和资源利用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_6"&gt;开源工具&lt;/h3&gt;
&lt;p&gt;有些命令行工具：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具名称&lt;/th&gt;
&lt;th&gt;支持语言&lt;/th&gt;
&lt;th&gt;主要用途&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Icarus Verilog&lt;/td&gt;
&lt;td&gt;Verilog&lt;/td&gt;
&lt;td&gt;仿真&lt;/td&gt;
&lt;td&gt;- 免费开源&lt;br&gt; - 跨平台支持&lt;br&gt; - 社区支持良好&lt;/td&gt;
&lt;td&gt;- 只支持 Verilog&lt;br&gt; - 功能相对基础&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GHDL&lt;/td&gt;
&lt;td&gt;VHDL&lt;/td&gt;
&lt;td&gt;编译和仿真&lt;/td&gt;
&lt;td&gt;- 完全开源，使用 GCC 技术&lt;br&gt; - 提供良好的 VHDL 语言覆盖和符合性&lt;br&gt; - 支持多种操作系统&lt;/td&gt;
&lt;td&gt;- 没有集成的图形用户界面（GUI）&lt;br&gt; - 只支持 VHDL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verilator&lt;/td&gt;
&lt;td&gt;Verilog&lt;/td&gt;
&lt;td&gt;将 Verilog 转换为 C++/SystemC&lt;/td&gt;
&lt;td&gt;- 生成的仿真速度非常快&lt;br&gt; - 支持大规模复杂的设计&lt;br&gt; - 可与其他测试框架集成&lt;/td&gt;
&lt;td&gt;- 只支持 Verilog 的子集&lt;br&gt; - 缺少图形化界面和高级调试工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yosys&lt;/td&gt;
&lt;td&gt;Verilog&lt;/td&gt;
&lt;td&gt;逻辑综合&lt;/td&gt;
&lt;td&gt;- 强大的综合工具，支持 RTL Verilog&lt;br&gt; - 适用于 FPGA 和 ASIC 设计&lt;br&gt; - 可以与其他工具链集成&lt;/td&gt;
&lt;td&gt;- 主要支持 Verilog&lt;br&gt; - 可能缺乏一些先进的优化和分析功能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_7"&gt;配置（烧写）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不会编程，先了解下烧写还是可以的...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;各个厂家配置文件（待烧写文件）后缀均有不同&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;制造商&lt;/th&gt;
&lt;th&gt;比特流文件后缀&lt;/th&gt;
&lt;th&gt;烧写器工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AMD Xilinx&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;.bit, .bin&lt;/td&gt;
&lt;td&gt;Vivado Hardware Manager, Xilinx Platform Cable USB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Intel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;.sof, .pof, .jic&lt;/td&gt;
&lt;td&gt;Quartus Prime Programmer, USB-Blaster, USB-Blaster II&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Microsemi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;.stp&lt;/td&gt;
&lt;td&gt;FlashPro, Libero SoC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Lattice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;.bin, .jed&lt;/td&gt;
&lt;td&gt;Lattice Diamond Programmer, ispVM System&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;具体看一下Intel的比特流文件后缀:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sof (SRAM Object File) - 用于将配置直接加载到FPGA的SRAM中。&lt;/li&gt;
&lt;li&gt;.pof (Programmable Object File) - 用于永久存储配置到FPGA连接的外部设备（例如，EPROM或闪存）。&lt;/li&gt;
&lt;li&gt;.jic (JTAG Indirect Configuration File) - 用于通过JTAG接口对外部配置设备进行编程。&lt;/li&gt;
&lt;li&gt;.hex- 虽然用于记录二进制数据，Intel HEX 文件本身是文本格式，使用ASCII字符表示，便于阅读和编辑。每一行Intel HEX文件都称为一条“记录”。这条记录包括长度、地址、记录类型、数据和校验和等字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hex文件示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:10010000214601360121470136007EFE09D2190140
:100110002146017E17C20001FF5F16002148011928
:00000001FF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_8"&gt;烧写方式（配置模式）&lt;/h3&gt;
&lt;p&gt;FPGA有多种方式进行配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JTAG接口。需要JTAG线缆（烧写器）连接FPGA和计算机主机&lt;/li&gt;
&lt;li&gt;USB编程器。许多FPGA开发版会配备USB接口，允许适用USB连接进行配置。&lt;/li&gt;
&lt;li&gt;SD卡或其他存储介质。一些FPGA支持从SD卡或其他介质自动加载配置文件。&lt;/li&gt;
&lt;li&gt;通过外部设备（如微控制器）。FPGA 也可以通过外部微控制器进行烧写，该微控制器将配置文件从某种存储介质（如 SPI 闪存）加载到 FPGA。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以Intel FPGA为例，软件Quartus Prime Programmer有4种编程（programming）模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JTAG：同上&lt;/li&gt;
&lt;li&gt;In-Socket：将设备物理放置到有多个电气接触点的座中，这些触点和设备引脚对应，直接对设备配置存储器进行编程。用于批量编程或者设备安装到最终产品之前进行编程。使用专用设备（APU：Altera Programming Unit）&lt;/li&gt;
&lt;li&gt;Passive Serial：串行编程模式。通过几个信号线(DATA、CLOCK、nCONFIG、nSTATUS)顺序发送。速度慢，但硬件简单，成本低。发送方可以是Quartus Prime Programmer或者其他MCU设备。&lt;/li&gt;
&lt;li&gt;Active Serial：使用外部闪存来存储配置文件，FPGA上电时，自动加载配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;烧写工具与步骤&lt;/h3&gt;
&lt;p&gt;每个FPGA制造商都提供了配套的配置软件，用于烧写和调试FPGA。对于Intel FPGA：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quartus Prime Programmer - Quartus软件的一部分，用于配置和编程Intel FPGA。&lt;/li&gt;
&lt;li&gt;USB-Blaster 和 USB-Blaster II - 官方的JTAG下载电缆，支持配置和调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;烧写主要步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接FPGA开发板到计算机主机&lt;/li&gt;
&lt;li&gt;打开配置软件，并选择正确的配置文件&lt;/li&gt;
&lt;li&gt;选择目标设备，并确认所有连接和设置无误。&lt;/li&gt;
&lt;li&gt;启动烧写过程，并关注过程中的状态，确保无错误&lt;/li&gt;
&lt;li&gt;烧写完成后，重启FPGA设备以加载新的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jtag"&gt;关于JTAG&lt;/h3&gt;
&lt;p&gt;JTAG (Joint Test Action Group) 是一种广泛使用的标准，正式名称为 IEEE 1149.1，最初设计用于测试印刷电路板(PCB)上的连接故障，后来发展为一个功能强大的工具，用于芯片的编程、调试和测试。JTAG 不仅用于 FPGA 编程，也广泛应用于微处理器、微控制器等集成电路的调试。&lt;/p&gt;
&lt;p&gt;JTAG 使用一组标准化的信号线来传输数据至目标设备。通常包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCK（时钟）&lt;/li&gt;
&lt;li&gt;TMS（模式选择）&lt;/li&gt;
&lt;li&gt;TDI（数据输入）&lt;/li&gt;
&lt;li&gt;TDO（数据输出）&lt;/li&gt;
&lt;li&gt;TRST（可选的复位线）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这些线，可以直接向 FPGA 内部的配置存储器发送配置数据。&lt;/p&gt;
&lt;h2 id="_10"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Field-programmable_gate_array&lt;/li&gt;
&lt;li&gt;&lt;a href="https://knowledge.fpga-china.com/home/sjjq/info.html?id=120&amp;amp;catId=209"&gt;九个步骤完成FPGA开发全流程，每一步都不能少！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EE"></category><category term="FPGA"></category></entry></feed>