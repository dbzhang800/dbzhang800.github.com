<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>1+1=10 - CAx</title><link href="https://blog.debao.me/" rel="alternate"></link><link href="https://blog.debao.me/feeds/cax.atom.xml" rel="self"></link><id>https://blog.debao.me/</id><updated>2025-01-12T20:36:00+08:00</updated><subtitle>记记笔记，放松一下...</subtitle><entry><title>FreeCAD学习小记（二）</title><link href="https://blog.debao.me/2025/01/freecad-learning-notes-2/" rel="alternate"></link><published>2025-01-12T20:36:00+08:00</published><updated>2025-01-12T20:36:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2025-01-12:/2025/01/freecad-learning-notes-2/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="{filename}freecad-learning-notes-1.md"&gt;FreeCAD学习小记（一）&lt;/a&gt;，继续看看 FreeCAD 的python接口 与 PySide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyside"&gt;PySide 走马观花&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aboutqt"&gt;控制台下调出 aboutQt 对话框&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gui-app"&gt;Gui 和 App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;修改主窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workbench"&gt;添加自定义控制台（Workbench）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#freecad-freecadcmd"&gt;freecad 与 freecadcmd&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#freecadcmd"&gt;freecadcmd …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="{filename}freecad-learning-notes-1.md"&gt;FreeCAD学习小记（一）&lt;/a&gt;，继续看看 FreeCAD 的python接口 与 PySide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyside"&gt;PySide 走马观花&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aboutqt"&gt;控制台下调出 aboutQt 对话框&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gui-app"&gt;Gui 和 App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;修改主窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workbench"&gt;添加自定义控制台（Workbench）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#freecad-freecadcmd"&gt;freecad 与 freecadcmd&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#freecadcmd"&gt;freecadcmd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#api"&gt;API文档&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#app"&gt;APP 模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#document"&gt;Document 类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentobject"&gt;DocumentObject 类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expressions-framework"&gt;Expressions Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gui"&gt;Gui 模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gui-document"&gt;GUI Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objects"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#view"&gt;View 视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-framework"&gt;Command Framework?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workbench_1"&gt;workbench&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="pyside"&gt;PySide 走马观花&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;FreeCAD 早期使用 PyQt，2013年换成了 PySide，而后随着Qt5升级到PySide2，现在源码中已经适配到了PySide6。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FreeCAD 深度使用 Qt 和 PySide。FreeCAD 1.0 在 Windows下安装包使用的是 Qt 5.15.15和PySide2 5.15.15。&lt;/p&gt;
&lt;h3 id="aboutqt"&gt;控制台下调出 aboutQt 对话框&lt;/h3&gt;
&lt;p&gt;FreeCAD 提供了一个 Python 控制台，在该控制台下，我们可以直接输如python和pyside代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide2.QtWidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QMessageBox&lt;/span&gt;
&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aboutQt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1+1=10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;两行代码，即可调用Qt的关于对话框，显示效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="console" src="https://blog.debao.me/images/simu/freecad-console-pyside.png"&gt;&lt;/p&gt;
&lt;p&gt;注意，代码中我们调用了 FreeCAD 的 &lt;code&gt;Gui&lt;/code&gt; 模块，以获取当前的主窗口。当然，此处简单传入一个None也是可以的。&lt;/p&gt;
&lt;p&gt;注意，为了兼容PySide、PySide2、PySide6，FreeCAD做了如下变换：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;PySide2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PySide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;
&lt;span class="n"&gt;PySide2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PySide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;
&lt;span class="n"&gt;PySide2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtSvg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PySide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtSvg&lt;/span&gt;
&lt;span class="n"&gt;PySide2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtUiTools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PySide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtUiTools&lt;/span&gt;

&lt;span class="n"&gt;PySide2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtWidgets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PySide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;所以上面的代码，可以写作（建议写成？）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QMessageBox&lt;/span&gt;
&lt;span class="n"&gt;QMessageBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aboutQt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1+1=10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;除了在控制台下面直接输入，我们还可以将其保存到文件（一个名为 .FCMacro 文件），而后通过 菜单中的 &lt;code&gt;宏&lt;/code&gt; 来执行它。&lt;/p&gt;
&lt;p&gt;&lt;img alt="macro aboutQt" src="https://blog.debao.me/images/simu/freecad-macro-pyside.png"&gt;&lt;/p&gt;
&lt;h3 id="gui-app"&gt;Gui 和 App&lt;/h3&gt;
&lt;p&gt;这两个兄弟是 FreeCADGui 和 FreeCAD 的别名，控制台下容易验证它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Gui
&amp;lt;module&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FreeCADGui&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;App
&amp;lt;module&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FreeCAD&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;built-in&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;FreeCAD.Gui
&amp;lt;module&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FreeCADGui&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;另外，可以看出 FreeCAD.Gui 也是 FreeCADGui的别名。这些别名是在什么位置取的？我们可以从源码中找到...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在源码文件 &lt;code&gt;FreeCAD/src/Gui/FreeCADGuiInit.py&lt;/code&gt;中，有：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# shortcuts&lt;/span&gt;
&lt;span class="n"&gt;Gui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCADGui&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;和&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# init the gui&lt;/span&gt;

&lt;span class="c1"&gt;# signal that the gui is up&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GuiUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Gui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCADGui&lt;/span&gt;
&lt;span class="n"&gt;FreeCADGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Workbench&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workbench&lt;/span&gt;

&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWorkbench&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NoneWorkbench&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# init modules&lt;/span&gt;
&lt;span class="n"&gt;InitApplications&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# set standard workbench (needed as fallback)&lt;/span&gt;
&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activateWorkbench&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NoneWorkbench&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在源码 &lt;code&gt;FreeCAD/src/App/FreeCADInit.py&lt;/code&gt; 中，可以看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# some often used shortcuts (for lazy people like me  ;-)&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;
&lt;span class="n"&gt;Log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintLog&lt;/span&gt;
&lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintMessage&lt;/span&gt;
&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintError&lt;/span&gt;
&lt;span class="n"&gt;Wrn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintWarning&lt;/span&gt;
&lt;span class="n"&gt;Crt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintCritical&lt;/span&gt;
&lt;span class="n"&gt;Ntf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintNotification&lt;/span&gt;
&lt;span class="n"&gt;Tnf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrintTranslatedNotification&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_1"&gt;修改主窗口&lt;/h3&gt;
&lt;p&gt;上面的例子中通过Gui可以获得主窗口对象，根据PySide的经验，借助它，我们可以做试着做些简单的事情&lt;/p&gt;
&lt;p&gt;控制窗口全屏显示或正常显示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showFullScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showNormal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;改变标题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello 1+1=10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;也可以直接放置一个停靠窗口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QDockWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Dock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+1=10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addDockWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LeftDockWidgetArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="dock widget" src="https://blog.debao.me/images/simu/freecad-dockwidget.png"&gt;&lt;/p&gt;
&lt;h3 id="workbench"&gt;添加自定义控制台（Workbench）&lt;/h3&gt;
&lt;p&gt;先找找感觉，添加自定义控制台&lt;code&gt;Hello 1+1=10&lt;/code&gt;，并增加一个自定义的菜单，对应代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Workbench&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MenuText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello 1+1=10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWorkbench&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Std_Test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Std_Test2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Std_Test3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="workbench" src="https://blog.debao.me/images/simu/freecad-custom_workbench.png"&gt;&lt;/p&gt;
&lt;p&gt;对界面的所有操作，都在Gui模块中。&lt;/p&gt;
&lt;h2 id="freecad-freecadcmd"&gt;freecad 与 freecadcmd&lt;/h2&gt;
&lt;p&gt;FreeCAD 有两个可执行程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;freecad：界面程序&lt;/li&gt;
&lt;li&gt;freecadcmd：命令行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者是常用的主程序，源码的入口文件在：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;src/Main/MainGui.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;后者是一个全功能的命令行程序，入口文件位于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;src/Main/MainCmd.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;简单看一下后者&lt;/p&gt;
&lt;h3 id="freecadcmd"&gt;freecadcmd&lt;/h3&gt;
&lt;p&gt;FreeCADCmd 是 FreeCAD 的命令行模式（无图形界面模式），主要用于在没有图形用户界面（GUI）的情况下运行 FreeCAD 脚本、执行自动化任务、或者处理 CAD 文件。它适用于服务器环境、后台任务或只需要 FreeCAD 核心功能的场景。&lt;/p&gt;
&lt;p&gt;直接运行起来之后，它直接就是一个python命令行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;./&lt;/span&gt;&lt;span class="n"&gt;freecadcmd&lt;/span&gt;
&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Libs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0R39109&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;2024&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;contributors&lt;/span&gt;
&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;open-source&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;licensed&lt;/span&gt; &lt;span class="n"&gt;under&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;terms&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;LGPL2&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;Ctrl-Z&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="k"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;.&amp;gt;]&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ActiveDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Base&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BoundBox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ConfigDump&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ConfigGet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ConfigSet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Document&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DocumentObject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DocumentObjectExtension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DocumentObjectGroup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Extension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ExtensionContainer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GeoFeature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GeoFeatureGroupExtension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GroupExtension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GuiUp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LinkBaseExtension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Logger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Material&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Matrix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MeasureManager&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Metadata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OriginGroupExtension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ParamGet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Placement&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PropertyContainer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PropertyType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Qt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ReturnType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ScaleType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StringHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StringID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Units&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ModDirs__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cmake__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__path__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__unit_test__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_importFromFreeCAD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;activeDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;addDocumentObserver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;addExportType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;addImportType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;changeExportModule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;changeImportModule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;checkAbort&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;checkLinkDepth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;closeActiveTransaction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;closeDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getActiveTransaction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getDependentObjects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getExportType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getHelpDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getHomePath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getImportType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getLibraryDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getLinksTo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getLogLevel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getResourceDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getTempPath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getUserAppDataDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getUserCachePath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getUserConfigDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;getUserMacroDir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;isRestoring&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;listDocuments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loadFile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;newDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;openDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;removeDocumentObserver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saveParameter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setActiveDocument&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setActiveTransaction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setLogLevel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;在这个界面下，可以绘制一个立方体（操作的核心类是 document）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;./&lt;/span&gt;&lt;span class="n"&gt;freecadcmd&lt;/span&gt;
&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Libs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0R39109&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;2024&lt;/span&gt; &lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;contributors&lt;/span&gt;
&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;open-source&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;licensed&lt;/span&gt; &lt;span class="n"&gt;under&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;terms&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;LGPL2&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FreeCAD&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;Ctrl-Z&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="k"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;.&amp;gt;]&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Part::Box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saveAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.FCStd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;还可以先写一个python脚本 &lt;code&gt;mytest.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TestDoc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Part::Box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saveAs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.FCStd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;而后直接执行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;freecadcmd mytest.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="api"&gt;API文档&lt;/h2&gt;
&lt;p&gt;似乎很不完整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://freecad.github.io/SourceDoc/modules.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="app"&gt;APP 模块&lt;/h3&gt;
&lt;h4 id="document"&gt;Document 类&lt;/h4&gt;
&lt;p&gt;Document 是 FreeCAD 数据结构的顶层容器，代表一个 FreeCAD 项目或文件（通常以 .FCStd 格式保存）。它是一个逻辑上的工作空间，包含了所有的建模对象、参数、视图信息等。&lt;/p&gt;
&lt;p&gt;每个 FreeCAD 文档都可以包含多个对象（DocumentObject），这些对象构成了文档的内容，例如几何体、草图、装配体等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理和组织 DocumentObject。&lt;/li&gt;
&lt;li&gt;提供文件的保存、加载和重新计算功能。&lt;/li&gt;
&lt;li&gt;允许通过脚本访问和操作项目中的所有对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;doc.addObject(type, name) - 向文档添加一个新对象。&lt;/li&gt;
&lt;li&gt;doc.getObject(name) - 根据名称获取对象。&lt;/li&gt;
&lt;li&gt;doc.removeObject(name) - 删除指定名称的对象。&lt;/li&gt;
&lt;li&gt;doc.recompute() - 重新计算文档中的所有对象。&lt;/li&gt;
&lt;li&gt;doc.saveAs(filename) - 保存文档到指定路径。&lt;/li&gt;
&lt;li&gt;doc.save() - 保存文档（覆盖当前路径）。&lt;/li&gt;
&lt;li&gt;doc.Label - 获取或设置文档的标签。&lt;/li&gt;
&lt;li&gt;doc.Objects - 返回文档中所有对象的列表。&lt;/li&gt;
&lt;li&gt;doc.getObjectsByLabel(label) - 根据标签获取对象。&lt;/li&gt;
&lt;li&gt;doc.getDependentDocuments(objName) - 获取指定对象的依赖关系。&lt;/li&gt;
&lt;li&gt;doc.undo() - 撤销上一步操作。&lt;/li&gt;
&lt;li&gt;doc.redo() - 重做上一步操作。&lt;/li&gt;
&lt;li&gt;doc.clear() - 清空文档中的所有内容。&lt;/li&gt;
&lt;li&gt;doc.isModified() - 检查文档是否已被修改。&lt;/li&gt;
&lt;li&gt;doc.FileName - 返回文档的文件路径。&lt;/li&gt;
&lt;li&gt;doc.ActiveObject - 当前活动的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="documentobject"&gt;DocumentObject 类&lt;/h4&gt;
&lt;p&gt;DocumentObject 是 Document 中包含的实际对象，每个对象代表具体的建模元素或功能，例如一个立方体、草图、约束、几何体等。&lt;/p&gt;
&lt;p&gt;DocumentObject 是 FreeCAD 的核心建模单位，所有的几何体、关系和属性都存储在这些对象中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义具体的建模元素（如立方体、球体、草图等）。&lt;/li&gt;
&lt;li&gt;提供对象的属性（如形状、尺寸、位置等）。&lt;/li&gt;
&lt;li&gt;支持对象之间的关联和依赖关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;obj.Name - 对象的唯一标识名称。&lt;/li&gt;
&lt;li&gt;obj.Label - 对象的标签（可用于显示）。&lt;/li&gt;
&lt;li&gt;obj.TypeId - 对象的类型（如 Part::Box）。&lt;/li&gt;
&lt;li&gt;obj.Shape - 获取对象的几何形状（如立方体的形状）。&lt;/li&gt;
&lt;li&gt;obj.Placement - 获取或设置对象的位置和方向。&lt;/li&gt;
&lt;li&gt;obj.ViewObject - 控制对象的显示属性（颜色、透明度等）。&lt;/li&gt;
&lt;li&gt;obj.Visibility - 设置对象是否可见。&lt;/li&gt;
&lt;li&gt;obj.touch() - 标记对象为已修改（需要重新计算）。&lt;/li&gt;
&lt;li&gt;obj.recompute() - 重新计算对象。&lt;/li&gt;
&lt;li&gt;obj.getLinkedObject() - 获取与对象链接在一起的对象。&lt;/li&gt;
&lt;li&gt;obj.Document - 获取对象所属的文档。&lt;/li&gt;
&lt;li&gt;obj.getParentGeoFeatureGroup() - 获取对象所在的父组。&lt;/li&gt;
&lt;li&gt;obj.isDerivedFrom(type) - 检查对象是否派生自某类型。&lt;/li&gt;
&lt;li&gt;obj.PropertiesList - 返回对象的所有属性。&lt;/li&gt;
&lt;li&gt;obj.getPropertyByName(name) - 根据属性名称获取值。&lt;/li&gt;
&lt;li&gt;obj.addObject(type, name) - 添加子对象。&lt;/li&gt;
&lt;li&gt;obj.removeObject(name) - 删除子对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="expressions-framework"&gt;Expressions Framework&lt;/h4&gt;
&lt;p&gt;FreeCAD 自己实现了一个功能模块。尽管它使用 Python 的语法和表达式风格，但它是专门为 FreeCAD 的参数化建模功能设计的，并深度集成到了 FreeCAD 的属性管理和文档系统中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# App.setActiveDocument(&amp;quot;Hello&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;# App.ActiveDocument=App.getDocument(&amp;quot;Hello&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;# Gui.ActiveDocument=Gui.getDocument(&amp;quot;Hello&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Part::Box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MyCube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;span class="c1"&gt;# set to 100 mm&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Length *2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Width / 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recompute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;支持单位，所以可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2 in&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recompute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;核心依赖于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property 系统：管理对象的属性，支持绑定表达式并动态计算值。&lt;/li&gt;
&lt;li&gt;Expression Evaluator：解析表达式，计算属性值。建立属性之间的依赖关系，确保重计算时值的正确性。&lt;/li&gt;
&lt;li&gt;Unit Framework：处理单位并确保单位一致性。支持物理单位（如 mm, in, deg）的自动转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gui"&gt;Gui 模块&lt;/h3&gt;
&lt;p&gt;FreeCADGui（即Gui）是 FreeCAD 中的图形用户界面模块，用于管理和操作 FreeCAD 的 GUI（图形用户界面）部分。&lt;/p&gt;
&lt;p&gt;它与 FreeCAD 核心模块（即App模块）不同，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FreeCAD 主要用于后台建模和管理文档数据，而 &lt;/li&gt;
&lt;li&gt;FreeCADGui 则负责与用户交互的可视化相关内容，例如 3D 视图、工具栏、任务面板、属性编辑等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="gui-document"&gt;GUI Document&lt;/h4&gt;
&lt;p&gt;GUI Document 是一个与普通文档（Document）相对应的图形用户界面表示。它由 FreeCAD 的 FreeCADGui.ActiveDocument 管理，负责处理文档中的对象如何在 FreeCAD 的图形界面（如 3D 视图、任务面板、属性面板等）中显示和交互。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveDocument&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="objects"&gt;Objects&lt;/h4&gt;
&lt;p&gt;和App中的DocumentObject对应，GUI中提供显示支持。&lt;/p&gt;
&lt;p&gt;获取当前对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveDocument&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShapeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;获取指定名称对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveDocument&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MyCube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;获取顶层对象列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveDocument&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeRootObjects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="view"&gt;View 视图&lt;/h4&gt;
&lt;p&gt;获取视图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Gui.ActiveDocument.ActiveView
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;设置视角（如顶部视图、正视图、轴测视图等）。&lt;/li&gt;
&lt;li&gt;调整视图（如缩放、平移、适应所有对象）。&lt;/li&gt;
&lt;li&gt;获取鼠标及屏幕坐标信息。&lt;/li&gt;
&lt;li&gt;捕获当前视图为图像。&lt;/li&gt;
&lt;li&gt;获取用户交互信息（如鼠标点击位置）。&lt;/li&gt;
&lt;li&gt;实时控制相机和视图参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveDocument&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveView&lt;/span&gt;

&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewTop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewBottom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewFront&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewAxometric&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="command-framework"&gt;Command Framework?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Qt Creator 内部似乎也实现了类似的 Command 框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Qt中菜单项和工具按钮，都是QAction，在FreeCAD中，为了让QAction和workbench等模组解耦，它定义了一套所谓的命令框架（Command Framework）。&lt;/p&gt;
&lt;p&gt;在C++下，Open命令定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;OpenCommand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;OpenCommand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Std_Open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// set up menu text, status tip, ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sMenuText&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;amp;Open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sToolTipText&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Open a file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sWhatsThis&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Open a file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sStatusTip&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Open a file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sPixmap&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// name of a registered pixmap&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sAccel&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Shift+P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// or &amp;quot;P&amp;quot; or &amp;quot;P, L&amp;quot; or &amp;quot;Ctrl+X, Ctrl+C&amp;quot; for a sequence&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;activated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// make a filter of all supported file formats&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;QStringList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FileList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QFileDialog&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getOpenFileNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;QString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QStringList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;getGuiApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;latin1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="workbench_1"&gt;workbench&lt;/h4&gt;
&lt;p&gt;Workbench 主要配置菜单栏、工具栏、命令、停靠窗口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setupMenuBar()&lt;/li&gt;
&lt;li&gt;setupToolBars()&lt;/li&gt;
&lt;li&gt;setupCommandBars()&lt;/li&gt;
&lt;li&gt;setupDockWindows()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://wiki.freecad.org/PySide&lt;/li&gt;
&lt;li&gt;https://freecad.github.io/SourceDoc/modules.html&lt;/li&gt;
&lt;li&gt;https://github.com/FreeCAD/FreeCAD&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/FreeCAD/FreeCAD-library&lt;/li&gt;
&lt;li&gt;https://github.com/shaise/FreeCAD_FastenersWB&lt;/li&gt;
&lt;li&gt;https://github.com/boltsparts/boltsparts&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category><category term="Python"></category><category term="pyside"></category></entry><entry><title>FreeCAD学习小记（一）</title><link href="https://blog.debao.me/2025/01/freecad-learning-notes-1/" rel="alternate"></link><published>2025-01-07T00:27:00+08:00</published><updated>2025-01-07T00:27:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2025-01-07:/2025/01/freecad-learning-notes-1/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;FreeCAD 是一款开源的三维建模软件，主要用于参数化建模和工程设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;源码？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;巨人肩膀（第三方库）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;代码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;构建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#workbench"&gt;工作台 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;FreeCAD 是一款开源的三维建模软件，主要用于参数化建模和工程设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;源码？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;巨人肩膀（第三方库）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;代码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;构建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#workbench"&gt;工作台（Workbench）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-part-design"&gt;Part 与 Part Design&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#csg-brep"&gt;CSG 与 BRep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;操作对比&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;历史&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Cas.CADE 是一个商业软件开发框架，包含了一个几何建模内核（或称 CAD 内核）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;2000年，Cas.CADE框架以开源许可证发布，并更名为 OpenCASCADE。&lt;strong&gt;这一开源化使得开发一款开源的 3D CAD 软件成为可能&lt;/strong&gt;，不然，从零开始编写一个 CAD 内核工作量将极为庞大。&lt;/li&gt;
&lt;li&gt;2001年1月，FreeCAD &lt;strong&gt;项目启动&lt;/strong&gt;，它由从事 Cas.CADE 项目的 Jürgen Riegel 开发。&lt;/li&gt;
&lt;li&gt;2005年，FreeCAD 只用不再用OpenCasCade的文档框架， 只用其CAD内核。&lt;/li&gt;
&lt;li&gt;2007年，切换到 Qt4&lt;/li&gt;
&lt;li&gt;2009年4月，版本0.7发布，它是第一个包含草稿模块的版本。零件模块提供了简单的 CSG 工作流程。&lt;/li&gt;
&lt;li&gt;2011年5月，版本0.11发布，引入了新的&lt;strong&gt;零件设计&lt;/strong&gt;工作台，其中包括 Pad、Pocket、Fillet 和 Chamfer 等工具&lt;/li&gt;
&lt;li&gt;2012年1月，版本0.12发布，具有更完整的 Sketcher 工作台。&lt;/li&gt;
&lt;li&gt;2014年7月，版本0.14发布，用PySide取代了PyQt，FreeCAD完全支持LGPL协议（&lt;strong&gt;FreeCAD is now fully LGPL&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;2024年11月，FreeCAD 1.0 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;源码？&lt;/h2&gt;
&lt;h3 id="_3"&gt;巨人肩膀（第三方库）&lt;/h3&gt;
&lt;p&gt;打开About对话框，能看到它所用的库，很多都很眼熟&lt;/p&gt;
&lt;p&gt;&lt;img alt="freecad" src="https://blog.debao.me/images/simu/freecad-about.png"&gt;&lt;/p&gt;
&lt;p&gt;以下四个属于支柱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open CASCADE （ CAD 内核）&lt;/li&gt;
&lt;li&gt;Coin3D（与 Open Inventor 兼容API的3D库）&lt;/li&gt;
&lt;li&gt;Qt（GUI框架）&lt;/li&gt;
&lt;li&gt;Python（脚本语言）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python和Qt，用在核心和几乎所有模块中。FreeCAD创建和管理所有的实体几何，采用了OpenCasCade；而管理3D视图，采用了coin3D。&lt;/p&gt;
&lt;h3 id="_4"&gt;代码结构&lt;/h3&gt;
&lt;p&gt;FreeCAD代码主要采用C++编程，但是重度依赖Python。FreeCAD的功能里，非常大的部分都提供相应的Python包装。FreeCAD的核心哲学之一，就是对任何C++开发的新属性，都要给出Python接口。&lt;/p&gt;
&lt;p&gt;FreeCAD的几乎所有功能都分成了两部分，称为App和Gui。&lt;/p&gt;
&lt;p&gt;源代码的基本文件夹结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;App&lt;/strong&gt;：包含FreeCAD的控制台模式应用。它定义了基本结构，它也为文档对象定义基础类。这些类被各个模块继承，用于创建各自的类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base&lt;/strong&gt;：包含FreeCAD里到处都用得到的核心功能性东西：3D向量，单位，矩阵，位置，等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gui&lt;/strong&gt;：包含FreeCAD在GUI模式下的应用。它定义3D视图，也包含很多工具和函数，被工作台调用，用来与接口和3D视图互动。它为视图提供者定义基础类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doc&lt;/strong&gt;：包含一个文件，从FreeCAD的wiki生成的Qt帮助文件，是一个大全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mod&lt;/strong&gt;：包含所有的模块。它们本身又进一步分割为App和Gui（除了python模块，它们并不总是清晰地遵从那条约定）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;构建&lt;/h3&gt;
&lt;p&gt;FreeCAD 使用 cmake构建。构建时，所依赖的第三库需要就位&lt;/p&gt;
&lt;p&gt;&lt;img alt="compilation" src="https://blog.debao.me/images/simu/FreeCAD_source_compilation_workflow.svg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://wiki.freecad.org/Compile_on_Linux&lt;/li&gt;
&lt;li&gt;https://wiki.freecad.org/Compile_on_Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;使用&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo" src="https://blog.debao.me/images/simu/freecad-demo-1.png"&gt;&lt;/p&gt;
&lt;h3 id="workbench"&gt;工作台（Workbench）&lt;/h3&gt;
&lt;p&gt;FreeCAD 与许多现代设计应用程序（例如 Revit 或 CATIA）一样，基于 工作台（Workbench） 的概念。&lt;/p&gt;
&lt;p&gt;工作台可以被看作是为完成特定任务而特别分组的一组工具。&lt;/p&gt;
&lt;p&gt;当从一个工作台切换到另一个工作台时，界面上可用的工具会发生变化。工具栏、命令栏以及界面中的其他部分会切换到新工作台的配置，但场景中的内容不会改变。例如，可以用 Sketcher 工作台 开始绘制 2D 图形，然后使用 Part Design工作台 进一步处理这些图形。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;工作台名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;功能描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Std Base&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供通用命令和工具（如文件操作、视图控制），适用于所有工作台。&lt;/td&gt;
&lt;td&gt;基础操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Assembly 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于创建和求解机械装配体，支持装配约束和运动模拟。&lt;/td&gt;
&lt;td&gt;机械设计、产品开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIM 工作台&lt;/td&gt;
&lt;td&gt;用于建筑设计和 BIM 流程，结合 Arch 工作台和之前的外部 BIM 插件。&lt;/td&gt;
&lt;td&gt;建筑设计、工程建设&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAM 工作台&lt;/td&gt;
&lt;td&gt;生成 G-Code 指令，用于数控加工（CNC）。之前称为 Path 工作台。&lt;/td&gt;
&lt;td&gt;制造业、数控加工&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Draft 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供 2D 几何绘制和基本的 2D/3D CAD 操作工具。&lt;/td&gt;
&lt;td&gt;建筑设计、2D 制图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FEM 工作台&lt;/td&gt;
&lt;td&gt;提供有限元分析（FEA）工具，用于应力分析、热传导分析等。&lt;/td&gt;
&lt;td&gt;工程仿真、结构分析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inspection 工作台&lt;/td&gt;
&lt;td&gt;提供几何形状检查工具，目前处于早期开发阶段。&lt;/td&gt;
&lt;td&gt;几何验证、质量检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Material 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;管理材料系统，定义和分配材料到模型，并可视化材料属性。&lt;/td&gt;
&lt;td&gt;工程设计、材料分析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mesh 工作台&lt;/td&gt;
&lt;td&gt;用于处理三角网格模型（如 STL/OBJ），支持修复和优化网格。&lt;/td&gt;
&lt;td&gt;3D 打印准备、模型修复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenSCAD 工作台&lt;/td&gt;
&lt;td&gt;提供与 OpenSCAD 的互操作功能，支持代码生成几何体和修复模型历史。&lt;/td&gt;
&lt;td&gt;程序化建模、参数化设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Part 工作台&lt;/td&gt;
&lt;td&gt;提供几何体原件操作和布尔运算工具，用于基础 3D 建模。&lt;/td&gt;
&lt;td&gt;基础建模&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Part Design 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;基于草图的参数化零件建模，支持拉伸、切割、倒角等特征操作。&lt;/td&gt;
&lt;td&gt;零件设计、参数化建模&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Points 工作台&lt;/td&gt;
&lt;td&gt;用于导入和处理点云数据，并基于点云生成几何体。&lt;/td&gt;
&lt;td&gt;3D 扫描后处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sketcher 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;创建几何约束草图，支持参数化设计的基础构建工具。&lt;/td&gt;
&lt;td&gt;零件设计、草图绘制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spreadsheet 工作台&lt;/td&gt;
&lt;td&gt;创建和操作电子表格数据，支持引用表格值进行参数化建模。&lt;/td&gt;
&lt;td&gt;参数化设计、数据管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Surface 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供曲面创建和修改工具，支持复杂曲面建模。&lt;/td&gt;
&lt;td&gt;自由曲面设计、高级建模&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TechDraw 工作台&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;从 3D 模型生成技术图纸，支持 2D 投影视图、剖视图及标注。&lt;/td&gt;
&lt;td&gt;产品文档、工程图纸输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test Framework 工作台&lt;/td&gt;
&lt;td&gt;为 FreeCAD 开发者提供调试和单元测试工具，验证功能和修复的可靠性。&lt;/td&gt;
&lt;td&gt;FreeCAD 开发和调试&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="part-part-design"&gt;Part 与 Part Design&lt;/h3&gt;
&lt;p&gt;打开FreeCAD，首次看到这两个东西时，还挺困惑的&lt;/p&gt;
&lt;h4 id="_7"&gt;历史&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;FreeCAD 最初设计为使用构造实体几何（Constructive Solid Geometry，CSG）方法进行参数化操作【 Part 工作台】。&lt;/li&gt;
&lt;li&gt;后来，它通过 &lt;strong&gt;Part Design 工作台&lt;/strong&gt; 引入了特征编辑（Feature Editing）方法。例如通过 Pad（拉伸） 和 Pocket（切割） 等操作逐步构建零件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="csg-brep"&gt;CSG 与 BRep&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;不同于Part工作台使用使用CSG建模，Part Design 工作台使用 BRep（Boundary Representation，边界表示） 来表示几何体。FreeCAD 的几何内核基于 OpenCASCADE，它本身是一个支持 BRep 表示的强大几何建模内核。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CSG（Constructive Solid Geometry）：Part 工作台中支持 CSG 方法，使用原始几何体（例如立方体、球体）通过布尔运算构建模型。&lt;/li&gt;
&lt;li&gt;BRep：Part Design 工作台则更偏向于基于 BRep 的逐步构建和特征编辑，支持更复杂的几何操作和细节调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_8"&gt;操作对比&lt;/h4&gt;
&lt;p&gt;下图是 两种工作台的下的操作方式对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左侧 Part Design工作台下操作：始终基于一个实体进行特征编辑操作&lt;/li&gt;
&lt;li&gt;右侧 Part 工作台下操作：创建不同的实体，而后进行布尔操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="vs" src="https://blog.debao.me/images/simu/freecad-partdesign-vs-part.png"&gt;&lt;/p&gt;
&lt;p&gt;另外，Part Design 与 Solidworks 在操作上可大致对应：&lt;/p&gt;
&lt;p&gt;&lt;img alt="part design 和 sw" src="https://blog.debao.me/images/simu/Features_and_Part_Design.png"&gt;&lt;/p&gt;
&lt;h2 id="_9"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/FreeCAD/FreeCAD&lt;/li&gt;
&lt;li&gt;https://wiki.freecad.org/Getting_started&lt;/li&gt;
&lt;li&gt;https://freecad.github.io/DevelopersHandbook/&lt;/li&gt;
&lt;li&gt;https://github.com/qingfengxia/FreeCAD_Mod_Dev_Guide&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/FreeCAD&lt;/li&gt;
&lt;li&gt;https://wiki.freecad.org/History&lt;/li&gt;
&lt;li&gt;https://wiki.freecad.org/PySide&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>开源有限元软件FEniCS小记</title><link href="https://blog.debao.me/2024/12/notes-on-the-open-source-finite-element-software-fenics/" rel="alternate"></link><published>2024-12-27T01:17:00+08:00</published><updated>2024-12-27T01:17:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-12-27:/2024/12/notes-on-the-open-source-finite-element-software-fenics/</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fenics"&gt;FEniCS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;组成部分&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fenicsx"&gt;FEniCSx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fenics_1"&gt;FEniCS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;如何使用？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;基本步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;泊松方程求解问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;具体例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;分段看看代码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;创建网格和定义有限元空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;设置边 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fenics"&gt;FEniCS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;组成部分&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fenicsx"&gt;FEniCSx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fenics_1"&gt;FEniCS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;如何使用？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;基本步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;泊松方程求解问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;具体例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;分段看看代码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;创建网格和定义有限元空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;设置边界条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;定义变分问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;求解线性问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;显示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="fenics"&gt;FEniCS&lt;/h2&gt;
&lt;p&gt;作为一项科研合作，FEniCS 项目2003年由芝加哥大学（University of Chicago）和查尔姆斯理工大学（Chalmers University of Technology）发起。&lt;/p&gt;
&lt;p&gt;注意，FEniCS 采用比较宽松的 &lt;strong&gt;LGPL&lt;/strong&gt; 协议发布！！！&lt;/p&gt;
&lt;p&gt;2019年重构后的新版本叫做FEniCSx，其重要组成部分是DOLFINx，可以在C++或Python下使用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fenics" src="https://blog.debao.me/images/simu/fenics_turor1.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;组成部分&lt;/h2&gt;
&lt;p&gt;似乎很乱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始版本FEniCS：包括 DOLFIN、FIAT&lt;/li&gt;
&lt;li&gt;后来FEniCS扩展成：DOLFIN、FFC、FIAT、UFL&lt;/li&gt;
&lt;li&gt;再后来（2019）FEniCSx：重构为 &lt;strong&gt;DOLFINx、FFCx、Basix、UFL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fenicsx"&gt;FEniCSx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basix&lt;/strong&gt;：一个用于生成有限元基函数（finite element basis functions）的库，支持任意阶的有限元计算。它是 FEniCSx 中的核心组件之一，负责提供灵活且高效的有限元基础功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UFL&lt;/strong&gt;（统一形式语言，Unified Form Language）：一个嵌入在 Python 中的领域特定语言（domain-specific language），用于定义有限元变分形式（finite element variational forms）。UFL 是 FEniCSx 中描述微分方程离散化的核心语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FFCx&lt;/strong&gt;（FEniCSx 形式编译器，FEniCSx Form Compiler）：一个专门用于将 UFL 定义的变分形式编译成高效低级代码的工具。FFCx 是 FEniCSx 的编译引擎，生成与 Basix 和 DOLFINx 兼容的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOLFINx&lt;/strong&gt;：FEniCSx 的高性能计算核心库，基于 C++ 和 Python。它提供数据结构和算法支持，包括有限元网格（finite element meshes）、装配（assembly）、求解器（solvers），以及与线性代数工具的接口。DOLFINx 是 FEniCSx 的用户接口和计算核心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在IO上，它涉及到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gmsh&lt;/li&gt;
&lt;li&gt;VTK&lt;/li&gt;
&lt;li&gt;PyVista&lt;/li&gt;
&lt;li&gt;ADIOS2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性代数后端上，它涉及到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;li&gt;PETSc&lt;/li&gt;
&lt;li&gt;Trilinos&lt;/li&gt;
&lt;li&gt;Eigen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fenics_1"&gt;FEniCS&lt;/h3&gt;
&lt;p&gt;先看看老的FEnics&lt;/p&gt;
&lt;p&gt;&lt;img alt="fenics" src="https://blog.debao.me/images/simu/fenics_project.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UFL&lt;/strong&gt;（统一形式语言，unified form language）：一种嵌入在 Python 中的领域特定语言，用于通过有限元变分形式（finite element variational forms）描述微分方程的有限元离散化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIAT&lt;/strong&gt;（有限元自动生成器，finite element automatic tabulator）：FEniCS 的有限元后端，是一个 Python 模块，用于生成单纯形（simplices）上的任意阶有限元基函数（finite element basis functions）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FFC&lt;/strong&gt;（FEniCS 形式编译器，FEniCS form compiler）：一个编译器，用于将 UFL 代码作为输入并生成 UFC 输出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UFC&lt;/strong&gt;（统一形式装配代码，unified form-assembly code）：一个 C++ 接口，由用于评估和装配有限元变分形式的低级函数组成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instant&lt;/strong&gt;：一个 Python 模块，用于在 Python 中内联 C 和 C++ 代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOLFIN&lt;/strong&gt;：一个 C++/Python 库，提供有限元网格（finite element meshes）、自动化有限元装配（automated finite element assembly）以及数值线性代数（numerical linear algebra）的数据结构和算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;安装&lt;/h2&gt;
&lt;p&gt;在Ubuntu或Windows的WSL2下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ppa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;fenics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fenics&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fenicsx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;另外，它还支持 conda 和 docker 方式&lt;/p&gt;
&lt;h2 id="_3"&gt;如何使用？&lt;/h2&gt;
&lt;h3 id="_4"&gt;基本步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建网格和定义有限元空间；&lt;/li&gt;
&lt;li&gt;设置边界条件并定义变分问题；&lt;/li&gt;
&lt;li&gt;求解线性方程并输出结果；&lt;/li&gt;
&lt;li&gt;使用 pyvista 可视化计算结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体怎么做？？找个具体例子&lt;/p&gt;
&lt;h3 id="_5"&gt;泊松方程求解问题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="math inline"&gt;\Gamma_{D}&lt;/span&gt;：Dirichlet 边界条件规定了解 &lt;span class="math inline"&gt; u &lt;/span&gt; 在边界上的值。例如，温度的值或位势的值。
&lt;span class="math inline"&gt;\Gamma_{N}&lt;/span&gt;：Neumann 边界条件规定了解的法向导数（即变化率），而不是解本身的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于一个&lt;strong&gt;区域&lt;/strong&gt; &lt;span class="math inline"&gt;\Omega \subset \mathbb{R}^n&lt;/span&gt; ，其&lt;strong&gt;边界&lt;/strong&gt;为 &lt;span class="math inline"&gt;\partial \Omega = \Gamma_{D} \cup \Gamma_{N}&lt;/span&gt;，泊松方程在特定边界条件下的形式为：&lt;/p&gt;
&lt;div class="math display"&gt;
\begin{align}
  \nabla^{2} u &amp;amp;= f \quad {\rm in} \ \Omega, \\
   u &amp;amp;= 0 \quad {\rm on} \ \Gamma_{D}, \\
   \nabla u \cdot n &amp;amp;= g \quad {\rm on} \ \Gamma_{N}.
\end{align}
&lt;/div&gt;
&lt;p&gt;其中，&lt;span class="math inline"&gt;f&lt;/span&gt; 和 &lt;span class="math inline"&gt;g&lt;/span&gt; 是已知的输入数据，&lt;span class="math inline"&gt;n&lt;/span&gt; 表示指向外部的边界法线。变分问题可以表述为：寻找 &lt;span class="math inline"&gt;u \in V&lt;/span&gt;，使得&lt;/p&gt;
&lt;div class="math display"&gt;
a(u, v) = L(v) \quad \forall \ v \in V,
&lt;/div&gt;
&lt;p&gt;其中 &lt;span class="math inline"&gt;V&lt;/span&gt; 是一个适当的函数空间，且&lt;/p&gt;
&lt;div class="math display"&gt;
\begin{align}
   a(u, v) &amp;amp;:= \int_{\Omega} \nabla u \cdot \nabla v \, {\rm d} x, \\
   L(v)    &amp;amp;:= \int_{\Omega} f v \, {\rm d} x + \int_{\Gamma_{N}} g v \, {\rm d} s.
\end{align}
&lt;/div&gt;
&lt;p&gt;其中，&lt;span class="math inline"&gt;a(u, v)&lt;/span&gt; 是双线性形式，&lt;span class="math inline"&gt;L(v)&lt;/span&gt; 是线性形式。假设函数空间 &lt;span class="math inline"&gt;V&lt;/span&gt; 中的所有函数都满足 Dirichlet 边界条件（即 &lt;span class="math inline"&gt;u = 0 \ {\rm on} \ \Gamma_{D}&lt;/span&gt;）。&lt;/p&gt;
&lt;h3 id="_6"&gt;具体例子&lt;/h3&gt;
&lt;p&gt;考虑以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\Omega = [0,2] \times [0,1]&lt;/span&gt;（矩形区域）&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\Gamma_{D} = \{(0, y) \cup (2, y) \subset \partial \Omega\}&lt;/span&gt;（Dirichlet 边界）&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\Gamma_{N} = \{(x, 0) \cup (x, 1) \subset \partial \Omega\}&lt;/span&gt;（Neumann 边界）&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;g = \sin(5x)&lt;/span&gt;（Neumann 边界条件）&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;f = 10\exp(-((x - 0.5)^2 + (y - 0.5)^2) / 0.02)&lt;/span&gt;（源项）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="fenics" src="https://blog.debao.me/images/simu/fenics_turor1.png"&gt;&lt;/p&gt;
&lt;p&gt;对应代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ufl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dolfinx&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mpi4py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;petsc4py.PETSc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ScalarType&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dolfinx.fem.petsc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinearProblem&lt;/span&gt;

&lt;span class="n"&gt;msh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mpi4py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MPI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;cell_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CellType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;functionspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lagrange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;facets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate_entities_boundary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dofs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate_dofs_topological&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;facets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirichletbc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ScalarType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dofs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dofs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrialFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SpatialCoordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;

&lt;span class="n"&gt;problem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;petsc_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ksp_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;preonly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pc_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;uh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XDMFFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;out_poisson/poisson.xdmf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#--------------&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyvista&lt;/span&gt;

&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtk_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyvista&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnstructuredGrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_active_scalars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyvista&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;show_edges&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;warped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warp_by_scalar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_7"&gt;分段看看代码&lt;/h3&gt;
&lt;h4 id="_8"&gt;创建网格和定义有限元空间&lt;/h4&gt;
&lt;p&gt;函数 &lt;code&gt;create_rectangle()&lt;/code&gt; 用于创建一个矩形网格，定义网格的坐标范围为 (0, 0) 到 (2, 1)，并且将其分为 32x16 格，单元类型为三角形。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;msh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mpi4py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MPI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMM_WORLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;cell_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CellType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;函数 &lt;code&gt;functionspace()&lt;/code&gt; 用于创建一个Lagrange一阶有限元空间 V，用于表示离散化后的未知函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;functionspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lagrange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_9"&gt;设置边界条件&lt;/h4&gt;
&lt;p&gt;函数 &lt;code&gt;locate_entities_boundary()&lt;/code&gt;用于查找网格的边界，定位在 x=0 或 x=2 处的边界，用于设置边界条件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;facets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate_entities_boundary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topology&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;函数 &lt;code&gt;locate_dofs_topological()&lt;/code&gt; 根据边界上的元素位置，定位边界上的自由度（DOFs），这些自由度将用于施加边界条件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;dofs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate_dofs_topological&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;facets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;函数 &lt;code&gt;dirichletbc()&lt;/code&gt;设置Dirichlet边界条件，将边界自由度 dofs 上的解值设为0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirichletbc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ScalarType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dofs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dofs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_10"&gt;定义变分问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;u：试函数？表示问题中的未知数，通过&lt;code&gt;TrialFunction()&lt;/code&gt;定义。&lt;/li&gt;
&lt;li&gt;v：测试函数，用于在变分问题中进行积分。通过&lt;code&gt;TestFunction()&lt;/code&gt;定义测试函数。&lt;/li&gt;
&lt;li&gt;x：网格的空间坐标，通过&lt;code&gt;SpatialCoordinate()&lt;/code&gt;获取。&lt;/li&gt;
&lt;li&gt;f：定义源项 f，这是一个高斯型函数，表示问题的右侧项。&lt;/li&gt;
&lt;li&gt;g：定义边界上的源项 g，这是一个关于 x[0] 的正弦函数。&lt;/li&gt;
&lt;li&gt;a：变分问题的左侧，表示梯度的内积，&lt;code&gt;ufl.inner(ufl.grad(u), ufl.grad(v))&lt;/code&gt; 是对解的梯度和测试函数的梯度内积，&lt;code&gt;ufl.dx&lt;/code&gt; 表示在网格区域上进行积分。&lt;/li&gt;
&lt;li&gt;L：变分问题的右侧，包括源项 f 和边界项 g。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrialFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SpatialCoordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ufl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_11"&gt;求解线性问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinearProblem()&lt;/code&gt;定义线性问题，其中&lt;ul&gt;
&lt;li&gt;a 和 L 分别是变分问题的左侧和右侧，&lt;/li&gt;
&lt;li&gt;bcs 是边界条件，&lt;/li&gt;
&lt;li&gt;petsc_options 配置了 PETSc 求解器的参数。&lt;ul&gt;
&lt;li&gt;ksp_type 设置为 preonly，表示使用预处理器类型；&lt;/li&gt;
&lt;li&gt;pc_type 设置为 lu，表示使用直接求解器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solve()&lt;/code&gt;求解线性问题，得到解 uh。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;problem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;petsc_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ksp_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;preonly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pc_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;uh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;函数&lt;code&gt;XDMFFile()&lt;/code&gt;将解 uh 和网格 msh 输出到 XDMF 文件格式，便于后续可视化和分析。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XDMFFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;out_poisson/poisson.xdmf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="_12"&gt;显示&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;vtk_mesh: 将 dolfinx 的有限元空间转换为 pyvista 可用的网格格式。&lt;/li&gt;
&lt;li&gt;pyvista.UnstructuredGrid: 创建一个无结构的网格对象，用于可视化。&lt;/li&gt;
&lt;li&gt;grid.point_data["u"]: 将解 uh 的实部赋值给网格的点数据，表示解的数值。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dolfinx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtk_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyvista&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnstructuredGrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_active_scalars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_13"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/FEniCS&lt;/li&gt;
&lt;li&gt;https://github.com/firedrakeproject/fiat&lt;/li&gt;
&lt;li&gt;https://fenicsproject.org/&lt;/li&gt;
&lt;li&gt;https://jsdokken.com/dolfinx-tutorial/&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/FEniCS_Project&lt;/li&gt;
&lt;li&gt;https://docs.fenicsproject.org/dolfinx/v0.9.0/python/demos/demo_poisson.html&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>开源有限元软件Elmer小记</title><link href="https://blog.debao.me/2024/12/notes-on-the-open-source-finite-element-software-elmer/" rel="alternate"></link><published>2024-12-26T22:48:00+08:00</published><updated>2024-12-26T22:48:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-12-26:/2024/12/notes-on-the-open-source-finite-element-software-elmer/</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#elmer"&gt;Elmer 是什么？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;授权协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmer_1"&gt;Elmer架构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#elmergui"&gt;ElmerGUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmersolver"&gt;ElmerSolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmergrid"&gt;ElmerGrid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#paraview"&gt;ParaView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;源码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="elmer"&gt;Elmer 是什么？&lt;/h2&gt;
&lt;p&gt;官网是如下介绍Elmer的：&lt;/p&gt;
&lt;p&gt;Elmer是一个开源的多物理场仿真软件，主要由CSC - IT科学中心（CSC）开发。Elmer的开发最初作为芬兰大学、研 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#elmer"&gt;Elmer 是什么？&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;授权协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmer_1"&gt;Elmer架构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#elmergui"&gt;ElmerGUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmersolver"&gt;ElmerSolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elmergrid"&gt;ElmerGrid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#paraview"&gt;ParaView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;源码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="elmer"&gt;Elmer 是什么？&lt;/h2&gt;
&lt;p&gt;官网是如下介绍Elmer的：&lt;/p&gt;
&lt;p&gt;Elmer是一个开源的多物理场仿真软件，主要由CSC - IT科学中心（CSC）开发。Elmer的开发最初作为芬兰大学、研究机构和工业界的国家合作项目启动。自其开源发布以来，Elmer的使用和开发已成为国际化。&lt;/p&gt;
&lt;p&gt;Elmer包含流体动力学、结构力学、电磁学、热传导和声学等物理模型。这些模型通过偏微分方程来描述，Elmer通过有限元法（FEM）求解。Elmer支持并行计算，并且在许多问题中，能够在数千个核心上达到良好的可扩展性。&lt;/p&gt;
&lt;p&gt;&lt;img alt="elmer" src="https://blog.debao.me/images/simu/elmer.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1995年，作为芬兰国家级项目启动&lt;/li&gt;
&lt;li&gt;2008年，在sf.net平台开源&lt;/li&gt;
&lt;li&gt;2015年，转移到GitHub平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;开发环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fortran90/95（核心数值计算）&lt;/li&gt;
&lt;li&gt;C/C++（外围功能和性能优化）&lt;/li&gt;
&lt;li&gt;Python（脚本和后处理）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GUI界面使用Qt(6)开发，使用ParaView，VTK等库或工具。&lt;/p&gt;
&lt;p&gt;使用CMake进行跨平台构建。&lt;/p&gt;
&lt;p&gt;它涉及到的一些开源库，如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="3rd tools" src="https://blog.debao.me/images/simu/elmer_3rd_tools.png"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;授权协议&lt;/h3&gt;
&lt;p&gt;整个软件是开源的，具体来说&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Library parts under LGPL&lt;/li&gt;
&lt;li&gt;Modules under GPL&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我没有仔细去看源码，不清楚它的Library 和 Modules的具体包含哪些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="elmer_1"&gt;Elmer架构&lt;/h2&gt;
&lt;p&gt;Elmer由一系列程序组成&lt;/p&gt;
&lt;p&gt;&lt;img alt="components" src="https://blog.debao.me/images/simu/elmer_components.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ElmerGUI：界面，前处理（包含ElmerGrid，负责结构化网格和网格导入）&lt;/li&gt;
&lt;li&gt;ElmerSolver：有限元求解器，每个物理方程对应一个插件&lt;/li&gt;
&lt;li&gt;Paraview：结果展示？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="elmergui"&gt;ElmerGUI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户界面：使用 Qt 开发&lt;/li&gt;
&lt;li&gt;网格生成：Tetgen，Netgen，ElmerGrid等插件。CAD界面基于 OpenCascad&lt;/li&gt;
&lt;li&gt;新的求解器可以通过GUI集成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="elmersolver"&gt;ElmerSolver&lt;/h3&gt;
&lt;p&gt;ElmerSolver的主体部分！&lt;/p&gt;
&lt;h3 id="elmergrid"&gt;ElmerGrid&lt;/h3&gt;
&lt;p&gt;除了作为 ElmerGUI的插件使用外，也可以独立运行。&lt;/p&gt;
&lt;p&gt;支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2D、3D结构化网格的创建&lt;/li&gt;
&lt;li&gt;网格导入，支持Ansys，Abaqus，Fidap，Comsol，Gmsh等格式&lt;/li&gt;
&lt;li&gt;网格操作&lt;/li&gt;
&lt;li&gt;分割（Partitioning）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="paraview"&gt;ParaView&lt;/h3&gt;
&lt;p&gt;ParaView是一个独立工具，让ElmerSolver生成它可识别的格式，而后用其打开。&lt;/p&gt;
&lt;p&gt;ParaView也可以通过ElmerGUI被调用。&lt;/p&gt;
&lt;p&gt;另外，ElmerGUI内置VTK以及老的ElmerPost，也可以用于可视化。但是ParaView是ElmerSolver 推荐的方式！！&lt;/p&gt;
&lt;h3 id="_4"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ElmerPost：老的后处理，已不再维护&lt;/li&gt;
&lt;li&gt;ElmerFront：老的前端界面，已不再维护&lt;/li&gt;
&lt;li&gt;Mesh2D：老的Mesh软件，供ElmerFront调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;源码结构&lt;/h2&gt;
&lt;p&gt;重点关注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eio&lt;/strong&gt;：Elmer输入/输出库，使用C++编写，并由ElmerSolver用于一些I/O操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elmergrid&lt;/strong&gt;：ElmerGrid源代码，使用C语言编写，包括来自Karypis实验室的Metis库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fem&lt;/strong&gt;：ElmerSolver源代码，主要使用Fortran90编写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hutiter&lt;/strong&gt;：主要使用Fortran90编写的迭代线性代数求解器，由ElmerSolver调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;matc&lt;/strong&gt;：该库用于ElmerSolver命令文件解释器和ElmerPost命令窗口中，用于评估用C语言编写的数学表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mathlibs&lt;/strong&gt;：包括基本数学库，如Lapack、Blas、Arpack和Parpack。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ElmerGUI&lt;/strong&gt;：新的前处理器ElmerGUI的源代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;umfpack&lt;/strong&gt;：包括加利福尼亚大学的Umfpack（GPL版本4.4）库的源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不再维护：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;front&lt;/strong&gt;&lt;br&gt;
  ElmerFront源代码，使用C++编写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post&lt;/strong&gt;&lt;br&gt;
  ElmerPost源代码，使用C语言编写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meshgen2d&lt;/strong&gt;&lt;br&gt;
  包括2D Delaunay网格生成器的源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/ElmerCSC/elmerfem&lt;/li&gt;
&lt;li&gt;https://research.csc.fi/web/elmer/elmer&lt;/li&gt;
&lt;li&gt;https://www.nic.funet.fi/pub/sci/physics/elmer/&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category><category term="Qt"></category><category term="vtk"></category></entry><entry><title>Mesh网格生成小记</title><link href="https://blog.debao.me/2024/12/notes-on-mesh-generation/" rel="alternate"></link><published>2024-12-19T18:23:00+08:00</published><updated>2024-12-19T18:23:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-12-19:/2024/12/notes-on-mesh-generation/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;网格（Mesh）用于计算机屏幕渲染和物理模拟，如有限元分析（Finite Element Analysis, FEA）和计算流体力学（Computational Fluid Dynamics, CFD）。通过将复杂形状（如桥梁）分解 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;网格（Mesh）用于计算机屏幕渲染和物理模拟，如有限元分析（Finite Element Analysis, FEA）和计算流体力学（Computational Fluid Dynamics, CFD）。通过将复杂形状（如桥梁）分解为简单单元（如三角形），我们可以对每个单元进行计算并模拟其相互作用，从而实现模拟和可视化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;术语&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;网格生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;网格单元命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;常见单元&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;网格类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;按几何结构分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;按网格结构分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;按网格类型分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;按网格的适应性分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;按网格的质量分类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;生成方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;开源软件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gmsh"&gt;gmsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tetgen"&gt;tetgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#meshfix"&gt;MeshFix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gmsh_1"&gt;gmsh例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;网格生成（Mesh Generation）是指将连续的几何空间划分为离散的几何单元和拓扑单元的过程。&lt;/p&gt;
&lt;p&gt;这一过程通常通过计算机算法完成，必要时可结合人工干预。网格生成的目标是创建一个既能准确反映输入域几何特征，又具有高质量（形状良好）单元的网格。同时，需要避免生成过多的单元，以免增加后续计算的难度。在对后续计算至关重要的区域，网格应更为精细（单元尺寸较小），以提高计算精度。&lt;/p&gt;
&lt;h2 id="_1"&gt;术语&lt;/h2&gt;
&lt;h3 id="_2"&gt;网格生成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mesh generation / Meshing&lt;/strong&gt;（网格生成/网格划分）：指生成网格的过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grid generation / Gridding&lt;/strong&gt;（网格生成/网格布置）：范围更广？？包含网格优化，即通过调整网格以提高数值计算的速度或精度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tessellation&lt;/strong&gt;（镶嵌/铺砖）：在计算机图形学和数学中，有时用作网格的同义词。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;网格单元命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nodes / Points&lt;/strong&gt;（节点）：表示0维单元，在计算几何中通常称为Vertices（顶点）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edges&lt;/strong&gt;（边）：表示1维单元。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faces / Cells / Entities&lt;/strong&gt;（面/单元/实体）：2维或更高维的单元，具体名称视应用而定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt;（单元）：在有限元中，表示最高维的网格单元。
例如，3D网格中最高维单元是Elements，其2D子单元称为Faces。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;常见单元&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Triangles (Tris)&lt;/strong&gt;（三角形）：二维三角形单元。简单，灵活&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quadrilaterals (Quads)&lt;/strong&gt;（四边形）：二维四边形区域。对于规则几何区域比较高校，精度优于三角形网格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tetrahedra (Tets)&lt;/strong&gt;（四面体）：三维四面体单元。易于生成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hexahedra (Hexes)&lt;/strong&gt;（六面体/拓扑立方体）：六面体单元。较难生成，具有良好的数值性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;网格类型&lt;/h2&gt;
&lt;h3 id="_6"&gt;按几何结构分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二维网格（2D Mesh）&lt;/strong&gt;：主要用于二维问题，常见网格类型有三角形（Triangles）和四边形（Quadrilaterals）。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三维网格（3D Mesh）&lt;/strong&gt;：主要用于三维问题，常见网格类型有四面体（Tetrahedra）、六面体（Hexahedra）、棱柱体（Prisms）和金字塔（Pyramids）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;按网格结构分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结构化网格（Structured Mesh）&lt;/strong&gt;：网格单元按规则排列，适用于规则几何体，计算效率高。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非结构化网格（Unstructured Mesh）&lt;/strong&gt;：网格单元没有固定连接规则，适用于复杂几何形状，灵活性高。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合网格（Hybrid Mesh）&lt;/strong&gt;：结合结构化和非结构化网格的优点，适用于规则和复杂区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="mesh" src="https://blog.debao.me/images/python/structured_unstructured_mesh.png"&gt;&lt;/p&gt;
&lt;p&gt;图片取自：Metal Forming Formability, Simulation, and Tool Design (Chris V. Nielsen, Paulo A.F. Martins)&lt;/p&gt;
&lt;h3 id="_8"&gt;按网格类型分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点集网格（Point Set Mesh）&lt;/strong&gt;：由离散点组成，通常不包含连接信息，适用于点云数据处理。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面片网格（Surface Mesh）&lt;/strong&gt;：网格单元仅限物体表面，常见类型有三角形面片网格和四边形面片网格。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;体积网格（Volume Mesh）&lt;/strong&gt;：由三维单元组成，适用于三维问题，常见类型有四面体网格和六面体网格。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;按网格的适应性分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;均匀网格（Uniform Mesh）&lt;/strong&gt;：网格单元大小一致，适用于简单几何问题。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自适应网格（Adaptive Mesh）&lt;/strong&gt;：网格密度根据计算需求动态调整，适用于精细模拟高梯度区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;按网格的质量分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高质量网格（High-Quality Mesh）&lt;/strong&gt;：网格单元形状规整，适用于高精度仿真。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低质量网格（Low-Quality Mesh）&lt;/strong&gt;：网格单元可能畸形，适用于快速仿真或低精度要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_11"&gt;生成方法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;chatgpt结果，先列上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;网格生成算法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Delaunay 三角剖分&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;适用于二维空间的不规则区域&lt;/td&gt;
&lt;td&gt;优化三角形形状，避免长而细的单元，生成高质量网格。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Voronoi 图&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;点集划分，常与Delaunay三角剖分结合使用&lt;/td&gt;
&lt;td&gt;将空间分割为Voronoi区域，用于定义网格单元。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;前沿推进法（Advancing Front）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;生成不规则区域网格&lt;/td&gt;
&lt;td&gt;从边界开始逐步生成单元，覆盖整个域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;八叉树/四叉树（Octree / Quadtree）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;大规模计算、自适应网格生成&lt;/td&gt;
&lt;td&gt;递归划分空间，适应复杂几何形状和动态变化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;拉普拉斯平滑（Laplacian Smoothing）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;优化现有网格，改善网格质量&lt;/td&gt;
&lt;td&gt;平滑节点位置，减少畸形单元，优化网格形状。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;网格重构算法（Mesh Refinement）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;自适应网格、网格细化或粗化&lt;/td&gt;
&lt;td&gt;动态调整网格精度，特别适用于自适应网格。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;多边形剖分（Polygonal Mesh Generation）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;复杂几何形状的网格生成&lt;/td&gt;
&lt;td&gt;生成多边形单元，适应更复杂的形状。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;结构化网格生成（Structured Mesh Generation）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;规则几何区域（如矩形、正方形）&lt;/td&gt;
&lt;td&gt;生成规则网格单元，计算效率高，适用于简单几何问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;自适应网格生成（Adaptive Mesh Refinement, AMR）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要精细模拟高梯度区域或重要区域&lt;/td&gt;
&lt;td&gt;根据精度要求动态调整网格密度，适合复杂现象模拟。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;混合网格生成（Hybrid Mesh Generation）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;同时处理规则和复杂区域的应用&lt;/td&gt;
&lt;td&gt;结合结构化和非结构化网格的优点，适应多种几何形状。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;六面体网格生成（Hexahedral Mesh Generation）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;规则三维几何区域（如矩形、立方体）&lt;/td&gt;
&lt;td&gt;生成六面体单元，适用于流体力学或结构分析中的高精度计算。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;混合元素网格生成（Mixed-Element Mesh Generation）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;复杂几何或多物理场仿真&lt;/td&gt;
&lt;td&gt;结合多种网格元素（四面体、六面体、棱柱等），适应复杂场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;网格划分法（Grid Generation by Partitioning）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;将复杂几何域分割为多个规则子域&lt;/td&gt;
&lt;td&gt;常用于流体动力学、热传导等领域，稳定且高效。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_12"&gt;开源软件&lt;/h2&gt;
&lt;h3 id="gmsh"&gt;gmsh&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://gmsh.info/&lt;/li&gt;
&lt;li&gt;https://pypi.org/project/gmsh/&lt;/li&gt;
&lt;li&gt;https://github.com/pyvista/scikit-gmsh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意: 采用GPL协议&lt;/p&gt;
&lt;h3 id="tetgen"&gt;tetgen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://wias-berlin.de/software/index.jsp?id=TetGen&lt;/li&gt;
&lt;li&gt;https://github.com/ufz/tetgen&lt;/li&gt;
&lt;li&gt;https://github.com/pyvista/tetgen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：采用 AGPL 协议！！&lt;/p&gt;
&lt;h3 id="meshfix"&gt;MeshFix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/MarcoAttene/MeshFix-V2.1&lt;/li&gt;
&lt;li&gt;https://github.com/pyvista/pymeshfix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：采用 GPL 协议&lt;/p&gt;
&lt;h2 id="gmsh_1"&gt;gmsh例子&lt;/h2&gt;
&lt;p&gt;&lt;img alt="gmsh" src="https://blog.debao.me/images/python/gmsh_1.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gmsh&lt;/span&gt;

&lt;span class="c1"&gt;# 初始化 GMSH&lt;/span&gt;
&lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 创建一个 2D 矩形&lt;/span&gt;
&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;

&lt;span class="c1"&gt;# 创建四个顶点&lt;/span&gt;
&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 创建四条边&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;l3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;l4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 创建一个封闭的曲线环&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCurveLoop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 创建一个面&lt;/span&gt;
&lt;span class="n"&gt;surface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPlaneSurface&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 生成网格&lt;/span&gt;
&lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synchronize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 保存网格为 .msh 文件&lt;/span&gt;
&lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rectangle.msh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 结束 GMSH&lt;/span&gt;
&lt;span class="n"&gt;gmsh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mesh generation finished!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;可以用pyvista显示（可能不太对，太复杂了）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;meshio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyvista&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pv&lt;/span&gt;

&lt;span class="c1"&gt;# 使用 meshio 读取 GMSH 生成的网格文件&lt;/span&gt;
&lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meshio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rectangle.msh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 提取点（vertices）和三角形单元（triangles）&lt;/span&gt;
&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;
&lt;span class="n"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cells_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;triangle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;cells_flat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 展平为一维数组&lt;/span&gt;
&lt;span class="n"&gt;n_cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cells_flat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 计算三角形单元的数量&lt;/span&gt;

&lt;span class="c1"&gt;# 构建单元数组：每个元素包含一个整数 3（表示每个单元为三角形），后跟三个顶点索引&lt;/span&gt;
&lt;span class="n"&gt;cell_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cells_flat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cells_flat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cells_flat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cells&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# 将点和单元传递给 PyVista 的 PolyData 对象&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PolyData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cell_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 可视化网格&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;show_edges&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="_13"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Mesh_generation&lt;/li&gt;
&lt;li&gt;https://www.robertschneiders.de/meshgeneration/meshgeneration.html&lt;/li&gt;
&lt;li&gt;https://github.com/nschloe/meshio&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>古老的SRIM小记</title><link href="https://blog.debao.me/2024/11/notes-on-the-old-srim-software/" rel="alternate"></link><published>2024-11-23T20:11:00+08:00</published><updated>2024-11-23T20:11:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-11-23:/2024/11/notes-on-the-old-srim-software/</id><summary type="html">&lt;p&gt;接前面 &lt;a href="https://blog.debao.me/2024/11/notes-on-monte-carlo-simulation/"&gt;蒙特卡洛模拟小记&lt;/a&gt;，看一下SRIM&lt;/p&gt;
&lt;p&gt;这个软件历史悠久，最后一个版本发布于2013年。单独看这个年份问题不大，只是它使用 VB5 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;接前面 &lt;a href="https://blog.debao.me/2024/11/notes-on-monte-carlo-simulation/"&gt;蒙特卡洛模拟小记&lt;/a&gt;，看一下SRIM&lt;/p&gt;
&lt;p&gt;这个软件历史悠久，最后一个版本发布于2013年。单独看这个年份问题不大，只是它使用 VB5，实在是太老了。&lt;/p&gt;
&lt;p&gt;它免费，但是不开源。开源替代，可考虑 RustBCA ？？&lt;/p&gt;
&lt;h2 id="srim"&gt;SRIM&lt;/h2&gt;
&lt;p&gt;SRIM：物质中离子的阻止与射程（Stopping and Range of Ions in Matter）&lt;/p&gt;
&lt;p&gt;&lt;img alt="SRIM" src="https://blog.debao.me/images/sem/srim.png"&gt;&lt;/p&gt;
&lt;p&gt;SRIM 是一组程序，用于计算离子（动能范围为 10 eV 至 2 GeV/amu）在物质中的阻止能力和射程，其计算基于离子-原子碰撞的量子力学处理（将运动的原子称为“ion（离子）”，而将所有靶原子称为“atom（原子）”）。&lt;/p&gt;
&lt;p&gt;在碰撞过程中，离子与原子之间会发生屏蔽库仑碰撞，包括重叠电子壳层之间的交换和关联相互作用。
离子还与靶原子产生长程相互作用，导致靶材料内部的电子激发和等离子体振荡（等离子体子）的形成。&lt;/p&gt;
&lt;p&gt;在计算设置时，这些过程通过包含对靶材料集体电子结构和原子间键结构的描述来体现。靶材料中离子的电荷状态是通过“有效电荷”的概念来描述的，其中包括与速度相关的电荷状态，以及靶材料集体电子海引起的长程屏蔽效应。&lt;/p&gt;
&lt;p&gt;其功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标物质中离子的阻止与射程计算，&lt;/li&gt;
&lt;li&gt;离子注入，&lt;/li&gt;
&lt;li&gt;溅射，&lt;/li&gt;
&lt;li&gt;离子传输，&lt;/li&gt;
&lt;li&gt;以及离子束治疗(?)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟机里面装个Windows XP跑它可能比较容易。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;历史&lt;/h3&gt;
&lt;p&gt;SRIM（The Stopping and Range of Ions in Matter）的开发历史可以追溯到20世纪80年代，其诞生和发展与两位科学家的开创性研究密切相关：J. P. Biersack 和 J. F. Ziegler。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1980年，J. P. Biersack 与 L. Haggmark 在他们的论文中提出了一种新的射程算法（见 Nuclear Instruments and Methods, 第174卷，第257页）。这一工作奠定了SRIM程序的计算框架。&lt;/li&gt;
&lt;li&gt;1983年，SRIM首次作为一个基于DOS的程序开发出来，旨在为离子与物质相互作用的研究提供工具。这一初始版本已具备基础的阻止功率和离子射程计算功能。&lt;/li&gt;
&lt;li&gt;1985年，J. F. Ziegler 和 J. P. Biersack 合著了教程书《The Stopping and Range of Ions in Solids》，为SRIM提供了理论支持和应用指导。该书深入讲解了离子穿透固体的物理学原理以及SRIM的设计思路。&lt;/li&gt;
&lt;li&gt;1989年，随着计算机技术的进步，SRIM被移植到Windows平台。这一版本显著改进了用户界面，并提升了计算速度和易用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SRIM的物理模型来源于J. F. Ziegler在1977至1985年间编著的多卷书籍《The Stopping and Range of Ions in Matter》，其内容涵盖了离子与物质相互作用的广泛研究成果。&lt;/p&gt;
&lt;p&gt;SRIM的最新版本于21世纪初发布，包含了改进的用户界面和更强大的计算功能。2009年，《The Stopping and Range of Ions in Solids》教程书出版了新版。&lt;/p&gt;
&lt;h2 id="_2"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://www.srim.org/&lt;/li&gt;
&lt;li&gt;https://rmlmcfadden.github.io/ion-implantation/srim/&lt;/li&gt;
&lt;li&gt;https://github.com/lcpp-org/RustBCA&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>蒙特卡洛模拟小记</title><link href="https://blog.debao.me/2024/11/notes-on-monte-carlo-simulation/" rel="alternate"></link><published>2024-11-03T00:08:00+08:00</published><updated>2024-11-03T00:08:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-11-03:/2024/11/notes-on-monte-carlo-simulation/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;蒙特卡洛模拟(Monte  Carlo  simulation)的名称来自摩纳哥的蒙特卡洛赌场，因为模拟过程中使用了大量随机数，类似于赌博中的随机性。这 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;蒙特卡洛模拟(Monte  Carlo  simulation)的名称来自摩纳哥的蒙特卡洛赌场，因为模拟过程中使用了大量随机数，类似于赌博中的随机性。这种命名由美国数学家斯坦尼斯拉夫·乌拉姆（Stanislaw Ulam）和约翰·冯·诺依曼（John von Neumann）【就是提出冯·诺依曼结构的那个现在计算机之父】等人提出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;什么是蒙特卡洛模拟?&lt;/h2&gt;
&lt;p&gt;蒙特卡洛模拟是一种计算方法，通过大量的随机抽样和概率统计来解决复杂问题。我们可以把它想象成一个不断“投骰子”的过程。每次投掷都得到不同的结果，通过多次重复，可以得出系统行为的可能性分布。这个过程让我们能够对系统的不确定性进行更细致的分析，最终获得可能的结果范围。&lt;/p&gt;
&lt;p&gt;蒙特卡洛模拟在20世纪40年代的曼哈顿计划中得到系统发展，当时科学家们需要模拟原子粒子的运动，这种运动充满随机性。&lt;/p&gt;
&lt;h2 id="_2"&gt;基本步骤&lt;/h2&gt;
&lt;p&gt;尽管听起来很复杂,不过其过程相对直接。蒙特卡洛方法的主要步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义问题和模型&lt;/strong&gt;：明确问题，把它转化为数学模型，包含随机变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定输入的概率分布&lt;/strong&gt;：定义模型中的不确定变量并给出其概率分布（如正态分布、三角形分布等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成随机样本&lt;/strong&gt;：利用计算机生成大量随机数，为每个随机变量创建大量可能的输入组合。&lt;/li&gt;
&lt;li&gt;运行模拟：将每一组随机样本代入模型进行计算，重复该过程数百甚至数千次。&lt;/li&gt;
&lt;li&gt;分析结果：收集所有模拟结果，计算出变量的分布情况、期望值、方差等统计数据，从而推测出不同结果的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用两个小例子看下步骤&lt;/p&gt;
&lt;h3 id="_3"&gt;计算圆周率&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;似乎大家都喜欢用蒙特卡洛方法计算圆周率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="monte carlo method pi" src="https://blog.debao.me/images/science/monte_carlo_method_pi.png"&gt;&lt;/p&gt;
&lt;p&gt;想象一个正方形中，内嵌一个与其边长相同的四分之一圆弧。假设该正方形的边长为 1，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四分之一圆的面积为 π/4​&lt;/li&gt;
&lt;li&gt;正方形的面积为 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，四分之一圆面积占正方形面积的比例为 π/4​。具体步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;生成随机点&lt;/strong&gt;：在正方形中随机生成大量的点，每个点的 x 和 y 坐标在 0 到 1 之间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;判断是否在圆内&lt;/strong&gt;：对于每个点，计算其到圆心 (0,0)的距离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算比例&lt;/strong&gt;：统计所有点中落在圆内的比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;估算 π&lt;/strong&gt;：通过该比例乘以 4 来得到 π 的近似值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单的python代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;estimate_pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inside_circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;points_inside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;points_outside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Generate a random point&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Check if point is inside the circle&lt;/span&gt;
            &lt;span class="n"&gt;inside_circle&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;points_inside_x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;points_inside_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;points_outside_x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;points_outside_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pi_estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inside_circle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pi_estimate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_y&lt;/span&gt;

&lt;span class="c1"&gt;#-----------------&lt;/span&gt;

&lt;span class="c1"&gt;# Set the number of points&lt;/span&gt;
&lt;span class="n"&gt;num_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="n"&gt;pi_estimate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;estimate_pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot the results&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points_inside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_inside_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Inside&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points_outside_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points_outside_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Outside&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;π = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pi_estimate&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.4f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (Points: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;equal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_4"&gt;计算多重积分&lt;/h3&gt;
&lt;div class="math display"&gt;
I = \int_0^1\int_0^1\int_0^1 (x + y^2 + z^3) dxdydz
&lt;/div&gt;

&lt;p&gt;使用蒙特卡罗方法来估算这个积分，遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在立方体内随机生成 N 个点。&lt;/li&gt;
&lt;li&gt;计算每个点的函数值 f(x,y,z)。&lt;/li&gt;
&lt;li&gt;取这些函数值的平均值，并乘以立方体的体积（此处为1），得到积分的近似值。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monte_carlo_integration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 随机生成 num_samples 个点&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 计算每个点的函数值&lt;/span&gt;
    &lt;span class="n"&gt;function_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 计算积分的近似值&lt;/span&gt;
    &lt;span class="n"&gt;integral_estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;integral_estimate&lt;/span&gt;

&lt;span class="c1"&gt;# 设置样本数量&lt;/span&gt;
&lt;span class="n"&gt;num_samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monte_carlo_integration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;某次结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;1.0834714194252095&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;可以和解析值（1+1/2+1/3 = 1.08333...）比较。&lt;/p&gt;
&lt;h2 id="_5"&gt;应用&lt;/h2&gt;
&lt;p&gt;蒙特卡洛模拟应用广泛，几乎可以应用于任何含有不确定性的问题，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理学和工程：用于核物理、材料科学、粒子物理的模拟。&lt;/li&gt;
&lt;li&gt;金融：应用于股票价格预测、期权定价等。&lt;/li&gt;
&lt;li&gt;项目管理：用于风险分析，进度预测等&lt;/li&gt;
&lt;li&gt;计算生物学：用于分子模拟和基因表达研究。&lt;/li&gt;
&lt;li&gt;医学物理：用于辐射治疗剂量计算和医疗影像分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在电子显微镜和X射线分析中，通过蒙特卡洛模拟来研究电子束与样品之间的相互作用。在电子显微镜中,空间电荷效应(Boersch效应)一般也通过蒙特卡洛方法进行数值模拟.&lt;/p&gt;
&lt;h2 id="_6"&gt;软件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;先简单罗列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Github也能搜到不少,但都挺小众...&lt;/p&gt;
&lt;h3 id="geant4"&gt;Geant4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://geant4.org/&lt;/li&gt;
&lt;li&gt;https://gitlab.cern.ch/geant4/geant4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geant4（GEometry ANd Tracking）是一个使用蒙特卡洛方法模拟“粒子穿过物质的过程”的平台。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geometry 是对实验物理布局的分析，包括探测器、吸收体等，考虑这些布局如何影响粒子在实验中的路径。&lt;/li&gt;
&lt;li&gt;Tracking 是模拟粒子穿过物质的过程，涉及可能的相互作用和衰变过程。&lt;/li&gt;
&lt;li&gt;Detector response 记录粒子通过探测器体积时的反应，并近似真实探测器的响应。&lt;/li&gt;
&lt;li&gt;Run management 记录每次运行（即一组事件）的详细信息，并在不同运行之间设置实验的不同配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="penelope"&gt;PENELOPE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://www.oecd-nea.org/tools/abstract/detail/nea-1525&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PENELOPE（PENetration and Energy LOss of Positrons and Electrons …and photons）是一款通用蒙特卡洛子程序包，用于模拟任意几何结构中的电子-光子耦合传输。该软件通过蒙特卡洛方法对正电子、电子和光子的穿透和能量损失进行精确建模，适用于多种科学和工程应用场景。&lt;/p&gt;
&lt;h3 id="egsnrc"&gt;EGSnrc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/nrc-cnrc/EGSnrc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EGSnrc（Electron Gamma Shower, National Research Council），发音 "eggs-N-R-C"。&lt;/p&gt;
&lt;p&gt;EGSnrc 是一个软件工具包，用于进行电离辐射通过物质的蒙特卡罗模拟。它模拟光子、电子和正电子在 1 keV 到 10 GeV 动能范围内在均匀材料中的传播。&lt;/p&gt;
&lt;p&gt;EGSnrc 于 2000 年首次发布，是对原先在 1970 年代斯坦福线性加速器中心（SLAC）开发的Electron Gamma Shower（EGS）软件包的全面改进。&lt;/p&gt;
&lt;p&gt;EGSnrc 的一个显著特点是，它在带电粒子运输方面进行了重要的改进，提供了更好的低能截面，并包含 egs++ 类库以建模复杂的几何形状和粒子源。&lt;/p&gt;
&lt;h3 id="mc-x-ray"&gt;MC X-Ray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://montecarlomodeling.mcgill.ca/software/mcxray/mcxray.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MC X-Ray 是一款新的蒙特卡洛模拟软件，是 Casino 和 Win X-Ray 程序的扩展版。它通过模拟不同几何结构的固体中的电子散射，计算完整的 X 射线光谱。&lt;/p&gt;
&lt;p&gt;MC X-Ray 允许用户定义多达 256 个区域，这些区域可以是球体、圆柱体或水平与垂直平面的组合，每个区域都可以具有不同的成分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MCXRay 被集成到 3D 处理平台 Dragonfly（加拿大蒙特利尔 ORS），其运行速度比原始程序快 100 到 1000 倍！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 3D 样品和复杂几何结构&lt;/li&gt;
&lt;li&gt;明场、暗场、高角环形暗场检测器&lt;/li&gt;
&lt;li&gt;3D 结果计算&lt;/li&gt;
&lt;li&gt;显示电子轨迹&lt;/li&gt;
&lt;li&gt;样品表面的电子与能量分布&lt;/li&gt;
&lt;li&gt;透射电子分布&lt;/li&gt;
&lt;li&gt;能量损失分布&lt;/li&gt;
&lt;li&gt;X 射线光谱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="win-x-ray"&gt;Win X-Ray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://montecarlomodeling.mcgill.ca/software/winxray/winxray.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Win X-Ray 是一款蒙特卡洛模拟程序，用于模拟固体中的电子轨迹。Ray 是一款新的蒙特卡洛模拟扩展程序，基于知名的 CASINO 程序，它增加了回散电子、吸收电子、能量损失和 X 射线 φρz 曲线的统计分布。Ray 的新增功能包括完整的 X 射线光谱模拟和绝缘样品的电荷效应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示电子轨迹&lt;/li&gt;
&lt;li&gt;回散电子分布&lt;/li&gt;
&lt;li&gt;吸收电子分布&lt;/li&gt;
&lt;li&gt;能量损失分布&lt;/li&gt;
&lt;li&gt;特征 X 射线&lt;/li&gt;
&lt;li&gt;制动辐射 X 射线&lt;/li&gt;
&lt;li&gt;X 射线光谱&lt;/li&gt;
&lt;li&gt;可模拟非导电样品&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="casino"&gt;CASINO&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Casino，发音 /kəˈsiːnəʊ/，原意是赌场的意思。这儿是刻意缩写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CASINO（"monte CArlo SImulation of electroN trajectory in sOlids"）是全球知名的电子轨迹蒙特卡洛模拟程序。由 Prof. Gauvin 和他的研究生（Pierre Hovington 和 Dominique Drouin）在 Sherbrooke 大学最初开发。此后，该程序一直由 Sherbrooke 大学的 Dominique Drouin 和来自 Hydro-Québec 研究所（IREQ）的 Hendrix Demers 维护并改进。&lt;/p&gt;
&lt;p&gt;不过软件似乎太老了，开发也不活跃，官网都已经无法访问。&lt;/p&gt;
&lt;p&gt;它的2.4和3.3 两个版本差异很大。后者支持3D功能，但有人只使用它的2系列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示电子轨迹&lt;/li&gt;
&lt;li&gt;回散电子分布&lt;/li&gt;
&lt;li&gt;吸收电子分布&lt;/li&gt;
&lt;li&gt;能量分布&lt;/li&gt;
&lt;li&gt;φρz 曲线&lt;/li&gt;
&lt;li&gt;快速模拟&lt;/li&gt;
&lt;li&gt;回散和透射电子的角度检测器&lt;/li&gt;
&lt;li&gt;复杂的光束参数&lt;/li&gt;
&lt;li&gt;复杂几何结构&lt;/li&gt;
&lt;li&gt;二次电子生成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="srimtrim"&gt;SRIM/TRIM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://www.srim.org/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SRIM（Stopping and Range of Ions in Matter）/ TRIM 是一款免费的蒙特卡洛模拟软件包，用于模拟固体中离子的轨迹。该程序能够计算离子的阻止本领和范围，被广泛应用于材料科学和辐照研究等领域。&lt;/p&gt;
&lt;h3 id="hurricane"&gt;Hurricane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://www.samx.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SAMx 免费向社区提供蒙特卡洛程序 Hurricane。该软件包旨在基于蒙特卡洛方法模拟材料中的电子轨迹。Hurricane 拥有多种功能，特别的特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对弹性和非弹性相互作用的个别处理，无任何近似&lt;/li&gt;
&lt;li&gt;支持矩阵中的多个成分&lt;/li&gt;
&lt;li&gt;支持所有几何形状的模拟样品：&lt;ul&gt;
&lt;li&gt;大块样品&lt;/li&gt;
&lt;li&gt;基底上的薄膜&lt;/li&gt;
&lt;li&gt;垂直界面的多个成分&lt;/li&gt;
&lt;li&gt;由颗粒组成的矩阵样品&lt;/li&gt;
&lt;li&gt;粗糙样品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储所有计算参数，包括发射强度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;商业软件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.3ds.com/products/biovia/materials-studio"&gt;BIOVIA Materials Studio&lt;/a&gt;：达索公司（Dassault Systèmes）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.comsol.com/model/using-the-monte-carlo-method-to-estimate-the-value-of-pi-127901"&gt;COMSOL Multiphysics&lt;/a&gt;：COMSOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://optics.ansys.com/hc/en-us/articles/360034403194-Monte-Carlo-analysis-utility"&gt;ANSYS&lt;/a&gt;：ANSYS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://silvaco.com/simulation-standard/mocasim-a-versatile-monte-carlo-simulator-for-iii-nitride-transport-properties/"&gt;Mocasim&lt;/a&gt;：Silvaco&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Monte_Carlo_method&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Geant4&lt;/li&gt;
&lt;li&gt;https://www.memrg.com/programs-download&lt;/li&gt;
&lt;li&gt;https://montecarlomodeling.mcgill.ca/links/Links_mcprgs.html&lt;/li&gt;
&lt;li&gt;https://www.lehigh.edu/~maw3/link/mssoft/mcsim.html&lt;/li&gt;
&lt;li&gt;https://www.microbeamanalysis.eu/links-resources&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>电磁场数值计算小记</title><link href="https://blog.debao.me/2024/10/notes-on-electromagnetic-field-numerical-computation/" rel="alternate"></link><published>2024-10-28T00:51:00+08:00</published><updated>2024-10-28T00:51:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-10-28:/2024/10/notes-on-electromagnetic-field-numerical-computation/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;先列一些流水账，熟悉一下术语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电磁场数值计算的核心是通过计算机求解麦克斯韦方程组。麦克斯韦方程组是描述电场 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;先列一些流水账，熟悉一下术语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电磁场数值计算的核心是通过计算机求解麦克斯韦方程组。麦克斯韦方程组是描述电场和磁场相互作用的基本方程，但对于复杂的边界条件和介质分布，解析求解十分困难。这时，需要通过数值方法将这些偏微分方程离散化，并利用计算机进行求解。&lt;/p&gt;
&lt;p&gt;通过数值方法和计算机仿真来求解电磁场问题的学科，还有个专门名字——计算电磁学（Computational Electromagnetics, CEM）。&lt;/p&gt;
&lt;h2 id="_1"&gt;术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FDM&lt;/strong&gt;: Finite Difference Method（有限差分法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDTD&lt;/strong&gt;: Finite Difference Time Domain（有限差分时域法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FEM&lt;/strong&gt;: Finite Element Method（有限元法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MoM&lt;/strong&gt;: Method of Moments（矩量法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BEM&lt;/strong&gt;: Boundary Element Method（边界元法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GO&lt;/strong&gt;: Geometrical Optics（几何光学）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PO&lt;/strong&gt;: Physical Optics（物理光学）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GTD&lt;/strong&gt;: Geometrical Theory of Diffraction（几何绕射理论）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTD&lt;/strong&gt;: Uniform Theory of Diffraction（均匀绕射理论）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PTD&lt;/strong&gt;: Physical Theory of Diffraction（物理绕射理论）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MLFMA&lt;/strong&gt;: Multilevel Fast Multipole Algorithm（多层快速多极子算法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FFT&lt;/strong&gt;: Fast Fourier Transform（快速傅里叶变换）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACA&lt;/strong&gt;: Adaptive Cross Approximation（自适应交叉逼近）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MLMDA&lt;/strong&gt;: Multilevel Matrix Decomposition Algorithm（多层矩阵分解算法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RCS&lt;/strong&gt;：Radar Cross-Section (雷达散射截面)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IE&lt;/strong&gt;：Integral Equation (积分方程)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DE&lt;/strong&gt;：Differential Equation（微分方程）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TDDE&lt;/strong&gt;: Time Domain Differential Equation（时域微分方程）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TDIE&lt;/strong&gt;: Time Domain Integral Equation（时域积分方程）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDIE&lt;/strong&gt;: Frequency Domain Integral Equation（频域积分方程）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDDE&lt;/strong&gt;: Frequency Domain Differential Equation（频域微分方程）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cem"&gt;CEM发展历史&lt;/h2&gt;
&lt;div class="mermaid"&gt;
graph LR
    A[CEM发展阶段]
    A --&gt; B1[阶段1: 解析法]
    B1 --&gt; B2[Mie Series]

    A --&gt; C1[阶段2: 近似法]
    C1 --&gt; C2[几何光学]
    C2 --&gt; C3[GO]
    C2 --&gt; C4[GTD]
    C2 --&gt; C5[UTD]
    C1 --&gt; D2[物理光学]
    D2 --&gt; D3[PO]
    D2 --&gt; D4[PTD]

    A --&gt; E1[阶段3: 数值方法]
    E1 --&gt; E2[FDTD]
    E1 --&gt; E3[FEM]
    E1 --&gt; E4[MOM IE]

    A --&gt; F1[阶段4: 快速方法 IE]
    F1 --&gt; F2[迭代求解技术]
    F2 --&gt; F3[MLFMA]
    F2 --&gt; F4[FFT]
    F2 --&gt; F5[ACA]
    F1 --&gt; G2[直接求解技术]
    G2 --&gt; G3[Hierarchical Matrix Methods]
    G2 --&gt; G4[MLMDA]
&lt;/div&gt;

&lt;p&gt;随着计算技术和电磁理论的进步，CEM经历了不同的阶段&lt;/p&gt;
&lt;h3 id="1-20"&gt;1. 解析法阶段（20世纪中期之前）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机技术尚未发展之前，电磁问题的求解主要依赖于&lt;strong&gt;解析方法&lt;/strong&gt;，通过严格的数学推导来解决麦克斯韦方程。解析法能够提供封闭形式的解决方案，但仅适用于较为简单的几何结构和理想化的边界条件，并需要依托高超的数学技能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mie级数&lt;/strong&gt;：用于解决电磁波在球形对象上的散射问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他经典解析方法&lt;/strong&gt;：如分离变量法、傅里叶级数解等。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;局限：解析法只能处理简单的几何结构和边界条件，对于复杂的三维结构和非均匀介质问题，无法提供有效的解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="2-206080"&gt;2. 近似法阶段（20世纪60年代到80年代）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;随着计算机的出现，解析法的局限性逐渐显现。为了应对更复杂的电磁问题，开始发展&lt;strong&gt;近似法&lt;/strong&gt;。这些方法在一定的假设条件下对问题进行简化，以减少计算复杂度。近似法通常应用于高频电磁波的传播和散射问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;几何光学（GO）&lt;/strong&gt;：将电磁波近似为光线，波的传播问题可以采用射线追踪（Ray-Tracing）分析，适用于波长远小于物体尺寸的情况。忽略了波动的干涉和衍射效应，主要用于反射和折射问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理光学（PO）&lt;/strong&gt;：在几何光学的基础上增加了对衍射效应的考虑，适用于大尺寸物体上的散射问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;几何绕射理论（GTD）&lt;/strong&gt;：扩展了几何光学，能够处理电磁波沿物体边缘的绕射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;均匀绕射理论（UTD）&lt;/strong&gt;：是 GTD 的改进，能够更准确地处理绕射问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;应用与局限：这些方法特别适合处理大尺度物体的电磁波传播和散射问题，广泛应用于雷达散射、天线设计等领域。但它们的精度依赖于特定条件，无法处理所有的电磁场问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="3-2080"&gt;3. 数值方法阶段（20世纪80年代至今）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;随着计算机性能的增强，数值方法成为解决复杂电磁问题的主要手段。数值方法通过将麦克斯韦方程组离散化为代数方程，从而能够处理复杂几何结构、异质介质以及复杂边界条件下的电磁问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有限差分时域法（FDTD）&lt;/strong&gt;：基于时域求解，适合模拟电磁波的时域传播过程。它简单易实现，广泛用于天线设计、微波电路、雷达散射等领域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有限元法（FEM）&lt;/strong&gt;：通过将计算区域划分为多个有限单元，解决复杂几何和非均匀介质问题。FEM 被广泛应用于波导、天线、雷达散射等领域，尤其适合处理复杂边界条件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;矩量法（MoM）&lt;/strong&gt;：基于积分方程，主要用于开放空间中的电磁波问题，如天线和电磁散射。它适合处理自由空间中的问题，但对计算资源要求较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;应用：数值方法能够处理复杂几何、异质材料和复杂边界条件，是现代工程中电磁仿真的核心技术。随着计算机的进步，数值方法可以应用于越来越复杂的系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="4-21"&gt;4. 快速求解技术阶段（21世纪至今）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;随着电磁问题的复杂性和规模不断增加，传统的数值方法在计算时间和内存占用方面面临挑战。为了解决这些问题，快速求解技术应运而生。这些技术通过优化算法、数据压缩和并行计算，大幅提高了大规模问题的求解效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;迭代求解技术&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多层快速多极子方法（MLFMA）&lt;/strong&gt;：通过分层多极展开和分组处理，减少大规模电磁散射问题的计算复杂度，特别适合处理大尺度的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速傅里叶变换（FFT）&lt;/strong&gt;：用于加速卷积运算，减少矩阵求解的运算时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自适应交叉逼近（ACA）&lt;/strong&gt;：一种矩阵压缩技术，能够有效减少存储需求和计算时间，特别适用于多尺度问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;直接求解技术&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分层矩阵方法（Hierarchical Matrix Methods）&lt;/strong&gt;：通过对矩阵进行分层压缩，能够减少大型系统的计算和存储需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多层多尺度分析（MLMDA）&lt;/strong&gt;：能够处理同时包含大尺度和小尺度特征的电磁问题，特别适合复杂结构的仿真。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这些快速求解技术使得大规模和复杂电磁问题的仿真成为可能，特别是在天线阵列、雷达散射和复杂电磁环境的应用中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;不同视角比较&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;时域/频域&lt;/th&gt;
&lt;th&gt;实空间/傅里叶空间&lt;/th&gt;
&lt;th&gt;积分/微分&lt;/th&gt;
&lt;th&gt;网格类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FDM&lt;/td&gt;
&lt;td&gt;频域/时域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;微分&lt;/td&gt;
&lt;td&gt;结构化网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FDTD&lt;/td&gt;
&lt;td&gt;时域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;微分&lt;/td&gt;
&lt;td&gt;结构化网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;频域/时域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;微分&lt;/td&gt;
&lt;td&gt;非结构化网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MoM&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;积分&lt;/td&gt;
&lt;td&gt;表面网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BEM&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;积分&lt;/td&gt;
&lt;td&gt;表面网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GO&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;近似方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PO&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;近似方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GTD&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;近似方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UTD&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;近似方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PTD&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;近似方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MLFMA&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;积分&lt;/td&gt;
&lt;td&gt;表面网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FFT&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;傅里叶空间&lt;/td&gt;
&lt;td&gt;数值变换方法&lt;/td&gt;
&lt;td&gt;无需网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACA&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;数值逼近方法&lt;/td&gt;
&lt;td&gt;表面网格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MLMDA&lt;/td&gt;
&lt;td&gt;频域&lt;/td&gt;
&lt;td&gt;实空间&lt;/td&gt;
&lt;td&gt;数值分解方法&lt;/td&gt;
&lt;td&gt;表面网格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="1-frequency-domain-vs-time-domain"&gt;1. 频域（Frequency-Domain） vs. 时域（Time-Domain）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;频域：适合处理稳态和尖锐共振问题，处理斜入射和周期性问题非常快，但可能错过一些细微的共振现象。&lt;/li&gt;
&lt;li&gt;时域：适合宽频带模拟，尤其在有源和非线性器件中表现出色，且扩展性好，但内存需求较大，处理纵向周期性和斜入射时存在困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-semi-analytical-vs-fully-numerical"&gt;2. 半解析（Semi-Analytical） vs. 全数值（Fully Numerical）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;半解析：收敛性好，适合复杂几何结构，但内存需求大，处理长均匀段时效率较低。&lt;/li&gt;
&lt;li&gt;全数值：非常快且高效，适合分层器件和复杂几何，但收敛性有时较差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-fourier-space-vs-real-space"&gt;3. 傅里叶空间（Fourier-Space） vs. 实空间（Real-Space）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;傅里叶空间：适合高折射率对比、金属材料和细节解析，但在低折射率对比下速度较慢。&lt;/li&gt;
&lt;li&gt;实空间：非常适合处理周期性问题，速度快，内存占用低，但难以实现场可视化和解析复杂细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="4-unstructured-grid-vs-structured-grid"&gt;4. 非结构化网格（Unstructured Grid） vs. 结构化网格（Structured Grid）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;非结构化网格：实现简单，适合矩形结构，但效率较低，难以处理曲面。&lt;/li&gt;
&lt;li&gt;结构化网格：效率最高，适应大规模结构和曲面，但实现复杂，可能产生伪解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="5-integral-based-vs-differential-based"&gt;5. 积分法（Integral-Based） vs. 微分法（Differential-Based）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;积分法：使用稀疏矩阵，实现简单，适合表面网格，但需要体积网格，可能出现伪解。&lt;/li&gt;
&lt;li&gt;微分法：只需表面网格，适合处理大规模结构，但矩阵是全矩阵，公式推导较复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;软件&lt;/h2&gt;
&lt;p&gt;一些商业软件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;开发公司&lt;/th&gt;
&lt;th&gt;求解器类型&lt;/th&gt;
&lt;th&gt;应用领域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ansys HFSS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ANSYS&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;(High Frequency Structure Simulation) 天线设计、射频电路、无线通信设备、雷达系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.ansys.com/products/electronics/ansys-maxwell"&gt;&lt;strong&gt;Ansys Maxwell&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ANSYS&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;（Low Frequency）电机设计、变压器、感应加热、传感器、磁体设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.ansys.com/products/optics/fdtd"&gt;&lt;strong&gt;Ansys Lumerical FDTD&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ANSYS&lt;/td&gt;
&lt;td&gt;FDTD&lt;/td&gt;
&lt;td&gt;高频仿真，特别适合光子学、纳米技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.ansys.com/products/optics/multiphysics"&gt;&lt;strong&gt;Ansys Lumerical Multiphysics&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ANSYS&lt;/td&gt;
&lt;td&gt;FEM、FDTD、EIGENMODE&lt;/td&gt;
&lt;td&gt;高频仿真，特别适合光子学、纳米技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.3ds.com/products/simulia/cst-studio-suite"&gt;&lt;strong&gt;CST Studio Suite&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dassault Systèmes&lt;/td&gt;
&lt;td&gt;FDTD、FEM、积分方程法（IE）、静电求解器&lt;/td&gt;
&lt;td&gt;微波电路、天线设计、电磁兼容性（EMC/EMI）分析、射频电路&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.3ds.com/products/simulia/opera"&gt;&lt;strong&gt;SIMULIA Opera&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dassault Systèmes&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;静态场仿真，适合电透镜、磁透镜、加速器设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.comsol.com/comsol-multiphysics"&gt;&lt;strong&gt;COMSOL Multiphysics&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;COMSOL&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;电机设计、传感器、感应加热、电磁加热&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://altair.com/feko"&gt;&lt;strong&gt;Altair Feko&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Altair Engineering&lt;/td&gt;
&lt;td&gt;MoM、FEM、GO、PO&lt;/td&gt;
&lt;td&gt;天线设计、雷达散射、无线通信、汽车电子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.altair.com/flux/"&gt;&lt;strong&gt;Altair Flux&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Altair Engineering&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;低频、静态场仿真，适合电机、磁性设备设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://plm.sw.siemens.com/en-US/simcenter/electromagnetics-simulation/magnet/"&gt;&lt;strong&gt;Simcenter MagNet&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Siemens (原Infolytica)&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;低频和静磁场仿真，适合磁透镜、电机设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Keysight EMPro&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Keysight Technologies&lt;/td&gt;
&lt;td&gt;FEM、FDTD&lt;/td&gt;
&lt;td&gt;微波电路、天线、PCB设计、射频组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://quickfield.com/"&gt;&lt;strong&gt;QuickField&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;静态场和准静态场仿真，适合电透镜和磁透镜&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.remcom.com/xf7"&gt;&lt;strong&gt;XFdtd&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FDTD&lt;/td&gt;
&lt;td&gt;高频电磁仿真，适合天线、微波电路仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.jmag-international.com/products/"&gt;&lt;strong&gt;JMAG&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;JSOL&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;低频、静态电磁场仿真，适合电机、传感器设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://simion.com/info/poisson_superfish.html"&gt;&lt;strong&gt;POISSON Superfish&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;simion&lt;/td&gt;
&lt;td&gt;FEM(2D)&lt;/td&gt;
&lt;td&gt;静态场仿真，适合粒子加速器、电透镜和磁透镜&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一些开源软件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;开发组织&lt;/th&gt;
&lt;th&gt;求解器类型&lt;/th&gt;
&lt;th&gt;应用领域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/elmercsc/elmerfem"&gt;Elmer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;CSC – IT Center for Science&lt;/td&gt;
&lt;td&gt;有限元法（FEM）&lt;/td&gt;
&lt;td&gt;开源软件，适合低频和静态场仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freefem.org/"&gt;FreeFEM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;支持静电场，静磁场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://fenicsproject.org/"&gt;Fenics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;有python绑定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://getdp.info/"&gt;GetDP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FEM&lt;/td&gt;
&lt;td&gt;开源软件，支持静态电磁场仿真，适合复杂几何&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://openems.de/"&gt;GMSH + OpenEMS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FDTD&lt;/td&gt;
&lt;td&gt;开源工具，低频、静态场仿真，适合学术研究&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://meep.readthedocs.io/en/latest/"&gt;Meep&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FDTD&lt;/td&gt;
&lt;td&gt;开源软件，适合光子学、纳米结构、电磁波仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.openfoam.com/"&gt;OpenFOAM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;有限体积法（FVM），支持电磁模块&lt;/td&gt;
&lt;td&gt;开源软件，主要用于流体仿真，但支持电磁仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIwODc4NzE1OA==&amp;amp;mid=2247508781&amp;amp;idx=1&amp;amp;sn=00a6badc7461fc6b6f03c2b092de7f98&amp;amp;chksm=977f2094a008a98278ec0c36047fffa33336335e28959bb2e55e88d3e4b8db326259725993bf&amp;amp;scene=27"&gt;电磁计算方法的发展与展望&lt;/a&gt; &lt;a href="https://www.sohu.com/a/659900326_121124371"&gt;链接2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://empossible.net/academics/emp5337/&lt;/li&gt;
&lt;li&gt;https://engineering.purdue.edu/wcchew/ece604f19/Lecture%20Notes/Lect36.pdf&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Computational_electromagnetics&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/List_of_finite_element_software_packages&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="module"&gt;
    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true });
&lt;/script&gt;</content><category term="CAx"></category></entry><entry><title>模拟电路仿真SPICE小记</title><link href="https://blog.debao.me/2024/08/notes-on-spice/" rel="alternate"></link><published>2024-08-19T20:26:00+08:00</published><updated>2024-08-19T20:26:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-08-19:/2024/08/notes-on-spice/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-eda-softwares/"&gt;EDA小记&lt;/a&gt;，查查SPICE内容，胡乱整理一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SPICE，取自&lt;strong&gt;Simulation Program with Integrated Circuit Emphasis&lt;/strong&gt;（集成电路通用模拟程序）首字母缩写 ，是一种用于电路描述与仿真的 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;接前面&lt;a href="https://blog.debao.me/2024/04/notes-on-eda-softwares/"&gt;EDA小记&lt;/a&gt;，查查SPICE内容，胡乱整理一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SPICE，取自&lt;strong&gt;Simulation Program with Integrated Circuit Emphasis&lt;/strong&gt;（集成电路通用模拟程序）首字母缩写 ，是一种用于电路描述与仿真的语言和仿真器软件，用于检测电路的连接和功能的完整性，以及用于预测电路的行为。&lt;/p&gt;
&lt;h2 id="spice"&gt;SPICE 历史&lt;/h2&gt;
&lt;p&gt;SPICE，1975年由加利福尼亚大学伯克莱分校的Donald Pederson在电子研究实验室首先建立的。第一版和第二版都是用Fortran语言编写的，从第三版开始用&lt;a href="https://zh.wikipedia.org/wiki/C" title="C"&gt;C&lt;/a&gt;语言编写。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1973：SPICE1&lt;/li&gt;
&lt;li&gt;1975：SPICE2，最后一个版本 SPICE2G.6(1983)，当今很多商业仿真器基于这个版本&lt;/li&gt;
&lt;li&gt;1989：SPICE3，最后一个版本 SPICE3f.5(1993)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;商业软件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HSPICE：1970年代末，由Meta-Software开发，1980年代成为集成电路行业的标准工具，1994年被收入Synopsys旗下。&lt;/li&gt;
&lt;li&gt;PSPICE：第一个用于PC机的SPICE，1980年代初由MicroSim开发，1998年被OrCAD收购，1999年OrCAD被Cadence收购。&lt;/li&gt;
&lt;li&gt;NI Multisim：1990年代由Interactive Image Technologies开发，最初叫做Electronics Workbench，后称为Multisim。2005被 National Instruments收购。提供直观的图形化设计环境，易于使用。&lt;/li&gt;
&lt;li&gt;IsSPICE：1985年由Intusoft推出，用于研究或中小型项目&lt;/li&gt;
&lt;li&gt;MICROCAP：1980年代末，由Spectrum Software开发，2019年停止开发。版本停留在 Micro-Cap 12，商业软件变为免费提供&lt;/li&gt;
&lt;li&gt;ProSPICE：Proteus中使用的SPICE仿真器。Proteus 由 Labcenter Electronics 于1988开发。Proteus支持MCU模拟。&lt;/li&gt;
&lt;li&gt;LTspice：1990年代末由Linear Technology发布，2017年被Analog Devices收购。免费提供。包含Analog Devices元件库。&lt;/li&gt;
&lt;li&gt;TINA：Toolkit for Interactive Network Analysis是基于SPICE的仿真软件，由DesignSoft于1990年发布。支持模拟、数字、射频以及MCU。&lt;/li&gt;
&lt;li&gt;TINA-TI：DesignSoft的TINA的受限版本。2004年起由Texas Instruments免费提供。包含 TI 提供的丰富元件库，便于使用 TI 产品进行设计。注意，它比TINA学生版相比，功能都受限。（另外，它和PSpice for TI无关）&lt;/li&gt;
&lt;li&gt;PSPICE for TI：由 Texas Instruments (TI) 提供的电路仿真工具，基于 Cadence 设计系统的 PSpice 技术。此工具专为设计涉及 TI 元件的电子电路的工程师而开发。免费提供&lt;/li&gt;
&lt;li&gt;QSPICE：qorvo公司免费提供。它是由原LTspice的作者开发的。支持C++/Verilog编译器。包含Qorvo器件库。&lt;/li&gt;
&lt;li&gt;AIM-SPICE：1990年代由 俄罗斯科学院 开发，含义 Automatic Integrated Circuit Modeling Spice，旨在为学术研究和教育提供免费的电路仿真工具。免费，但是社区不大&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有很多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SmartSpice&lt;/li&gt;
&lt;li&gt;HSIM&lt;/li&gt;
&lt;li&gt;NANOSIM&lt;/li&gt;
&lt;li&gt;ADiT&lt;/li&gt;
&lt;li&gt;ULTRASIM&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;追求免费的话，LTspice似乎是社区比较大的。另外QSPICE由于是LTspice的原作者新开发的，似乎也有点意思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;开源软件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ngspice：开源软件，融合了XSPICE和CIDER等变体。它本身是一个基于命令行的电路仿真器，但是它可以与其他图形界面工具集成。比如KiCad, Qucs-S 等，另外EasyEDA、Autodesk fusion、Altium Designer等也支持ngspice。&lt;/li&gt;
&lt;li&gt;XYCE：由美国桑迪亚国家实验室开发的，支持并行计算，适合大规模电路模型。它没有基于SPICE的代码，是重新开发的兼容SPICE的程序。&lt;/li&gt;
&lt;li&gt;WRspice：WrSpice是JSPICE3的继任者，它使用C++进行了重写，在一些行为上（SPICE和HSPICE不一致时），向HSPICE靠拢。WRspice由 Whiteley Research Inc. (WRI) 开发和维护，2017年起已经停止维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XSPICE由Georgia Tech开发，添加数模混合仿真功能；CIDER（CODECS）是由U.C. Berkeley和Oregon State University合作开发，支持半导体器件的数值仿真，并利用数值仿真结果进行电路分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="ngspice-gui"&gt;配合ngspice 的 GUI 程序&lt;/h4&gt;
&lt;p&gt;以下是一些可以与 ngspice 集成，提供图形界面的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KiCad  (使用 wxwidgets 这一跨平台 C++的 UI库)&lt;/li&gt;
&lt;li&gt;Qucs-S （使用 Qt 这一跨平台 C++的 UI库）: 网址 https://ra3xdh.github.io/，派生自Qucs，但是使用Spice。&lt;/li&gt;
&lt;li&gt;gEDA （使用GTK+ 这一个gnome的UI库）&lt;/li&gt;
&lt;li&gt;XSchem：在Unix下使用X11和Tcl-Tk库。&lt;/li&gt;
&lt;li&gt;EasyEDA（Web端）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，多个商业软件可以支持/使用 ngspice：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eagle 8.4&lt;/li&gt;
&lt;li&gt;Altium Designer 20&lt;/li&gt;
&lt;li&gt;Autodesk fusion&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;网表文件语法&lt;/h2&gt;
&lt;p&gt;尽管现代多数仿真工具可以通过电路图输入，还是有必要先了解一下SPICE基础的语法。&lt;/p&gt;
&lt;p&gt;SPICE语法主要涉及电路描述文件（通常为.cir或.sp文件），该文件包含了定义和分析电路所需的所有指令和元件描述。&lt;/p&gt;
&lt;h3 id="_4"&gt;基本组成&lt;/h3&gt;
&lt;p&gt;SPICE的输入文件主要由以下几部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标题行（Title Card/Title Line）：文件的第一行，用于描述电路或仿真的简要信息。&lt;/li&gt;
&lt;li&gt;元件说明（Element Cards）：描述电路中的具体元件，如电阻、电容、电感、晶体管等。&lt;/li&gt;
&lt;li&gt;控制语句（Control Statements）：指定仿真类型（如直流分析、交流分析、瞬态分析等）和输出要求。&lt;/li&gt;
&lt;li&gt;模型描述（Model Descriptions）：定义特定元件的详细物理特性&lt;/li&gt;
&lt;li&gt;结束行（.END）：标记文件结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释行（Comment)：&lt;/li&gt;
&lt;li&gt;子电路(Subcircuit)：&lt;/li&gt;
&lt;li&gt;文件包含(.INCLUDE)：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SPICE在1970年代被开发时，打孔卡还是主要的数据输入手段之一，每个电路元件或控制语句通常对应一行输入，这被视为一个“card”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;数字？&lt;/h3&gt;
&lt;p&gt;SPICE大小写不敏感，数字数量级的单位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T = 10^12&lt;/li&gt;
&lt;li&gt;G = 10^9&lt;/li&gt;
&lt;li&gt;Meg = 10^6&lt;/li&gt;
&lt;li&gt;K = 10^3&lt;/li&gt;
&lt;li&gt;mil = 25.4x10^-6&lt;/li&gt;
&lt;li&gt;m = 10^-3&lt;/li&gt;
&lt;li&gt;u = 10^-6&lt;/li&gt;
&lt;li&gt;n = 10^-9&lt;/li&gt;
&lt;li&gt;p = 10^-12&lt;/li&gt;
&lt;li&gt;f = 10^-15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不加数量级的数字，可以表示为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;5&lt;/span&gt;
&lt;span class="mf"&gt;5.0&lt;/span&gt;
&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="n"&gt;E3&lt;/span&gt;
&lt;span class="mf"&gt;5.0E3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;单位：V、A、HZ、OHM、H、F、DEG&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，最好不要加单位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_6"&gt;标题行&lt;/h3&gt;
&lt;p&gt;标题行必须是输入文件的第一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;My first circuit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_7"&gt;结束行&lt;/h3&gt;
&lt;p&gt;结束行，注意前面的 &lt;code&gt;.&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_8"&gt;注释行&lt;/h3&gt;
&lt;p&gt;与C语言中使用 &lt;code&gt;//&lt;/code&gt;或 &lt;code&gt;/* */&lt;/code&gt;进行注释不同，SPICE中使用星号（&lt;code&gt;*&lt;/code&gt;）来注释行，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;这是一个注释&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;行内注释，使用分号 &lt;code&gt;;&lt;/code&gt;，有的用SPICE支持 &lt;code&gt;$&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;V1 1 0 DC 10V ; 这是电源定义，电压为10V
R1 1 2 1k ; 这是一个电阻，阻值为1千欧姆
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_9"&gt;续行&lt;/h3&gt;
&lt;p&gt;在不同的 SPICE 版本中，续行符的使用有细微的差异。在多数 SPICE 方言中，使用加号（+）作为续行符。加号放在新行的行首。&lt;/p&gt;
&lt;h3 id="_10"&gt;元件说明&lt;/h3&gt;
&lt;p&gt;每个元件在SPICE中都用一行文本描述，格式通常为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;类型&amp;gt;&amp;lt;名称&amp;gt; &amp;lt;连接节点&amp;gt; &amp;lt;参数&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;例如，电阻类型用R标识，一个电阻可以描述为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;R1 1 2 100k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这表示一个名为R1的电阻，连接在节点1和节点2之间，阻值为100千欧姆。&lt;/p&gt;
&lt;p&gt;注意，名字和节点，不一定用数字（节点地必须是0）。所以下面也可以&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Rabc myin1 myin2 100000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;常用元件的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;：电阻 (Resistor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;：电容 (Capacitor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;：电感 (Inductor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;：独立电压源 (Independent Voltage Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;：独立电流源 (Independent Current Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;：电压控制电压源 (Voltage-Controlled Voltage Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt;：电压控制电流源 (Voltage-Controlled Current Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;：电流控制电压源 (Current-Controlled Voltage Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt;：电流控制电流源 (Current-Controlled Current Source)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;：二极管 (Diode)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;：双极型晶体管 (Bipolar Junction Transistor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;：MOSFET (Metal-Oxide-Semiconductor Field-Effect Transistor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;J&lt;/strong&gt;：JFET (Junction Field-Effect Transistor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_11"&gt;控制语句&lt;/h3&gt;
&lt;p&gt;控制语句以点（.）开始，用于定义仿真的设置和进行的分析类型。常见的控制语句包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.DC：直流扫描分析&lt;/li&gt;
&lt;li&gt;.AC：交流扫描分析&lt;/li&gt;
&lt;li&gt;.TRAN：瞬态分析&lt;/li&gt;
&lt;li&gt;.OP：工作点分析(Operation Point Analysis)&lt;/li&gt;
&lt;li&gt;.PRINT：定义输出变量&lt;/li&gt;
&lt;li&gt;.PLOT：定义绘图输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NODESET：为电路节点提供初始电压&lt;strong&gt;估计&lt;/strong&gt;，有助于加速仿真收敛&lt;/li&gt;
&lt;li&gt;.IC：Initial Condition，为某些节点设置仿真开始时的确切电压或初始条件。常用于瞬态分析。&lt;/li&gt;
&lt;li&gt;.OPTION：设置仿真的各种参数，比如迭代步长、容差、输出格式等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，进行一个瞬态分析的控制语句可能如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.TRAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;us&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="no"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这表示进行瞬态分析，步长为1微秒，总时长为100毫秒。&lt;/p&gt;
&lt;p&gt;在ngspice中，支持.control 块功能。块中可以包含任何有效的 ngspice 命令，比如设定仿真选项、执行仿真和后处理数据等。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.control&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;ngspice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;命令&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;.endc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_12"&gt;模型描述&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;设备模型对于准确模拟电子元件在各种条件下的行为至关重要。SPICE定义了多种模型类型，每种模型在 SPICE 中都有特定的参数集，这些参数可以根据实际器件的数据手册进行调整以匹配实际行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SPICE中的.MODEL语句允许用户定义诸如二极管、晶体管等半导体器件的特性。这些模型有助于预测器件在电路中的运行情况。&lt;/p&gt;
&lt;p&gt;.MODEL语句在SPICE中的通用格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.MODEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;MNAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PNAME1&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="no"&gt;PVAL1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;PNAME2&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="no"&gt;PVAL2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;MNAME：这是模型名称，用于在仿真的其他部分中唯一标识此模型。&lt;/li&gt;
&lt;li&gt;TYPE：指定设备的类型。常见类型包括MOSFET的NMOS和PMOS，双极结型晶体管的NPN和PNP，二极管的D等。&lt;/li&gt;
&lt;li&gt;PNAME1, PNAME2, ...：这些是针对所建模设备类型的参数名称。&lt;/li&gt;
&lt;li&gt;PVAL1, PVAL2, ...：每个参数的对应值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MODEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MYMNAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NMOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LEVEL&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VTO&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m m-Double"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;KP&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;W&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这定义了一个NMOS型号为M1的模型，指定了多个物理参数。&lt;/p&gt;
&lt;p&gt;定义好之后，可以通过原件类型M使用它。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;M1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MYMNAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这里，M1 是NMOS晶体管的实例，1、2、3、4是连接节点（分别是栅极、漏极、源极和衬底），MNMOS是之前定义的模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：区分SPICE模型于IBIS模型。不同于 SPICE模型是一种基于文本的行为模型，SPICE仿真器使用这种模型通过数学运算预测器件在不同条件下的行为。IBIS是Input/Output Buffer Information Specification（输入/输出缓冲器信息规范）的首字母缩写。它是一种行为模型，描述器件的数字输入和输出缓冲器的模拟行为。它由表格数据组成，描述数字缓冲器内元器件的电流-电压(I-V)关系，以及输出或I/O缓冲器的电压随时间变化的(V-t)开关特性。它用于在制造之前对系统板进行信号完整性分析，并以纯ASCII文本格式的数据呈现。它不披露任何专有信息，因为IBIS模型就像一个黑盒模型，不包含可逆向工程的内部信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_13"&gt;子电路&lt;/h3&gt;
&lt;p&gt;子电路在 SPICE 中是通过 .SUBCKT 语句定义的，其结构允许将一组电路元件封装成单一的实体。定义子电路的基本语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.SUBCKT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;子电路名&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;输入端口节点&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;输出端口节点&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;其他端口节点&lt;/span&gt;&lt;span class="no"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;&lt;span class="err"&gt;（电路元件描述）&lt;/span&gt;
&lt;span class="na"&gt;.ENDS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;子电路名&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;.ENDS 后面的子电路名可以省略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子电路的调用就像使用任何其他内置元件一样。调用子电路的语法通常如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;X&amp;lt;名称&amp;gt; &amp;lt;连接节点列表&amp;gt; &amp;lt;子电路名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;定义子电路OPAMP&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nx"&gt;端口分配&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;输入&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;输入&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;输出&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBCKT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OPAMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nx"&gt;Rin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;
&lt;span class="nx"&gt;G1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;
&lt;span class="nx"&gt;Rout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ENDS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OPAMP&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;调用子电路OPAMP&lt;/span&gt;
&lt;span class="nx"&gt;XU1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OPAMP&lt;/span&gt;
&lt;span class="nx"&gt;V1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;Rload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;OPAMP 是子电路的名称，1, 2, 3 是端口节点。内部包含了输入电阻 Rin，一个控制源 G1 和输出电阻 Rout。&lt;/li&gt;
&lt;li&gt;XU1 表示一个子电路实例，连接到节点 1, 0, 和 2。OPAMP 是调用的子电路名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_14"&gt;文件包含&lt;/h3&gt;
&lt;p&gt;.INCLUDE 语句的基本语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.INCLUDE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;文件路径&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;.INCLUDE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;文件路径2&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;文件路径是要引入文件的完整或相对路径。使用双引号（"）或单引号（'）均可用来包围文件路径。&lt;/p&gt;
&lt;p&gt;非标准的 .LIB，在一些SPICE中，用于导入第三方库。比如ngspice中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;LIB filename libname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="_15"&gt;函数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SPICE 提供了多种内置函数，函数可以在 SPICE 仿真中用于不同的目的，包括定义复杂的源特性、控制电路行为，以及分析和优化电路性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数学函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;abs(x)&lt;/strong&gt; - 返回 x 的绝对值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sqrt(x)&lt;/strong&gt; - 返回 x 的平方根。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exp(x)&lt;/strong&gt; - 计算 e 的 x 次方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log(x)&lt;/strong&gt; - 计算 x 的自然对数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sin(x)&lt;/strong&gt; - 计算 x 的正弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cos(x)&lt;/strong&gt; - 计算 x 的余弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tan(x)&lt;/strong&gt; - 计算 x 的正切值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asin(x)&lt;/strong&gt; - 计算 x 的反正弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;acos(x)&lt;/strong&gt; - 计算 x 的反余弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;atan(x)&lt;/strong&gt; - 计算 x 的反正切值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sinh(x)&lt;/strong&gt; - 计算 x 的双曲正弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cosh(x)&lt;/strong&gt; - 计算 x 的双曲余弦值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tanh(x)&lt;/strong&gt; - 计算 x 的双曲正切值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑和条件函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;if(cond, then_expr, else_expr)&lt;/strong&gt; - 根据条件 &lt;code&gt;cond&lt;/code&gt; 返回 &lt;code&gt;then_expr&lt;/code&gt; 或 &lt;code&gt;else_expr&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sgn(x)&lt;/strong&gt; - 返回 x 的符号，正数为1，负数为-1，零为0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;u(x)&lt;/strong&gt; - 单位阶跃函数，x 大于0时返回1，否则返回0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊电路分析函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;limit(x, min, max)&lt;/strong&gt; - 将 x 限制在 min 和 max 之间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pow(x, y)&lt;/strong&gt; - 计算 x 的 y 次幂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min(x, y)&lt;/strong&gt; - 返回 x 和 y 中的最小值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max(x, y)&lt;/strong&gt; - 返回 x 和 y 中的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 SPICE 及其许多变体中，.func 指令用于定义用户自定义的数学函数，这些函数可以在电路描述中被重用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;函数名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;参数&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;参数&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;参数&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;表达式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="spice_1"&gt;SPICE 解算器?&lt;/h2&gt;
&lt;p&gt;SPICE使用数值积分方法来求解由网表定义的电路方程。这些方程通常是非线性微分方程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;节点分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;基于节点电压法，将电路转化为节点电压方程。利用基尔霍夫电流定律（KCL）构建方程。
2. &lt;strong&gt;稀疏矩阵技术&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;由于电路方程组通常是稀疏的，SPICE 使用稀疏矩阵存储和操作数据，以节省内存和提高计算速度。
3. &lt;strong&gt;牛顿-拉夫森迭代法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;用于求解非线性电路方程。通过线性化非线性方程并反复迭代逼近求解。&lt;/li&gt;
&lt;li&gt;每次迭代计算雅可比矩阵，并求解线性方程组。
4. &lt;strong&gt;瞬态分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;使用梯形积分法和向后欧拉法进行时间步进，模拟电路的动态行为。&lt;/li&gt;
&lt;li&gt;梯形法稳定性高，适合大多数电路仿真。
5. &lt;strong&gt;直流分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;计算电路在直流稳态下的行为。通过迭代求解节点电压，确定稳态电流和电压。
6. &lt;strong&gt;交流分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;通过线性化电路，使用小信号模型进行频域分析。&lt;/li&gt;
&lt;li&gt;计算电路的增益、相位等频率响应特性。
7. ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_16"&gt;杂项&lt;/h2&gt;
&lt;h3 id="_17"&gt;命令行&lt;/h3&gt;
&lt;p&gt;SPICE有交互式模式、批处理模式以及server模式。不过直接手动编辑spice文件的场景应该挺少了，都是通过GUI界面绘制电路图。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于ngspice来说，其他软件还可以直接使用其动态库，比如KiCAD。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="ngspice"&gt;ngspice 行为&lt;/h3&gt;
&lt;p&gt;ngspice源自spice3f5，远远不像其他商业版本进化那么快。通过 ngbehavior 来模拟一些兼容行为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set ngbehavior=ltpsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;注意写法，这些都是Flag！可以多个同时使用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Short Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A complete netlist transformed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PSPICE compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HSPICE compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Spectre compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LTSPICE compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Spice3 compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All (currently not used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ki&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;KiCad compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EAGLE compatibility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For 'make check' (test environments)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_18"&gt;模型导入&lt;/h3&gt;
&lt;p&gt;在实际中，由于同一个型号的半导体器件，可能由多个半导体制造商生产，尽管他们基本的电气特性可能相似，但是细节上还有差异。比如 1N4148 是一种非常普遍的开关二极管，但是各个仿真软件因为使用不同厂家的器件，造成参数不同。有时需要手动导入仿真软件没有提供的器件模型&lt;/p&gt;
&lt;p&gt;模型可以是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;.MODEL&lt;/code&gt; 使用内置模型，只是修改一下参数&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;.subckt&lt;/code&gt; 定义新的使用各个内置模型创建的子电路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接编辑spice文件的话，使用 &lt;code&gt;.include&lt;/code&gt;似乎就够了，但是在GUI下，需要编辑器件（对应好引脚，这样电路图和仿真模型才能对应）&lt;/p&gt;
&lt;p&gt;对于Kicad(NGSpice)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://docs.kicad.org/8.0/en/eeschema/eeschema.html#assigning_models&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/ngspice-eeschema.html#OpAmp1641&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于LTSpice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.analog.com/en/resources/technical-articles/ltspice-simple-steps-to-import-third-party-models.html"&gt;LTspice: Simple Steps to Import Third-Party Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://ieee.li/pdf/viewgraphs/ltspice_importing_third_party_models.pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于MutiSim&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://knowledge.ni.com/KnowledgeArticleDetails?id=kA03q000000YH5fCAG&amp;amp;l=zh-CN"&gt;在NI Multisim中创建自定义组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://knowledge.ni.com/KnowledgeArticleDetails?id=kA03q000000YIN6CAO&amp;amp;l=zh-CN"&gt;在没有组件向导的情况下将SPICE模型导入Multisim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_19"&gt;在线仿真网站&lt;/h2&gt;
&lt;p&gt;有一堆在线网站，后台是否和spice有关不清楚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multisim live（商业，收费）：https://www.multisim.com/&lt;/li&gt;
&lt;li&gt;easyeda（国产，免费，后台使用ngspice）：https://easyeda.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;circuitlab: https://www.circuitlab.com/&lt;/li&gt;
&lt;li&gt;everycircuit： https://everycircuit.com/&lt;/li&gt;
&lt;li&gt;circuitverse：https://circuitverse.org/simulator&lt;/li&gt;
&lt;li&gt;falsted:  https://www.falstad.com/circuit/&lt;/li&gt;
&lt;li&gt;circuitjs：https://lushprojects.com/circuitjs/&lt;/li&gt;
&lt;li&gt;dcalab：https://dcaclab.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_20"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/SPICE&lt;/li&gt;
&lt;li&gt;http://www.ecircuitcenter.com/SpiceTopics/History.htm&lt;/li&gt;
&lt;li&gt;http://www.ecircuitcenter.com/SPICEsummary.htm&lt;/li&gt;
&lt;li&gt;https://web.archive.org/web/20090928075648/http://newton.ex.ac.uk/teaching/CDHW/Electronics2/userguide/sec2.html&lt;/li&gt;
&lt;li&gt;https://www.altium.com/documentation/knowledge-base/altium-designer/understand-spice-models-supported-in-altium&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/ngspice-eeschema.html&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/resources.html&lt;/li&gt;
&lt;li&gt;https://xyce.sandia.gov/&lt;/li&gt;
&lt;li&gt;https://people.eecs.berkeley.edu/~boser/courses/40/software/MultiSim-Tutorial.pdf&lt;/li&gt;
&lt;li&gt;https://www.tina.com/&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/TINA_(program)&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/resources.html&lt;/li&gt;
&lt;li&gt;https://p.qorvo.com/qspice-simulator.html&lt;/li&gt;
&lt;li&gt;http://www.intusoft.com/icap.htm&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/docs/ngspice-42-manual.pdf&lt;/li&gt;
&lt;li&gt;https://m.elecfans.com/article/1925576.html&lt;/li&gt;
&lt;li&gt;https://www.analog.com/en/resources/analog-dialogue/articles/spice-vs-ibis-choosing-the-more-appropriate-model-for-your-circuit.html&lt;/li&gt;
&lt;li&gt;http://www.wrcad.com/manual/wrsmanual/wrsmanual.html&lt;/li&gt;
&lt;li&gt;https://xschem.sourceforge.io/stefan/index.html&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>电子光学仿真软件小记</title><link href="https://blog.debao.me/2024/08/notes-on-electron-optical-simulation-softwares/" rel="alternate"></link><published>2024-08-13T19:13:00+08:00</published><updated>2024-08-13T19:13:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-08-13:/2024/08/notes-on-electron-optical-simulation-softwares/</id><summary type="html">&lt;p&gt;简单记录一下电子光学仿真软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电磁场计算（FEM、DEM、BEM等）&lt;/li&gt;
&lt;li&gt;基于轨迹追踪的光学属性分析、优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mebsmunros-electron-beam-software"&gt;MEBS（Munro's Electron Beam software）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Munro’s Electron Beam Software Ltd 是一 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;简单记录一下电子光学仿真软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电磁场计算（FEM、DEM、BEM等）&lt;/li&gt;
&lt;li&gt;基于轨迹追踪的光学属性分析、优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mebsmunros-electron-beam-software"&gt;MEBS（Munro's Electron Beam software）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Munro’s Electron Beam Software Ltd 是一家成立于1991年的英国公司，创始人是Eric Munro、John rouse和Xieqing zhu。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上学期间，曾拜读过Munro先生在上世纪80年代用fortran 77编写的一阶有限元计算程序，一共有四个程序，其中E11用于静电透镜的电场分布计算，M11、M12、M13用于磁透镜的磁场计算：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*****************************************&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;                                       &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ERIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUNRO&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ELECTRON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LENS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROGRAMS&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;IBM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;COPYRIGHT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ERIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUNRO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SEPT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1985&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;                                       &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*****************************************&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;PROGRAM &lt;/span&gt;&lt;span class="n"&gt;M13&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;FINITE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ELEMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PROGRAM &lt;/span&gt;&lt;span class="n"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;COMPUTING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AXIAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FLUX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DENSITY&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;DISTRIBUTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;AND &lt;/span&gt;&lt;span class="n"&gt;VECTOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POTENTIAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DISTRIBUTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;THROUGHOUT&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;THE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAGNETIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CIRCUITS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SATURATED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAGNETIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LENSES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;MEBS 包含众多的软件包，可以大致分成几个系列：&lt;/p&gt;
&lt;h3 id="optics"&gt;OPTICS 系列&lt;/h3&gt;
&lt;p&gt;OPTICS 是核心软件包系列，用于由任意旋转对称透镜和偏转器构成的电子和离子光学镜筒的仿真和设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPTICS：用于镜筒的模拟仿真，包含旋转对称透镜与偏转器的一阶有限元计算程序，aber象差分析程序等。&lt;/li&gt;
&lt;li&gt;REFINE与REFINE5：用于镜筒的优化&lt;/li&gt;
&lt;li&gt;DYNAMIC与DYNAMIC5：用于消象散器和动态聚焦透镜&lt;/li&gt;
&lt;li&gt;TOLERANCE：用于误差分析，比如生产或合轴过程中微小机械缺陷对象差影响。&lt;/li&gt;
&lt;li&gt;ABER5：五阶象差分析&lt;/li&gt;
&lt;li&gt;RB3与RB5：用于束流摇摆(rock)或倾斜（tilt）的分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sources"&gt;SOURCES 系列&lt;/h3&gt;
&lt;p&gt;SOURCES系列用于电子源或离子源的仿真与设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOURCES：只用于电子源和静电聚焦&lt;/li&gt;
&lt;li&gt;SOURCES-TOLERANCE：电子源误差分析&lt;/li&gt;
&lt;li&gt;SOURCE-MAGNETIC：用于包含磁聚焦的电子源设计&lt;/li&gt;
&lt;li&gt;SOURCE-CI：相较于SOURCES只考虑空间电荷效应，SOURCES-CI考虑带电粒子间的库伦相互作用（Coulomb Interactions）.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="image"&gt;IMAGE 系列&lt;/h3&gt;
&lt;p&gt;IMAGE系列使用直接轨迹追踪方式计算离散库伦相互作用和象差的综合效果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IMAGE-LENS：用于旋转对称透镜系统的象差和离散库伦相互作用仿真。只支持旋转对称透镜。&lt;/li&gt;
&lt;li&gt;IMAGE：支持偏转器，多极透镜与韦恩过滤器。&lt;/li&gt;
&lt;li&gt;IMAGE-TOLERANCE：支持误差分析&lt;/li&gt;
&lt;li&gt;PARALLEL-IMAGE：支持并行计算以发挥多核CPU优势&lt;/li&gt;
&lt;li&gt;MIRROR-IMAGE：用于电子和离子镜(Mirror)的仿真。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sofem"&gt;SOFEM 系列&lt;/h3&gt;
&lt;p&gt;SOFEM系列使用2阶(Second Order)有限元进行电磁场的计算与轨迹追踪。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOFEM Field：用于静电场和磁场的仿真&lt;/li&gt;
&lt;li&gt;SOFEM Ray-Tracing：使用轨迹追踪计算电子轨迹并进行绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3d"&gt;3D 系列&lt;/h3&gt;
&lt;p&gt;3D系列用于三维电磁场的计算以及直接电子追踪和空间电荷计算分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D Field：使用有限差分法进行三维静电场和磁场仿真&lt;/li&gt;
&lt;li&gt;3D Ray-Tracing：使用三维有限差分法进行轨迹追踪&lt;/li&gt;
&lt;li&gt;3D Space Charge：考虑空间电荷效应&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wien"&gt;WIEN 系列&lt;/h3&gt;
&lt;p&gt;WIEN 系列用于设计包含Wien过滤器的镜筒，可以处理旋转对称透镜、多极透镜以及Wien过滤器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WIEN：用于处理包含旋转对称透镜、多极透镜以及Wien过滤器的镜筒仿真。象差到3阶&lt;/li&gt;
&lt;li&gt;WIEN-REFINE：用于镜筒优化，象差到3阶&lt;/li&gt;
&lt;li&gt;WIEN-5：镜筒仿真，象差到5阶&lt;/li&gt;
&lt;li&gt;WIEN-REFINE-5：镜筒优化，象差到5阶&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multipole"&gt;MULTIPOLE 系列&lt;/h3&gt;
&lt;p&gt;MULTIPOLE 系列用于仿真包含多极透镜和偏转器的镜筒。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MULTIPOLE：用于处理包含旋转对称透镜、多极透镜和偏转器的镜筒仿真。象差到3阶&lt;/li&gt;
&lt;li&gt;MULTIPOLE-REFINE：镜筒优化&lt;/li&gt;
&lt;li&gt;MULTIPOLE-TOLERANCE：镜筒误差分析，比如生产或合轴过程中微小机械缺陷对象差影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="curve"&gt;CURVE 系列&lt;/h3&gt;
&lt;p&gt;CURVE 系列用户曲光轴的光学系统的仿真。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FILTER：用于磁能量过滤器&lt;/li&gt;
&lt;li&gt;PRISM：用于模拟磁棱镜系统，象差到3阶&lt;/li&gt;
&lt;li&gt;CURVED IMAGE：曲光轴光学系统中的象差与库伦相互作用仿真。是IMAGE的扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MIRROR：用于电子镜的仿真&lt;/li&gt;
&lt;li&gt;PROJECTION：用于模拟电子束投影系统，包括动态校正和高达五阶象差的优化。&lt;/li&gt;
&lt;li&gt;WAVE：用于计算电子束中的电流密度分布，考虑衍射、球差、色差等影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="eodelectron-optical-design"&gt;EOD（Electron Optical Design）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;EOD基于 Bohumila Lencova 编写的 SPOC 进行开发的。Bohumila Lencova当时就职于捷克科学院科学仪器研究所，并在代尔夫特理工大学做的访问科学家？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EOD可用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂形状的饱和此透镜计算？&lt;/li&gt;
&lt;li&gt;静电透镜计算（含电介质）&lt;/li&gt;
&lt;li&gt;磁透镜中鞍形或环形偏转器计算&lt;/li&gt;
&lt;li&gt;多极静电或磁场&lt;/li&gt;
&lt;li&gt;静电透镜与磁透镜的误差分析&lt;/li&gt;
&lt;li&gt;包括象差系数在内的高精度的光学属性分析&lt;/li&gt;
&lt;li&gt;精确的轨迹追踪，优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="simion"&gt;SIMION&lt;/h2&gt;
&lt;p&gt;SIMION® 是用于带电粒子光学仿真的软件。它主要计算二维/三维静电场和某些磁场，并计算带电粒子在这些场中的轨迹。还支持四极场中的低频（准静态）场。通过用户编程功能，可以模拟碰撞模型和其他特殊效果。&lt;/p&gt;
&lt;p&gt;SIMION 最初由 David Dahl 在现今的爱达荷国家实验室开发，它现在由 Adaptas Solutions, LLC开发。 该仿真程序采用的方法包括通过有限差分法（优化的超松弛和多网格方法）直接求解所需的偏微分方程特别是拉普拉斯方程，以及通过龙格-库塔法求解常微分方程。&lt;/p&gt;
&lt;h2 id="cpocharged-particle-optics"&gt;CPO（Charged Particle Optics）&lt;/h2&gt;
&lt;p&gt;CPO软件提供精确的空间电荷和空间电荷限制阴极发射计算，通过边界元法 (BEM) 进行高精度场计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPO3D：2D、3D静电系统仿真&lt;/li&gt;
&lt;li&gt;CPO3DS：2D、3D静电系统仿真，包含阴极与空间电荷仿真&lt;/li&gt;
&lt;li&gt;CPO Complete：包含电解质、空间电荷等所有变体&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CPO 32bit的程序可以免费下载使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="field-precision-llc"&gt;Field Precision LLC&lt;/h2&gt;
&lt;p&gt;Field Precision LLC 是一家专注于电磁场仿真和相关技术的软件开发公司。该公司成立于1989年，总部位于美国新墨西哥州阿尔伯克基。&lt;/p&gt;
&lt;p&gt;它提供3D仿真套件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HiPhi：静电场网格生成与数值分析&lt;/li&gt;
&lt;li&gt;Magnum：磁场网格生成与数值分析&lt;/li&gt;
&lt;li&gt;Aeter：频域与时域电磁场仿真&lt;/li&gt;
&lt;li&gt;OmniTrac：包含静电场、磁场数值分析与轨迹追踪等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及2D仿真套件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静电场套件&lt;/li&gt;
&lt;li&gt;磁场套件&lt;/li&gt;
&lt;li&gt;轨迹追踪套件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="e-gunspace-charge-particle-optics"&gt;E-GUN（Space Charge Particle Optics）&lt;/h2&gt;
&lt;p&gt;EGUN 是一种世界著名的模拟工具，由斯坦福线性加速器中心（SLAC）的 Bill Herrmannsfeldt 开发，用于电子枪的数值模拟。&lt;/p&gt;
&lt;p&gt;它的主要产品包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EGUN（EGN2w）：电子枪和电子光学仿真&lt;/li&gt;
&lt;li&gt;IGUN：离子源和离子光学仿真&lt;/li&gt;
&lt;li&gt;INTMAG：磁透镜仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="egun family" src="https://blog.debao.me/images/sem/egun-igun-family.jpg"&gt;&lt;/p&gt;
&lt;h2 id="inp"&gt;INP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;INP 系列软件工具官网地址暂时不清楚，似乎与德国的 GSI Helmholtz Centre for Heavy Ion Research&lt;a href="https://www.gsi.de"&gt;（GSI 重离子研究中心）&lt;/a&gt;有关系，。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;INP 是一组模拟工具，专注于离子源提取、粒子束传输、温度和磁场计算，包含以下模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AXCEL-INP：二维模拟粒子源和粒子束传输（轴对称或二维几何粒子行为分析），支持 ECR 离子源、激光离子源、电子枪。&lt;/li&gt;
&lt;li&gt;KOBRA3-INP：三维粒子源和粒子束模拟。支持等离子体模型和二次粒子计算，无对称性限制。&lt;/li&gt;
&lt;li&gt;MAGNET-INP：二维磁场计算，基于毕奥-萨伐尔法。输出磁场数据可用于前述 AXCEL-INP 和 KOBRA3-INP。&lt;/li&gt;
&lt;li&gt;DOT-INP：二维温度场计算，支持静态与瞬态解。可模拟热传导和热源影响下的温度分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ibsimu"&gt;IBSimu&lt;/h2&gt;
&lt;p&gt;IBSimu 是一个&lt;strong&gt;开源&lt;/strong&gt;的离子束仿真软件（C++库），用于模拟电场和磁场中带电粒子的运动。该软件特别适用于离子源、加速器和其他涉及带电粒子束传输的应用。IBSimu 是由芬兰 于韦斯屈莱大学（University of Jyväskylä） 物理系开发的。&lt;/p&gt;
&lt;p&gt;见：&lt;a href="https://indico.cern.ch/event/129870/contributions/117701/attachments/89886/128681/pres.pdf"&gt;Ion Beam Simulator&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个一个C++库。直接提供C++源代码，门槛有点高。另外界面部分使用Gtk+，对Windows也不友好...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="comsol-multiphysics"&gt;COMSOL Multiphysics&lt;/h2&gt;
&lt;p&gt;COMSOL 也可以用电子光学的仿真，官方有不少blog和例程，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://www.comsol.com/blogs/modeling-a-pierce-electron-gun-in-comsol-multiphysics&lt;/li&gt;
&lt;li&gt;https://www.comsol.com/paper/electron-trajectories-in-scanning-field-emission-microscopy-52501&lt;/li&gt;
&lt;li&gt;https://www.comsol.com/model/magnetic-lens-10185&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cst-particle-studio-cst-ps"&gt;CST Particle Studio (CST PS)&lt;/h2&gt;
&lt;p&gt;CST Studio Suite 由 Computer Simulation Technology (CST) 开发的高性能电磁场仿真软件。2016年被法国达索（Dassault Systèmes）收购，现在在达索的SIMULIA 品牌旗下。它包含多个模块，其中：&lt;/p&gt;
&lt;p&gt;CST PS专门用于带电粒子在电磁场中的运动仿真。非常适合用于粒子加速器、电子枪、X 射线管和其他涉及带电粒子束设备的设计与研究。&lt;/p&gt;
&lt;h2 id="opera"&gt;Opera&lt;/h2&gt;
&lt;p&gt;OPERA 的起源可以追溯到 1970 年代，由英国公司 Vector Fields 开发。Vector Fields 专注于开发用于静磁场和低频电磁场仿真的软件工具，目标是在那些需要高精度电磁场分析的领域提供有效的解决方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2005年，Vector Fields 被 Cobham 收购，成为其技术服务部门的一部分。&lt;/li&gt;
&lt;li&gt;2017 年，Dassault Systèmes收购了 Cobham 的一些业务，其中包括 OPERA 软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Opera 是 Dassault Systèmes 的产品,用于电磁场和粒子轨迹的模拟和分析。&lt;/p&gt;
&lt;h2 id="gptgeneral-particle-tracer"&gt;GPT（General Particle Tracer）&lt;/h2&gt;
&lt;p&gt;GPT 是Pulsar Physics的主要产品，该公司专注于charged particle accelerator与beam line设计。&lt;/p&gt;
&lt;p&gt;GPT 基于完整的三维粒子追踪技术，为研究电磁场中带电粒子动力学的三维和非线性效应提供了坚实基础。&lt;/p&gt;
&lt;h2 id="_2"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://mebs.co.uk/&lt;/li&gt;
&lt;li&gt;https://www.lencova.com/&lt;/li&gt;
&lt;li&gt;https://simion.com/&lt;/li&gt;
&lt;li&gt;https://www.electronoptics.com/&lt;/li&gt;
&lt;li&gt;http://egun-igun.com/&lt;/li&gt;
&lt;li&gt;https://www.mswil.com/suppliers/adaptas/&lt;/li&gt;
&lt;li&gt;http://www.fieldp.com&lt;/li&gt;
&lt;li&gt;https://www.comsol.com/comsol-multiphysics&lt;/li&gt;
&lt;li&gt;https://www.3ds.com/products/simulia/opera&lt;/li&gt;
&lt;li&gt;https://www.pulsar.nl/gpt/&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category></entry><entry><title>3D机械设计CAD软件小记</title><link href="https://blog.debao.me/2024/08/notes-on-3d-cad-softwares/" rel="alternate"></link><published>2024-08-09T00:44:00+08:00</published><updated>2024-08-09T00:44:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-08-09:/2024/08/notes-on-3d-cad-softwares/</id><summary type="html">&lt;p&gt;稍微整理一下&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;列个表&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;国外商业&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;开源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#freecad"&gt;FreeCAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openscad"&gt;OpenSCAD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;国产&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#viewer"&gt;Viewer？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;三维几何内核？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plm-vs-pdm"&gt;PLM vs PDM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plm"&gt;PLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pdm"&gt;PDM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;代表软件？&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CAD&lt;/td&gt;
&lt;td&gt;Computer-Aided Design&lt;/td&gt;
&lt;td&gt;创建精确 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;稍微整理一下&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;列个表&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;国外商业&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;开源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#freecad"&gt;FreeCAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openscad"&gt;OpenSCAD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;国产&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#viewer"&gt;Viewer？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;三维几何内核？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plm-vs-pdm"&gt;PLM vs PDM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plm"&gt;PLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pdm"&gt;PDM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;代表软件？&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CAD&lt;/td&gt;
&lt;td&gt;Computer-Aided Design&lt;/td&gt;
&lt;td&gt;创建精确的2D和3D设计模型&lt;/td&gt;
&lt;td&gt;SolidWorks, AutoCAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAE&lt;/td&gt;
&lt;td&gt;Computer-Aided Engineering&lt;/td&gt;
&lt;td&gt;模拟和分析产品性能&lt;/td&gt;
&lt;td&gt;ANSYS, Abaqus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAM&lt;/td&gt;
&lt;td&gt;Computer-Aided Manufacturing&lt;/td&gt;
&lt;td&gt;规划和控制制造过程&lt;/td&gt;
&lt;td&gt;Mastercam, Fusion 360&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAQ&lt;/td&gt;
&lt;td&gt;Computer-Aided Quality&lt;/td&gt;
&lt;td&gt;质量管理和检测&lt;/td&gt;
&lt;td&gt;Q-DAS, Minitab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAPP&lt;/td&gt;
&lt;td&gt;Computer-Aided Process Planning&lt;/td&gt;
&lt;td&gt;制定制造工艺流程&lt;/td&gt;
&lt;td&gt;Siemens Tecnomatix, CAPPS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;主要关注CAD&lt;/p&gt;
&lt;h2 id="_1"&gt;列个表&lt;/h2&gt;
&lt;h3 id="_2"&gt;国外商业&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;厂商&lt;/th&gt;
&lt;th&gt;别名或缩写&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;适用领域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SolidWorks&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dassault Systèmes&lt;/td&gt;
&lt;td&gt;SW&lt;/td&gt;
&lt;td&gt;参数化建模，模拟功能强大&lt;/td&gt;
&lt;td&gt;机械设计、产品开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AutoCAD&lt;/td&gt;
&lt;td&gt;Autodesk&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;经典CAD软件，支持2D和3D设计&lt;/td&gt;
&lt;td&gt;建筑、工程、制图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fusion&lt;/strong&gt; 360&lt;/td&gt;
&lt;td&gt;Autodesk&lt;/td&gt;
&lt;td&gt;F360&lt;/td&gt;
&lt;td&gt;云端平台，集成CAD、CAM、CAE&lt;/td&gt;
&lt;td&gt;合作设计、快速迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Creo&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PTC&lt;/td&gt;
&lt;td&gt;Pro/E（Pro/ENGINEER）&lt;/td&gt;
&lt;td&gt;参数化和直接建模功能&lt;/td&gt;
&lt;td&gt;产品设计和开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CATIA&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dassault Systèmes&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;适用于复杂和高精度设计&lt;/td&gt;
&lt;td&gt;航空航天、汽车行业&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inventor&lt;/td&gt;
&lt;td&gt;Autodesk&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;强大的仿真和可视化工具&lt;/td&gt;
&lt;td&gt;机械设计、3D建模&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NX&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Siemens&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;UG&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;集成CAD、CAM、CAE，适合复杂设计&lt;/td&gt;
&lt;td&gt;复杂产品设计和工程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Solid Edge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Siemens&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;参数化和同步建模功能&lt;/td&gt;
&lt;td&gt;中小型企业设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tinkercad&lt;/td&gt;
&lt;td&gt;Autodesk&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;3D 打印建模、简单电子设计 和 编程教学&lt;/td&gt;
&lt;td&gt;学生和教育工作者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Onshape&lt;/td&gt;
&lt;td&gt;PTC&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;参数化建模 和 协作设计&lt;/td&gt;
&lt;td&gt;实时协作，云存储&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Siemens NX 的前身是 Unigraphics。Unigraphics 是一款强大的 CAD/CAM/CAE 软件，由 Unigraphics Solutions 开发。Siemens 在 2007 年收购了 Unigraphics 的母公司 UGS，从而将 Unigraphics 整合为 Siemens NX。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;SolidWorks 的前身是由 Jon Hirschtick 于 1993 年创立的公司，目标是开发一款在 Windows 上运行的易用 3D CAD 软件。1995 年，推出了 SolidWorks 1.0，迅速受到欢迎。1997 年，Dassault Systèmes 收购了 SolidWorks。SolidWorks 使用 Parasolid 作为其几何建模内核。Parasolid 由 Siemens 开发，提供了稳定和精确的 3D 建模功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;开源&lt;/h3&gt;
&lt;h4 id="freecad"&gt;FreeCAD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://www.freecad.org/&lt;/li&gt;
&lt;li&gt;支持参数化建模&lt;/li&gt;
&lt;li&gt;可扩展插件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="openscad"&gt;OpenSCAD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://openscad.org/&lt;/li&gt;
&lt;li&gt;侧重于编程生成的设计&lt;/li&gt;
&lt;li&gt;适合需要精确参数化的模型&lt;/li&gt;
&lt;li&gt;通过脚本语言进行建模&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;国产&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zwsoft.cn/product/zw3d"&gt;中望3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gstarcad.com/3d/"&gt;浩辰3D软件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;应用领域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中望 3D&lt;/td&gt;
&lt;td&gt;参数化建模、曲面设计&lt;/td&gt;
&lt;td&gt;兼容性强，支持多种格式&lt;/td&gt;
&lt;td&gt;机械设计、模具设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;浩辰 3D&lt;/td&gt;
&lt;td&gt;3D建模、装配、工程图&lt;/td&gt;
&lt;td&gt;界面友好，易于上手&lt;/td&gt;
&lt;td&gt;建筑设计、工程应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="viewer"&gt;Viewer？&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;厂家&lt;/th&gt;
&lt;th&gt;支持格式&lt;/th&gt;
&lt;th&gt;主要特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JT2Go&lt;/td&gt;
&lt;td&gt;Siemens&lt;/td&gt;
&lt;td&gt;JT, 其他常见格式&lt;/td&gt;
&lt;td&gt;免费查看、标注、测量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eDrawings&lt;/td&gt;
&lt;td&gt;Dassault Systèmes&lt;/td&gt;
&lt;td&gt;SolidWorks, eDrawing&lt;/td&gt;
&lt;td&gt;查看和标注，支持多种文件格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Autodesk Viewer&lt;/td&gt;
&lt;td&gt;Autodesk&lt;/td&gt;
&lt;td&gt;DWG, DXF, 其他格式&lt;/td&gt;
&lt;td&gt;在线查看，多格式支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreeCAD&lt;/td&gt;
&lt;td&gt;开源社区&lt;/td&gt;
&lt;td&gt;多种CAD格式&lt;/td&gt;
&lt;td&gt;开源，支持查看和简单编辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blender&lt;/td&gt;
&lt;td&gt;开源社区&lt;/td&gt;
&lt;td&gt;OBJ, FBX, 3DS 等&lt;/td&gt;
&lt;td&gt;开源，3D查看和编辑功能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_5"&gt;三维几何内核？&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;三维几何内核&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;所有者&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;CAD 产品&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CGM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;法国 - 达索集团&lt;/td&gt;
&lt;td&gt;CATIA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ACIS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;美国 - Spatial 公司 (达索)&lt;/td&gt;
&lt;td&gt;Inventor（后使用 ShapeManager？）, Abaqus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Parasolid&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;德国 - 西门子&lt;/td&gt;
&lt;td&gt;NX, SolidWorks, SolidEdge, ANSYS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Granite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;美国 - PTC&lt;/td&gt;
&lt;td&gt;Creo（PRO/E）, Gibbs, Altair&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;C3D Molder&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;俄罗斯 - ASCON&lt;/td&gt;
&lt;td&gt;KOMPAS-3D, nanoCAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Overdrive&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中国 - 中望软件&lt;/td&gt;
&lt;td&gt;中望3D, ZWMeshWorks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CRUX IV&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中国 - 华天软件&lt;/td&gt;
&lt;td&gt;SINOVATION&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DGM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中国 - 华云三维&lt;/td&gt;
&lt;td&gt;CrownCAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Open Cascade&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;法国 - CapGemini&lt;/td&gt;
&lt;td&gt;FreeCAD, AnyCAD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="plm-vs-pdm"&gt;PLM vs PDM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如何对CAD设计的文件进行 版本管控和追踪，如何进行协作和共享...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;产品生命周期管理（PLM）和产品数据管理（PDM）是两个相关但不同的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDM：管理和组织产品数据，包括设计文档、版本控制、权限管理等。确保团队成员使用正确的版本，提高协作效率。&lt;/li&gt;
&lt;li&gt;PLM：涵盖产品从概念到退役的整个生命周期，包括设计、制造、服务等环节。PLM 包含 PDM 功能，但更关注整体流程和战略管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="plm"&gt;PLM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Teamcenter：与 Siemens CAD 软件（如 NX、Solid Edge）集成良好。&lt;/li&gt;
&lt;li&gt;Windchill：与 PTC Creo 配合使用。&lt;/li&gt;
&lt;li&gt;Enovia：与 Dassault Systèmes 产品（如 CATIA、SolidWorks）集成。&lt;/li&gt;
&lt;li&gt;Autodesk Vault：适用于 Autodesk 产品（如 AutoCAD、Inventor）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pdm"&gt;PDM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SolidWorks PDM：与 SolidWorks 紧密集成。&lt;/li&gt;
&lt;li&gt;Autodesk Vault：适用于 Autodesk 产品，如 AutoCAD 和 Inventor。&lt;/li&gt;
&lt;li&gt;Teamcenter Rapid Start：适用于 Siemens 的 CAD 软件。&lt;/li&gt;
&lt;li&gt;PTC Windchill PDM Essentials：与 Creo 集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edrawingsviewer.com/download-edrawings"&gt;Download eDrawings | eDrawings Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://viewer.autodesk.com/"&gt;Autodesk Viewer | Free Online File Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plm.sw.siemens.com/en-US/plm-components/jt/jt2go/"&gt;JT2Go JT File Viewer | Siemens Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category><category term="cad"></category></entry><entry><title>EDA软件小记</title><link href="https://blog.debao.me/2024/04/notes-on-eda-softwares/" rel="alternate"></link><published>2024-04-15T23:23:00+08:00</published><updated>2024-04-15T23:23:00+08:00</updated><author><name>Debao Zhang</name></author><id>tag:blog.debao.me,2024-04-15:/2024/04/notes-on-eda-softwares/</id><summary type="html">&lt;p&gt;EDA（Electronic design automation) 用于设计电子设备，电子设备可能包括集成电路（IC）、印制电路板（PCB）、现场可编程门阵列（FPGA）或它们的组合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先简单搜 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;EDA（Electronic design automation) 用于设计电子设备，电子设备可能包括集成电路（IC）、印制电路板（PCB）、现场可编程门阵列（FPGA）或它们的组合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先简单搜集一下网络上的资料，简单整理一下。作为以后学习的基础。主要了解一下PCB设计软件，以及常见EDA软件用于原理图、PCB图、Gerber文件的后缀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Candence&lt;/li&gt;
&lt;li&gt;AD&lt;/li&gt;
&lt;li&gt;PADS&lt;/li&gt;
&lt;li&gt;KiCad&lt;/li&gt;
&lt;li&gt;EASYEDA/LCEDA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ic"&gt;IC设计软件&lt;/h2&gt;
&lt;p&gt;三个巨头？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synopsys&lt;/li&gt;
&lt;li&gt;Cadence Design Systems&lt;/li&gt;
&lt;li&gt;Siemens EDA（原 Mentor Graphics）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Synopsys用于半导体设计、验证、IP集成等，没有适用于小公司的 PCB设计软件，其他两家有相应的产品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="candence-design-systems"&gt;Candence Design Systems&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Virtuoso Platform：专为模拟、混合信号和射频IC设计定制，提供从电路设计到版图编辑和验证的完整解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allegro PCB Designer&lt;/strong&gt;：Allegro /əˈleɪɡroʊ/ 是一种高级的印制电路板（PCB）设计解决方案，用于复杂的PCB设计和生产准备。支持高速电路设计需求，包括信号完整性分析、热分析和电磁干扰分析。&lt;/li&gt;
&lt;li&gt;Incisive Functional Verification Platform：提供全面的功能验证解决方案，支持从单一IP到系统级芯片的验证需求。&lt;/li&gt;
&lt;li&gt;Tempus Timing Signoff Solution：一个时序签核工具，用于分析和优化IC设计的时序。&lt;/li&gt;
&lt;li&gt;Spectre Circuit Simulator：是一个高性能模拟和混合信号电路仿真器，适用于复杂模拟电路的精确分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OrCAD&lt;/strong&gt;：是针对较小规模设计项目的电路设计软件，提供电路图绘制、电路仿真和PCB设计工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="siemens-eda"&gt;Siemens EDA&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Calibre：业界领先的IC物理验证平台，用于检查IC设计的几何和电气规则一致性，确保它们符合制造工艺要求。&lt;/li&gt;
&lt;li&gt;Xpedition Enterprise：一个综合的PCB设计流程解决方案，提供从初始系统设计到最终生产的全过程支持。支持高级PCB设计功能，包括复杂的布局、布线、分析和协作工具。&lt;/li&gt;
&lt;li&gt;Tessent：提供一系列硅测试和产量分析工具，专注于增加复杂SoC设计的制造测试覆盖率和优化生产效率。&lt;/li&gt;
&lt;li&gt;Polarion：是一个企业级的应用生命周期管理（ALM）解决方案，支持需求管理、质量保证、项目管理和协作。&lt;/li&gt;
&lt;li&gt;HyperLynx：提供广泛的电子设计仿真工具，用于分析PCB设计中的信号完整性、电源完整性和电磁兼容性。&lt;/li&gt;
&lt;li&gt;Valor：是PCB制造解决方案，支持PCB设计验证、制造过程准备和管理。&lt;/li&gt;
&lt;li&gt;Capital：是针对汽车行业的电气系统和线束设计解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PADS&lt;/strong&gt; Standard：面向小到中等规模的企业和个人设计师，提供足够的功能来处理相对简单到中等复杂度的PCB设计。包括基本的电路设计、布局、布线和基本的仿真工具。它是为了提供一个相对经济、易于使用的解决方案，以满足较小规模设计需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="synopsys"&gt;Synopsys&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Design Compiler：是一款用于逻辑综合的工具，它将RTL（寄存器传输级）代码转换成门级网表。&lt;/li&gt;
&lt;li&gt;PrimeTime：是一个静态时序分析工具，用于验证集成电路设计的时序性能是否满足规格要求。&lt;/li&gt;
&lt;li&gt;IC Compiler II： 是一款高级的物理设计工具，用于处理从网表到最终版图的布局和布线。&lt;/li&gt;
&lt;li&gt;HSPICE：是一个行业标准的SPICE（Simulation Program with Integrated Circuit Emphasis）仿真器，用于模拟分析电子电路。&lt;/li&gt;
&lt;li&gt;Verdi：是一个综合的调试平台，提供自动化的调试环境来增强芯片设计和验证的效率。&lt;/li&gt;
&lt;li&gt;Fusion Compiler： 是一款综合工具，集成了逻辑综合和物理实现，旨在优化设计流程，减少迭代次数。&lt;/li&gt;
&lt;li&gt;Formality：是一款形式验证工具，用于验证RTL代码和生成的网表之间的功能一致性。&lt;/li&gt;
&lt;li&gt;ZeBu Server： 是一款高性能的仿真加速和仿真服务器，用于SoC设计的仿真和验证。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pcb"&gt;PCB 设计软件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Altium Designer（原 Protel)：一款全功能的PCB设计工具，提供从概念到生产的完整设计流程。它包括电路图绘制、3D PCB设计、高级布线技术，以及集成的BOM管理和设计审查功能。&lt;/li&gt;
&lt;li&gt;Cadence Allegro PCB Designer：Allegro /əˈleɪɡroʊ/是&lt;strong&gt;专业级&lt;/strong&gt;的PCB设计工具，适用于高速和复杂的电路板设计。Allegro提供先进的布线技术，如高速信号完整性分析、热分析和电磁兼容性测试。&lt;/li&gt;
&lt;li&gt;Autodesk EAGLE/Fusion 360：EAGLE(Easily Applicable Graphical Layout Editor)：是一款适用于小型团队和个人设计师的PCB设计软件。提供&lt;strong&gt;免费的基础版本&lt;/strong&gt;，适合初学者和教育用途（限制： 2 张原理图、2 层信号层和 80 平方厘米（12.4 平方英寸）的电路板面积）。&lt;/li&gt;
&lt;li&gt;PADS：属于Siemens ，面向小到中等规模的企业和个人设计师，提供足够的功能来处理相对简单到中等复杂度的PCB设计。&lt;/li&gt;
&lt;li&gt;OrCAD：Cadence公司的一个产品，比Allegro弱，是针对较小规模设计项目的电路设计软件，提供电路图绘制、电路仿真和PCB设计工具。&lt;/li&gt;
&lt;li&gt;KiCad：一款&lt;strong&gt;开源&lt;/strong&gt;的电子设计自动化软件，包括原理图设计、PCB设计、以及三维模型等功能，适用于学习和小型项目。&lt;/li&gt;
&lt;li&gt;EasyEDA/LCEDA：嘉立创EDA，是一个基于Web的应用程序，用户可以直接在浏览器中使用它，无需下载或安装任何软件。这款工具特别适合个人设计师、教育者、学生和小型工程团队。嘉立创EDA有标准版（std）和专业版（pro），这两个版本都有client桌面版本，都可以免费使用（专业版需要注册获取终身免费激活码），另外——前者支持spice仿真，后者不支持spice仿真；前者只支持在线和半离线模式，&lt;strong&gt;后者还支持全离线模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pcb_1"&gt;PCB设计阶段&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;PCB大概分成下面几个阶段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原理图绘制 (Schematic Capture)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一阶段，电路设计师使用专用软件（如Altium Designer、OrCAD等）来绘制电路原理图。该图表显示了电子组件之间的所有电气连接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：原理图绘制叫原理图捕获（Capture），据说，Capture 这个词强调了将初步的电路设计思想和理论转换成具体、详细的图形表达形式的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PCB布局 (PCB Layout)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据原理图，设计师进行PCB布局，这包括组件的放置在PCB上的位置。在这个阶段，需要考虑多种因素，如组件的大小、相互间的电气兼容性、热管理需求等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCB布线 (Routing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;布线是指在PCB布局中连接各个电子组件的电气路径。这需要考虑信号完整性、电源分配、噪声敏感线路的隔离、以及避免电磁干扰等因素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计检查和优化 (Design Review and Optimization)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用自动化工具进行设计规则检查（DRC）来找出任何可能的问题，例如短路或未连接的路径。需要根据这些反馈进行设计的调整和优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成Gerber文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成设计后，生成Gerber文件，这是一种标准的工业文件格式，用于指导PCB制造过程中的机器如何制造板。&lt;/p&gt;
&lt;h3 id="pcb_2"&gt;各个工具 原理图和PCB后缀&lt;/h3&gt;
&lt;p&gt;简单列一下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;原理图文件格式&lt;/th&gt;
&lt;th&gt;PCB设计文件格式&lt;/th&gt;
&lt;th&gt;特点描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Altium Designer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.SchDoc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.PcbDoc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全功能PCB设计软件，支持复杂项目，提供高级仿真与数据管理功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;EAGLE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.sch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.brd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;适合初学者和业余爱好者，界面友好，功能适中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;KiCad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.sch&lt;/code&gt; (v5及之前)，&lt;code&gt;.kicad_sch&lt;/code&gt; (v6及更新)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.kicad_pcb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;开源软件，没有布局和层数的限制，适合各种用户。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cadence OrCAD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.DSN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.BRD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;适合专业设计师，提供复杂的电路设计和分析工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PADS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.sch&lt;/code&gt; 或 &lt;code&gt;.asc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.pcb&lt;/code&gt; 或 &lt;code&gt;.pcbdoc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;面向中小型企业，易于学习和使用，功能坚实。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Autodesk Fusion 360&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;集成在 &lt;code&gt;.f3d&lt;/code&gt; 中&lt;/td&gt;
&lt;td&gt;集成在 &lt;code&gt;.f3d&lt;/code&gt; 中&lt;/td&gt;
&lt;td&gt;集CAD/CAM/CAE/PCB于一体，适合需要机械和电子设计整合的项目。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cadence Allegro&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.brd&lt;/code&gt; (用于PCB设计)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.brd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高级PCB设计软件，专为高速、大规模电路板设计优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;对于 KiCad&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;KiCad 原理图编辑器，支持导入如下格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Altium：.schdoc&lt;/li&gt;
&lt;li&gt;CADStar：.csa&lt;/li&gt;
&lt;li&gt;Eagle: .sch&lt;/li&gt;
&lt;li&gt;EadyEDA（立创EDA）标准版：.json&lt;/li&gt;
&lt;li&gt;EadyEDA（立创EDA）专业版：.json&lt;/li&gt;
&lt;li&gt;LTspice：.asc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KiCad PCB编辑器，支持导入如下格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Altium Circuit Maker PCB: .CMPcbDoc&lt;/li&gt;
&lt;li&gt;Altium circuit Studio PCB: .CSPcbDoc&lt;/li&gt;
&lt;li&gt;Altium Designer PCB：.PcbDoc&lt;/li&gt;
&lt;li&gt;CADStar PCB：.cpa&lt;/li&gt;
&lt;li&gt;Eagle ver 5.x XML PCB：.brd&lt;/li&gt;
&lt;li&gt;EadyEDA（立创EDA）标准版：.json, .zip&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EadyEDA（立创EDA）专业版&lt;/strong&gt;：.epro, .zip&lt;/li&gt;
&lt;li&gt;Fabmaster PCB：.txt, .fab&lt;/li&gt;
&lt;li&gt;P-Cad 200x ASCII PCB：.pcb&lt;/li&gt;
&lt;li&gt;Solidworks PCB: .SWPcbDoc&lt;/li&gt;
&lt;li&gt;IPC-2581：.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;符号库与封装库&lt;/h3&gt;
&lt;p&gt;在电子设计自动化（EDA）中，符号库和封装库是设计过程中不可或缺的组成部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号库（Symbol Library）包括用于原理图设计的图形符号，这些符号代表实际的电子组件，如电阻器、电容器和集成电路等。&lt;/li&gt;
&lt;li&gt;封装库（Footprint Library 或 Package Library）包含了这些组件在物理PCB上的封装信息，如封装的尺寸、引脚布局等。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EDA工具&lt;/th&gt;
&lt;th&gt;符号库文件后缀&lt;/th&gt;
&lt;th&gt;封装库文件后缀&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Altium Designer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.SchLib&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.PcbLib&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cadence OrCAD/Allegro&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.OLB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.PADS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KiCAD&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.lib&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.kicad_mod&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Eagle (Autodesk)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.lbr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.lbr&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EasyEDA&lt;/td&gt;
&lt;td&gt;在线符号库&lt;/td&gt;
&lt;td&gt;在线封装库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="spice"&gt;SPICE&lt;/h2&gt;
&lt;p&gt;SPICE（Simulation Program with Integrated Circuit Emphasis）是一种广泛使用的电子电路模拟程序。它最初是在1970年代早期由美国加州大学伯克利分校的电子工程师团队开发的。SPICE允许工程师在物理制造之前模拟和分析电子电路的行为，是电子电路设计和测试的重要工具。&lt;/p&gt;
&lt;h3 id="_2"&gt;变体&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SPICE变体&lt;/th&gt;
&lt;th&gt;开发商&lt;/th&gt;
&lt;th&gt;价格范围&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HSPICE&lt;/td&gt;
&lt;td&gt;Synopsys&lt;/td&gt;
&lt;td&gt;几万美元/年&lt;/td&gt;
&lt;td&gt;高精度，适用于复杂的IC设计与验证，广泛应用于半导体行业&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PSPICE&lt;/td&gt;
&lt;td&gt;Cadence Design Systems&lt;/td&gt;
&lt;td&gt;数千至数万美元&lt;/td&gt;
&lt;td&gt;强大的功能和图形用户界面，广泛用于学术和工业界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NI Multisim&lt;/td&gt;
&lt;td&gt;Niagara Systems&lt;/td&gt;
&lt;td&gt;几百到几千美元&lt;/td&gt;
&lt;td&gt;用户友好，集成电路设计与仿真，适合教育和初学者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LTspice&lt;/td&gt;
&lt;td&gt;Analog Devices&lt;/td&gt;
&lt;td&gt;免费&lt;/td&gt;
&lt;td&gt;高性能，为Analog Devices产品优化，适合电源电路和模拟电路设计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngspice&lt;/td&gt;
&lt;td&gt;开源社区&lt;/td&gt;
&lt;td&gt;免费&lt;/td&gt;
&lt;td&gt;开源SPICE仿真器，支持模拟和数字混合信号仿真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XYCE&lt;/td&gt;
&lt;td&gt;美国桑迪亚国家实验室&lt;/td&gt;
&lt;td&gt;免费&lt;/td&gt;
&lt;td&gt;开源的SPICE兼容仿真器，特点，支持并行计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINA-TI&lt;/td&gt;
&lt;td&gt;Texas Instruments&lt;/td&gt;
&lt;td&gt;免费&lt;/td&gt;
&lt;td&gt;针对TI器件的设计和仿真，包括交互式模拟和自定义模型，适合教育用途&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Multisim 有个在线版本，可以免费使用其受限版本，不过这个免费版越来越没意思，早期还支持25个器件，现在只支持最多5个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Xyce/Xyce&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ngspice"&gt;ngspice&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ngspice&lt;/strong&gt; 本身是一个基于命令行的电路仿真器，但是它可以与其他图形界面工具集成，提供更友好的用户界面。以下是一些可以与 ngspice 集成，提供图形界面的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KiCad  (使用 wxwidgets 这一跨平台 C++的 UI库)&lt;/li&gt;
&lt;li&gt;gEDA （使用GTK+ 这一个gnome的UI库）&lt;/li&gt;
&lt;li&gt;Qucs-S （使用 Qt 这一跨平台 C++的 UI库）: 网址 https://ra3xdh.github.io/，派生自Qucs，但是使用Spice。&lt;/li&gt;
&lt;li&gt;EasyEDA（Web端）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，多个商业软件可以支持/使用 ngspice（当然他们支持更多的spice）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eagle 8.4&lt;/li&gt;
&lt;li&gt;Altium Designer 20&lt;/li&gt;
&lt;li&gt;Autodesk fusion&lt;/li&gt;
&lt;li&gt;https://ngspice.sourceforge.io/resources.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="netlist"&gt;网表（Netlist）&lt;/h2&gt;
&lt;p&gt;网表（Netlist）是电子设计自动化 (EDA) 领域中一个重要的概念。网表通常是以文本形式表示，描述电路中所有电子元件的连接方式，用于电路仿真、布局和制造等后续处理步骤。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如 FreePCB 主要用于 PCB的布局，不直接原理图的设计。用户需要在其他EDA中设计电路原理图，而后将网表导入到FreePCB中进行PCB布局。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;网表的基本内容&lt;/h3&gt;
&lt;p&gt;网表包含以下基本信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元件：列出电路中使用的所有电子元件，如电阻、电容、晶体管、集成电路等。&lt;/li&gt;
&lt;li&gt;节点：电路中的连接点，每个节点代表电路中的一个电气连接点，元件之间的连接通过这些节点定义。&lt;/li&gt;
&lt;li&gt;连接：描述哪些元件的哪些引脚连接到特定的节点，从而形成电路的完整电气结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;网表的格式&lt;/h3&gt;
&lt;p&gt;网表可以有多种格式，具体取决于所使用的工具和流程，常见的格式包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPICE: 一种广泛使用的电路仿真程序的网表格式。SPICE网表详细描述了电路中的每个组件以及它们的连接方式。&lt;/li&gt;
&lt;li&gt;EDIF (Electronic Design Interchange Format): 一种用于电子设计数据交换的格式，也能以网表形式表述电路。&lt;/li&gt;
&lt;li&gt;Verilog 和 VHDL 网表: 在数字电路设计中，这些硬件描述语言（HDL）不仅用于描述硬件功能，也常用于生成反映电路结构的网表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;示例&lt;/h3&gt;
&lt;h4 id="spice_1"&gt;SPICE网表&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;V1 1 0 DC 10
R1 1 2 1000
R2 2 0 2000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;V1 是一个电压源，从节点 1 到节点 0（通常表示地），电压为 10 伏。R1 和 R2 是电阻，R1 连接节点 1 和 2，阻值为 1000 欧姆；R2 连接节点 2 和 0，阻值为 2000 欧姆。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;XA1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;in1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;in2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;mult&lt;/span&gt;
&lt;span class="nf"&gt;R1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;GND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;k&lt;/span&gt;
&lt;span class="nf"&gt;V2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;in1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;GND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;SIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="no"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;V1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;in2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;GND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;SIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="na"&gt;.tran&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;us&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="no"&gt;ms&lt;/span&gt;
&lt;span class="na"&gt;.end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;两个正弦波源（V1 和 V2）分别产生不同频率的正弦信号。这些信号被输入到一个乘法器（XA1），在乘法器中，两个信号相乘，产生一个输出信号，该信号的频率和幅度是两个输入信号的函数。乘法输出连接到一个1kΩ的电阻R1，该电阻可以用于限制电流或测量电压。&lt;/p&gt;
&lt;p&gt;.tran 1us 10ms 指令用于设置时间步长和总仿真时间，以便观察输出波形和行为。&lt;/p&gt;
&lt;h4 id="verilog"&gt;Verilog网表？&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;simple_netlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 实例化一个非门&lt;/span&gt;
&lt;span class="kt"&gt;wire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 实例化一个与门&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;module simple_netlist&lt;/code&gt;: 定义了一个模块，名为 &lt;code&gt;simple_netlis&lt;/code&gt;t，有两个输入 A 和 B，以及一个输出 Y。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not not_gate&lt;/code&gt;: 创建了一个非门，输入为 A，输出连接到中间线 &lt;code&gt;not_output&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and and_gate&lt;/code&gt;: 创建了一个与门，输入分别为 &lt;code&gt;not_output&lt;/code&gt; 和 B，输出为 Y。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="vhdl"&gt;VHDL网表？&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;IEEE.STD_LOGIC_1164.&lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;entity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;simple_netlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;simple_netlist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;architecture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Netlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;simple_netlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;STD_LOGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- 实例化一个非门&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NOT_GATE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- 实例化一个与门&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AND_GATE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Netlist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;和上面同样功能&lt;/p&gt;
&lt;h4 id="edif"&gt;EDIF 网表&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;EDIF 文件通常具有复杂的结构，使用 S-表达式（类似于 Lisp 语言的结构）来描述数据层次和元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是一个简单的 EDIF 网表的例子，描述了一个只包含单个逻辑门（非门 NOT）的电路。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SimpleNotGateExample&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edifVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edifLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keywordMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keywordLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyLibrary&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edifLevel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;technology&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberDefinition&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cellType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GENERIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LOGIC_VIEW&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NETLIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;U1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LOGIC_VIEW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cellRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;INPUT_NET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;portRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instanceRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;U1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUTPUT_NET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;portRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instanceRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;U1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;design&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyDesign&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cellRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;libraryRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewRef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LOGIC_VIEW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;这个网表对应的spice网表如下？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Simple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Gate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Circuit&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBCKT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VSS&lt;/span&gt;
&lt;span class="nx"&gt;M1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NMOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;W&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2u&lt;/span&gt;
&lt;span class="nx"&gt;M2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PMOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;W&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4u&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ENDS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;circuit&lt;/span&gt;
&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;VSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;VIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PULSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;X1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VDD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;VSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NOT_GATE&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Analysis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TRAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PLOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TRAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="gerber"&gt;Gerber文件&lt;/h2&gt;
&lt;p&gt;Gerber文件格式是电子行业标准的文件格式之一，广泛用于印刷电路板（PCB）制造的数据交换。这种格式最初由Gerber Systems Corp开发，现在由美国印刷电路行业协会（IPC）管理。Gerber格式用于详细描述PCB的每层的图像，包括铜层、焊膏层、阻焊层、丝印层等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;铜层（Top/Bottom/Inner Layers）：这些层包含导电路径，通常由铜制成，用于连接电路板上的各个组件。&lt;/li&gt;
&lt;li&gt;阻焊层（Solder Mask Layers）：这些层提供了一层保护膜，帮助防止意外的焊接和保护铜层不被氧化。&lt;/li&gt;
&lt;li&gt;丝印层（Silkscreen Layers）：常用于打印组件标识、标志和其他帮助组装和测试的信息。&lt;/li&gt;
&lt;li&gt;焊膏层（Solder Paste Layers）：这些文件用于指导SMT组装过程中，自动化设备放置焊膏的位置。&lt;/li&gt;
&lt;li&gt;剖面层（Outline Layer）：指定了PCB的外形及内部槽的位置，对于PCB切割和加工至关重要。&lt;/li&gt;
&lt;li&gt;钻孔文件（Drill Files）：钻孔文件是用于指导PCB制造中钻孔机的操作，非常重要，因为它决定了元件孔和安装孔的精确位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RS-274D：早期的Gerber格式，需要额外的“孔洞文件”（Drill File）来描述钻孔数据。&lt;/li&gt;
&lt;li&gt;RS-274X：也称为扩展Gerber格式或X-Gerber。这是现在最常用的格式，它包含更完整的信息，如孔径定义和图形填充信息，使得文件自包含，无需额外的孔洞文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;后缀&lt;/h2&gt;
&lt;p&gt;各层的名字与一般后缀：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层的名称（英文名字）&lt;/th&gt;
&lt;th&gt;后缀&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;顶层铜 (Top Copper)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gtl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述PCB最顶层的铜布局。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层铜 (Bottom Copper)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gbl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述PCB最底层的铜布局。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶层阻焊 (Top Solder Mask)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述顶层元件不应被焊接的区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层阻焊 (Bottom Solder Mask)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gbs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述底层元件不应被焊接的区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶层丝印 (Top Silkscreen)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含PCB顶面的标签和参考标记，如元件编号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层丝印 (Bottom Silkscreen)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gbo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含PCB底面的标签和参考标记。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶层焊膏 (Top Solder Paste)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gtp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于SMT组装，描述顶层焊膏的应用位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层焊膏 (Bottom Solder Paste)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gbp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于SMT组装，描述底层焊膏的应用位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内层铜 (Inner Copper)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.g2l&lt;/code&gt;, &lt;code&gt;.g3l&lt;/code&gt; 等&lt;/td&gt;
&lt;td&gt;描述多层PCB中间的铜层。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;剖面层（轮廓层） (Outline Layer)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gko&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述PCB的外形和内部剖面。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;钻孔文件 (Drill Files)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.drl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述所有钻孔的位置、大小和属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;几个EDA使用的后缀：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EDA软件&lt;/th&gt;
&lt;th&gt;常用Gerber文件后缀&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Altium Designer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gtl&lt;/code&gt;, &lt;code&gt;.gbl&lt;/code&gt;, &lt;code&gt;.gts&lt;/code&gt;, &lt;code&gt;.gbs&lt;/code&gt;, &lt;code&gt;.gto&lt;/code&gt;, &lt;code&gt;.gbo&lt;/code&gt;, &lt;code&gt;.gtp&lt;/code&gt;, &lt;code&gt;.gbp&lt;/code&gt;, &lt;code&gt;.gko&lt;/code&gt;, &lt;code&gt;.drl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;顶层铜层, 底层铜层, 顶层阻焊, 底层阻焊, 顶层丝印, 底层丝印, 顶层焊膏, 底层焊膏, 开槽文件, 钻孔文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cadence OrCAD/Allegro&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.art&lt;/code&gt;, &lt;code&gt;.brd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;特定层文件, 设计文件（需转换为Gerber）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Eagle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gtl&lt;/code&gt;, &lt;code&gt;.gbl&lt;/code&gt;, &lt;code&gt;.gts&lt;/code&gt;, &lt;code&gt;.gbs&lt;/code&gt;, 等&lt;/td&gt;
&lt;td&gt;同Altium Designer类似的层特定后缀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;KiCad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gtl&lt;/code&gt;, &lt;code&gt;.gbl&lt;/code&gt;, &lt;code&gt;.gts&lt;/code&gt;, &lt;code&gt;.gbs&lt;/code&gt;, &lt;code&gt;.drl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同Altium Designer类似的层特定后缀和钻孔文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Siemens EDA(Mentor Graphics )&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gbr&lt;/code&gt;, &lt;code&gt;.drd&lt;/code&gt;, &lt;code&gt;.drl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标准Gerber文件和钻孔文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.gbr 和具体到各层的后缀（如 .gtl、.gbl 等）用于描述PCB的不同制造层。&lt;/li&gt;
&lt;li&gt;.drl 是钻孔文件，包含PCB上所有钻孔的位置和尺寸信息。&lt;/li&gt;
&lt;li&gt;部分软件（如Cadence系列）可能使用非标凑后缀（如 &lt;strong&gt;.art&lt;/strong&gt;）或设计文件（如 .brd），这些文件需转换成Gerber文件供制造使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;其他&lt;/h2&gt;
&lt;h3 id="fritzing"&gt;Fritzing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/fritzing&lt;/li&gt;
&lt;li&gt;https://fritzing.org/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fritzing 是一个流行的开源硬件设计工具，专为非专业人士设计，以帮助他们轻松创建和分享电子项目。该软件提供了一个直观的用户界面，使用户可以在不同的视图之间切换，包括面包板视图、原理图视图和PCB布局视图。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该软件使用 Qt 编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_9"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Comparison_of_EDA_software&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/List_of_free_electronics_circuit_simulators&lt;/li&gt;
&lt;/ul&gt;</content><category term="CAx"></category><category term="EDA"></category></entry></feed>